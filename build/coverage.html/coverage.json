{"/home/travis/build/npmtest/node-npmtest-lazy.js/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_lazy_js */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/lib.npmtest_lazy.js.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/lib.npmtest_lazy.js.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":58}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_lazy_js */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_lazy_js = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_lazy_js = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":51}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":65},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-lazy.js && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_lazy_js */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_lazy_js","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_lazy_js.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_lazy_js.rollup.js'] =","            local.assetsDict['/assets.npmtest_lazy_js.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_lazy_js.__dirname + '/lib.npmtest_lazy_js.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/lazy.node.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/lazy.node.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":2,"13":1,"14":1,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":1,"37":0,"38":0,"39":1,"40":1,"41":0,"42":0,"43":1,"44":0,"45":1,"46":0,"47":0,"48":1,"49":1,"50":0,"51":1,"52":0,"53":1,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":1,"82":0,"83":0,"84":1},"b":{"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[1,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[1,0],"14":[0,0]},"f":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"StreamedSequence","line":22,"loc":{"start":{"line":22,"column":0},"end":{"line":22,"column":34}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":40},"end":{"line":28,"column":59}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":34},"end":{"line":40,"column":47}}},"4":{"name":"cancel","line":44,"loc":{"start":{"line":44,"column":36},"end":{"line":44,"column":54}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":18},"end":{"line":46,"column":35}}},"6":{"name":"(anonymous_6)","line":51,"loc":{"start":{"line":51,"column":19},"end":{"line":51,"column":31}}},"7":{"name":"(anonymous_7)","line":64,"loc":{"start":{"line":64,"column":21},"end":{"line":64,"column":32}}},"8":{"name":"(anonymous_8)","line":78,"loc":{"start":{"line":78,"column":35},"end":{"line":78,"column":46}}},"9":{"name":"FileStreamSequence","line":82,"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":44}}},"10":{"name":"(anonymous_10)","line":89,"loc":{"start":{"line":89,"column":42},"end":{"line":89,"column":61}}},"11":{"name":"(anonymous_11)","line":103,"loc":{"start":{"line":103,"column":16},"end":{"line":103,"column":41}}},"12":{"name":"HttpStreamSequence","line":107,"loc":{"start":{"line":107,"column":0},"end":{"line":107,"column":43}}},"13":{"name":"(anonymous_13)","line":114,"loc":{"start":{"line":114,"column":42},"end":{"line":114,"column":61}}},"14":{"name":"(anonymous_14)","line":127,"loc":{"start":{"line":127,"column":23},"end":{"line":127,"column":37}}},"15":{"name":"toStream","line":132,"loc":{"start":{"line":132,"column":37},"end":{"line":132,"column":64}}},"16":{"name":"pipe","line":136,"loc":{"start":{"line":136,"column":33},"end":{"line":136,"column":60}}},"17":{"name":"LazyStream","line":140,"loc":{"start":{"line":140,"column":2},"end":{"line":140,"column":41}}},"18":{"name":"(anonymous_18)","line":162,"loc":{"start":{"line":162,"column":31},"end":{"line":162,"column":42}}},"19":{"name":"(anonymous_19)","line":166,"loc":{"start":{"line":166,"column":38},"end":{"line":166,"column":56}}},"20":{"name":"(anonymous_20)","line":173,"loc":{"start":{"line":173,"column":26},"end":{"line":173,"column":37}}},"21":{"name":"(anonymous_21)","line":187,"loc":{"start":{"line":187,"column":21},"end":{"line":187,"column":38}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":27}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":29}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"4":{"start":{"line":4,"column":0},"end":{"line":4,"column":31}},"5":{"start":{"line":5,"column":0},"end":{"line":5,"column":28}},"6":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"7":{"start":{"line":10,"column":0},"end":{"line":10,"column":32}},"8":{"start":{"line":14,"column":0},"end":{"line":14,"column":65}},"9":{"start":{"line":15,"column":0},"end":{"line":17,"column":1}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":40}},"11":{"start":{"line":22,"column":0},"end":{"line":24,"column":1}},"12":{"start":{"line":23,"column":2},"end":{"line":23,"column":23}},"13":{"start":{"line":26,"column":0},"end":{"line":26,"column":59}},"14":{"start":{"line":28,"column":0},"end":{"line":31,"column":2}},"15":{"start":{"line":29,"column":2},"end":{"line":29,"column":23}},"16":{"start":{"line":30,"column":2},"end":{"line":30,"column":24}},"17":{"start":{"line":40,"column":0},"end":{"line":70,"column":2}},"18":{"start":{"line":41,"column":2},"end":{"line":42,"column":31}},"19":{"start":{"line":44,"column":2},"end":{"line":44,"column":77}},"20":{"start":{"line":44,"column":56},"end":{"line":44,"column":73}},"21":{"start":{"line":46,"column":2},"end":{"line":67,"column":5}},"22":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"23":{"start":{"line":48,"column":6},"end":{"line":48,"column":45}},"24":{"start":{"line":51,"column":4},"end":{"line":60,"column":6}},"25":{"start":{"line":52,"column":6},"end":{"line":59,"column":7}},"26":{"start":{"line":53,"column":8},"end":{"line":56,"column":9}},"27":{"start":{"line":54,"column":10},"end":{"line":54,"column":50}},"28":{"start":{"line":55,"column":10},"end":{"line":55,"column":33}},"29":{"start":{"line":58,"column":8},"end":{"line":58,"column":26}},"30":{"start":{"line":62,"column":4},"end":{"line":62,"column":32}},"31":{"start":{"line":64,"column":4},"end":{"line":66,"column":7}},"32":{"start":{"line":65,"column":6},"end":{"line":65,"column":28}},"33":{"start":{"line":69,"column":2},"end":{"line":69,"column":16}},"34":{"start":{"line":78,"column":0},"end":{"line":80,"column":2}},"35":{"start":{"line":79,"column":2},"end":{"line":79,"column":36}},"36":{"start":{"line":82,"column":0},"end":{"line":85,"column":1}},"37":{"start":{"line":83,"column":2},"end":{"line":83,"column":19}},"38":{"start":{"line":84,"column":2},"end":{"line":84,"column":27}},"39":{"start":{"line":87,"column":0},"end":{"line":87,"column":54}},"40":{"start":{"line":89,"column":0},"end":{"line":92,"column":2}},"41":{"start":{"line":90,"column":2},"end":{"line":90,"column":67}},"42":{"start":{"line":91,"column":2},"end":{"line":91,"column":19}},"43":{"start":{"line":103,"column":0},"end":{"line":105,"column":2}},"44":{"start":{"line":104,"column":2},"end":{"line":104,"column":48}},"45":{"start":{"line":107,"column":0},"end":{"line":110,"column":1}},"46":{"start":{"line":108,"column":2},"end":{"line":108,"column":17}},"47":{"start":{"line":109,"column":2},"end":{"line":109,"column":27}},"48":{"start":{"line":112,"column":0},"end":{"line":112,"column":54}},"49":{"start":{"line":114,"column":0},"end":{"line":116,"column":2}},"50":{"start":{"line":115,"column":2},"end":{"line":115,"column":42}},"51":{"start":{"line":127,"column":0},"end":{"line":129,"column":2}},"52":{"start":{"line":128,"column":2},"end":{"line":128,"column":37}},"53":{"start":{"line":131,"column":0},"end":{"line":180,"column":1}},"54":{"start":{"line":132,"column":2},"end":{"line":134,"column":4}},"55":{"start":{"line":133,"column":4},"end":{"line":133,"column":41}},"56":{"start":{"line":136,"column":2},"end":{"line":138,"column":4}},"57":{"start":{"line":137,"column":4},"end":{"line":137,"column":38}},"58":{"start":{"line":140,"column":2},"end":{"line":158,"column":3}},"59":{"start":{"line":141,"column":4},"end":{"line":143,"column":18}},"60":{"start":{"line":145,"column":4},"end":{"line":145,"column":40}},"61":{"start":{"line":147,"column":4},"end":{"line":147,"column":29}},"62":{"start":{"line":148,"column":4},"end":{"line":148,"column":26}},"63":{"start":{"line":151,"column":4},"end":{"line":157,"column":5}},"64":{"start":{"line":152,"column":6},"end":{"line":155,"column":7}},"65":{"start":{"line":153,"column":8},"end":{"line":153,"column":44}},"66":{"start":{"line":154,"column":8},"end":{"line":154,"column":14}},"67":{"start":{"line":156,"column":6},"end":{"line":156,"column":33}},"68":{"start":{"line":160,"column":2},"end":{"line":160,"column":45}},"69":{"start":{"line":162,"column":2},"end":{"line":179,"column":4}},"70":{"start":{"line":163,"column":4},"end":{"line":163,"column":20}},"71":{"start":{"line":165,"column":4},"end":{"line":178,"column":5}},"72":{"start":{"line":166,"column":6},"end":{"line":171,"column":9}},"73":{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},"74":{"start":{"line":168,"column":10},"end":{"line":168,"column":33}},"75":{"start":{"line":170,"column":8},"end":{"line":170,"column":34}},"76":{"start":{"line":172,"column":6},"end":{"line":176,"column":7}},"77":{"start":{"line":173,"column":8},"end":{"line":175,"column":11}},"78":{"start":{"line":174,"column":10},"end":{"line":174,"column":26}},"79":{"start":{"line":177,"column":6},"end":{"line":177,"column":26}},"80":{"start":{"line":185,"column":0},"end":{"line":185,"column":42}},"81":{"start":{"line":187,"column":0},"end":{"line":191,"column":3}},"82":{"start":{"line":188,"column":2},"end":{"line":190,"column":3}},"83":{"start":{"line":189,"column":4},"end":{"line":189,"column":40}},"84":{"start":{"line":193,"column":0},"end":{"line":193,"column":22}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":0},"end":{"line":15,"column":0}},{"start":{"line":15,"column":0},"end":{"line":15,"column":0}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"3":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":25},"end":{"line":48,"column":33}},{"start":{"line":48,"column":37},"end":{"line":48,"column":43}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"5":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":21}},{"start":{"line":53,"column":25},"end":{"line":53,"column":40}}]},"6":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":20},"end":{"line":79,"column":26}},{"start":{"line":79,"column":30},"end":{"line":79,"column":34}}]},"7":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":0},"end":{"line":131,"column":0}},{"start":{"line":131,"column":0},"end":{"line":131,"column":0}}]},"8":{"line":141,"type":"binary-expr","locations":[{"start":{"line":141,"column":19},"end":{"line":141,"column":26}},{"start":{"line":141,"column":30},"end":{"line":141,"column":32}}]},"9":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":6},"end":{"line":152,"column":6}},{"start":{"line":152,"column":6},"end":{"line":152,"column":6}}]},"10":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":4},"end":{"line":165,"column":4}},{"start":{"line":165,"column":4},"end":{"line":165,"column":4}}]},"11":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":167,"column":8}},{"start":{"line":167,"column":8},"end":{"line":167,"column":8}}]},"12":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":6},"end":{"line":172,"column":6}},{"start":{"line":172,"column":6},"end":{"line":172,"column":6}}]},"13":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":0},"end":{"line":185,"column":15}},{"start":{"line":185,"column":20},"end":{"line":185,"column":40}}]},"14":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":2},"end":{"line":188,"column":2}},{"start":{"line":188,"column":2},"end":{"line":188,"column":2}}]}},"code":["var fs     = require(\"fs\");","var http   = require(\"http\");","var os     = require(\"os\");","var Stream = require(\"stream\");","var URL    = require(\"url\");","var util   = require(\"util\");","","// The starting point is everything that works in any environment (browser OR","// Node.js).","var Lazy = require(\"./lazy.js\");","","// Check if ES6 features are supported and, if so, include ES6-specific Lazy.js","// features.","var isHarmonySupported = require('./util.js').isHarmonySupported;","if (isHarmonySupported()) {","  require('./experimental/lazy.es6.js');","}","","/**"," * @constructor"," */","function StreamedSequence(stream) {","  this.stream = stream;","}","","StreamedSequence.prototype = new Lazy.StreamLikeSequence();","","StreamedSequence.prototype.openStream = function(callback) {","  this.stream.resume();","  callback(this.stream);","};","","/**"," * Handles every chunk of data in this sequence."," *"," * @param {function(string):*} fn The function to call on each chunk of data as"," *     it's read from the stream. Return false from the function to stop reading"," *     the stream."," */","StreamedSequence.prototype.each = function(fn) {","  var cancelled = false,","      encoding = this.encoding;","","  var handle = new Lazy.AsyncHandle(function cancel() { cancelled = true; });","","  this.openStream(function(stream) {","    if (stream.setEncoding) {","      stream.setEncoding(encoding || 'utf8');","    }","","    var listener = function(e) {","      try {","        if (cancelled || fn(e) === false) {","          stream.removeListener(\"data\", listener);","          handle._resolve(false);","        }","      } catch (e) {","        handle._reject(e);","      }","    };","","    stream.on(\"data\", listener);","","    stream.on(\"end\", function() {","      handle._resolve(true);","    });","  });","","  return handle;","};","","/**"," * Creates a {@link Sequence} of lines as they are read from a file."," *"," * @return {Sequence} A sequence comprising the lines in the underlying file, as"," *     they are read."," */","StreamedSequence.prototype.lines = function() {","  return this.split(os.EOL || \"\\n\");","};","","function FileStreamSequence(path, encoding) {","  this.path = path;","  this.encoding = encoding;","}","","FileStreamSequence.prototype = new StreamedSequence();","","FileStreamSequence.prototype.openStream = function(callback) {","  var stream = fs.createReadStream(this.path, { autoClose: true });","  callback(stream);","};","","/**"," * Creates a {@link Sequence} from a file stream, whose elements are chunks of"," * data as the stream is read. This is an {@link AsyncSequence}, so methods such"," * as {@link Sequence#reduce} return an {@link AsyncHandle} rather than a value."," *"," * @param {string} path A path to a file."," * @param {string} encoding The text encoding of the file (e.g., \"utf-8\")."," * @return {Sequence} The streamed sequence."," */","Lazy.readFile = function(path, encoding) {","  return new FileStreamSequence(path, encoding);","};","","function HttpStreamSequence(url, encoding) {","  this.url = url;","  this.encoding = encoding;","}","","HttpStreamSequence.prototype = new StreamedSequence();","","HttpStreamSequence.prototype.openStream = function(callback) {","  http.get(URL.parse(this.url), callback);","};","","/**"," * Creates a {@link Sequence} from an HTTP stream, whose elements are chunks of"," * data as the stream is read. This sequence works asynchronously, so"," * synchronous methods such as {@code indexOf}, {@code any}, and {@code toArray}"," * won't work."," *"," * @param {string} url The URL for the HTTP request."," * @return {Sequence} The streamed sequence."," */","Lazy.makeHttpRequest = function(url) {","  return new HttpStreamSequence(url);","};","","if (typeof Stream.Readable !== \"undefined\") {","  Lazy.Sequence.prototype.toStream = function toStream(options) {","    return new LazyStream(this, options);","  };","","  Lazy.Sequence.prototype.pipe = function pipe(destination) {","    this.toStream().pipe(destination);","  };","","  function LazyStream(sequence, options) {","    options = Lazy(options || {})","      .extend({ objectMode: true })","      .toObject();","","    Stream.Readable.call(this, options);","","    this.sequence = sequence;","    this.started  = false;","    ","    // Find delimiter on a (parent) sequence object if set","    while (sequence) {","      if (sequence.delimiter) {","        this.delimiter = sequence.delimiter;","        break;","      }","      sequence = sequence.parent;","    }","  }","","  util.inherits(LazyStream, Stream.Readable);","","  LazyStream.prototype._read = function() {","    var self = this;","","    if (!this.started) {","      var handle = this.sequence.each(function(line, i) {","        if (self.delimiter != null) {","          line += self.delimiter;","        }","        return self.push(line, i);","      });","      if (handle instanceof Lazy.AsyncHandle) {","        handle.onComplete(function() {","          self.push(null);","        });","      }","      this.started = true;","    }","  };","}","","/*"," * Add support for `Lazy(Stream)`."," */","Lazy.extensions || (Lazy.extensions = []);","","Lazy.extensions.push(function(source) {","  if (source instanceof Stream) {","    return new StreamedSequence(source);","  }","});","","module.exports = Lazy;",""],"l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"10":1,"14":1,"15":1,"16":1,"22":1,"23":2,"26":1,"28":1,"29":0,"30":0,"40":1,"41":0,"44":0,"46":0,"47":0,"48":0,"51":0,"52":0,"53":0,"54":0,"55":0,"58":0,"62":0,"64":0,"65":0,"69":0,"78":1,"79":0,"82":1,"83":0,"84":0,"87":1,"89":1,"90":0,"91":0,"103":1,"104":0,"107":1,"108":0,"109":0,"112":1,"114":1,"115":0,"127":1,"128":0,"131":1,"132":1,"133":0,"136":1,"137":0,"140":1,"141":0,"145":0,"147":0,"148":0,"151":0,"152":0,"153":0,"154":0,"156":0,"160":1,"162":1,"163":0,"165":0,"166":0,"167":0,"168":0,"170":0,"172":0,"173":0,"174":0,"177":0,"185":1,"187":1,"188":0,"189":0,"193":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/lazy.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/lazy.js","s":{"1":1,"2":1,"3":0,"4":1,"5":1,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1,"23":1,"24":0,"25":1,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":1,"37":0,"38":0,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":1,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":0,"72":0,"73":0,"74":1,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":1,"84":0,"85":1,"86":0,"87":0,"88":0,"89":0,"90":1,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":1,"103":0,"104":1,"105":0,"106":1,"107":0,"108":0,"109":1,"110":1,"111":0,"112":1,"113":0,"114":0,"115":0,"116":1,"117":0,"118":0,"119":0,"120":1,"121":0,"122":1,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":1,"130":0,"131":0,"132":1,"133":0,"134":1,"135":0,"136":1,"137":2,"138":2,"139":1,"140":1,"141":0,"142":1,"143":0,"144":0,"145":0,"146":0,"147":1,"148":0,"149":1,"150":0,"151":0,"152":0,"153":1,"154":0,"155":1,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":1,"165":0,"166":0,"167":0,"168":1,"169":0,"170":0,"171":1,"172":0,"173":1,"174":0,"175":1,"176":0,"177":1,"178":1,"179":0,"180":1,"181":0,"182":1,"183":0,"184":1,"185":0,"186":0,"187":0,"188":0,"189":1,"190":0,"191":0,"192":0,"193":1,"194":0,"195":1,"196":0,"197":0,"198":1,"199":1,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":1,"210":0,"211":0,"212":0,"213":1,"214":0,"215":1,"216":0,"217":0,"218":1,"219":1,"220":0,"221":1,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":1,"234":0,"235":0,"236":1,"237":0,"238":1,"239":0,"240":1,"241":0,"242":1,"243":0,"244":0,"245":1,"246":1,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":1,"257":0,"258":1,"259":0,"260":0,"261":1,"262":1,"263":0,"264":0,"265":1,"266":0,"267":0,"268":0,"269":1,"270":0,"271":1,"272":0,"273":1,"274":0,"275":1,"276":0,"277":0,"278":1,"279":1,"280":0,"281":0,"282":0,"283":0,"284":0,"285":1,"286":0,"287":1,"288":0,"289":1,"290":0,"291":0,"292":1,"293":1,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":1,"302":0,"303":0,"304":0,"305":0,"306":1,"307":0,"308":0,"309":0,"310":0,"311":1,"312":0,"313":0,"314":1,"315":1,"316":0,"317":0,"318":0,"319":1,"320":0,"321":1,"322":0,"323":1,"324":0,"325":0,"326":0,"327":1,"328":0,"329":1,"330":0,"331":0,"332":0,"333":1,"334":0,"335":1,"336":0,"337":0,"338":1,"339":0,"340":1,"341":0,"342":1,"343":0,"344":0,"345":1,"346":1,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":1,"357":0,"358":0,"359":0,"360":1,"361":0,"362":0,"363":1,"364":1,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":1,"385":0,"386":1,"387":0,"388":1,"389":1,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":1,"399":0,"400":1,"401":0,"402":1,"403":1,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":1,"412":0,"413":0,"414":1,"415":0,"416":1,"417":0,"418":1,"419":0,"420":0,"421":1,"422":1,"423":0,"424":0,"425":0,"426":0,"427":1,"428":0,"429":1,"430":0,"431":0,"432":0,"433":1,"434":0,"435":0,"436":1,"437":1,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":1,"450":0,"451":0,"452":0,"453":0,"454":1,"455":0,"456":1,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":1,"466":0,"467":0,"468":0,"469":0,"470":1,"471":0,"472":1,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":1,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":1,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":1,"497":0,"498":0,"499":0,"500":1,"501":0,"502":1,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":1,"511":0,"512":1,"513":0,"514":1,"515":0,"516":1,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":1,"524":0,"525":0,"526":0,"527":0,"528":1,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":1,"537":0,"538":1,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":1,"548":0,"549":1,"550":0,"551":0,"552":0,"553":0,"554":0,"555":1,"556":0,"557":1,"558":0,"559":0,"560":0,"561":0,"562":0,"563":1,"564":0,"565":0,"566":0,"567":1,"568":0,"569":0,"570":1,"571":1,"572":0,"573":1,"574":0,"575":0,"576":1,"577":0,"578":1,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":1,"587":0,"588":1,"589":0,"590":0,"591":1,"592":1,"593":0,"594":0,"595":0,"596":0,"597":1,"598":0,"599":1,"600":0,"601":1,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":1,"609":0,"610":0,"611":0,"612":1,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":1,"620":0,"621":0,"622":0,"623":1,"624":0,"625":0,"626":0,"627":0,"628":1,"629":0,"630":0,"631":0,"632":1,"633":0,"634":0,"635":0,"636":0,"637":0,"638":1,"639":0,"640":1,"641":0,"642":1,"643":0,"644":0,"645":0,"646":1,"647":1,"648":0,"649":0,"650":0,"651":0,"652":1,"653":0,"654":0,"655":0,"656":0,"657":1,"658":0,"659":0,"660":0,"661":1,"662":0,"663":0,"664":1,"665":1,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":1,"677":1,"678":1,"679":0,"680":0,"681":0,"682":1,"683":0,"684":1,"685":0,"686":1,"687":0,"688":1,"689":0,"690":1,"691":0,"692":0,"693":1,"694":0,"695":1,"696":0,"697":0,"698":0,"699":0,"700":1,"701":0,"702":0,"703":0,"704":0,"705":0,"706":1,"707":0,"708":1,"709":0,"710":1,"711":0,"712":1,"713":0,"714":1,"715":0,"716":0,"717":0,"718":0,"719":0,"720":0,"721":0,"722":0,"723":0,"724":1,"725":0,"726":1,"727":0,"728":0,"729":1,"730":1,"731":0,"732":0,"733":0,"734":1,"735":0,"736":1,"737":0,"738":0,"739":1,"740":1,"741":0,"742":0,"743":0,"744":0,"745":0,"746":0,"747":1,"748":0,"749":1,"750":0,"751":1,"752":1,"753":0,"754":1,"755":0,"756":0,"757":0,"758":1,"759":0,"760":0,"761":1,"762":1,"763":0,"764":0,"765":1,"766":0,"767":1,"768":0,"769":0,"770":1,"771":1,"772":0,"773":1,"774":0,"775":0,"776":1,"777":0,"778":0,"779":0,"780":1,"781":0,"782":0,"783":1,"784":1,"785":0,"786":0,"787":0,"788":0,"789":1,"790":0,"791":1,"792":0,"793":1,"794":0,"795":0,"796":0,"797":1,"798":1,"799":0,"800":0,"801":0,"802":0,"803":0,"804":0,"805":0,"806":0,"807":1,"808":1,"809":0,"810":0,"811":0,"812":1,"813":1,"814":0,"815":0,"816":0,"817":1,"818":0,"819":1,"820":0,"821":0,"822":0,"823":0,"824":0,"825":0,"826":0,"827":1,"828":0,"829":0,"830":0,"831":0,"832":0,"833":0,"834":1,"835":0,"836":0,"837":0,"838":1,"839":0,"840":0,"841":0,"842":1,"843":0,"844":0,"845":0,"846":1,"847":0,"848":1,"849":1,"850":0,"851":1,"852":0,"853":1,"854":0,"855":1,"856":0,"857":1,"858":0,"859":1,"860":0,"861":1,"862":0,"863":1,"864":0,"865":1,"866":0,"867":0,"868":0,"869":1,"870":0,"871":1,"872":0,"873":0,"874":1,"875":1,"876":0,"877":0,"878":0,"879":0,"880":1,"881":0,"882":1,"883":0,"884":0,"885":0,"886":0,"887":0,"888":1,"889":0,"890":0,"891":1,"892":1,"893":0,"894":0,"895":0,"896":0,"897":0,"898":0,"899":1,"900":0,"901":0,"902":0,"903":1,"904":1,"905":0,"906":0,"907":0,"908":0,"909":0,"910":0,"911":1,"912":0,"913":0,"914":0,"915":0,"916":0,"917":0,"918":0,"919":0,"920":0,"921":0,"922":0,"923":0,"924":0,"925":0,"926":0,"927":0,"928":0,"929":1,"930":1,"931":0,"932":0,"933":0,"934":0,"935":0,"936":1,"937":0,"938":0,"939":1,"940":1,"941":0,"942":0,"943":0,"944":0,"945":1,"946":0,"947":1,"948":0,"949":0,"950":0,"951":0,"952":0,"953":0,"954":0,"955":0,"956":0,"957":1,"958":1,"959":1,"960":0,"961":0,"962":0,"963":1,"964":0,"965":1,"966":0,"967":0,"968":0,"969":1,"970":0,"971":1,"972":0,"973":1,"974":1,"975":0,"976":0,"977":0,"978":1,"979":0,"980":1,"981":0,"982":1,"983":1,"984":0,"985":0,"986":0,"987":1,"988":0,"989":1,"990":0,"991":1,"992":0,"993":0,"994":1,"995":1,"996":0,"997":0,"998":0,"999":0,"1000":1,"1001":0,"1002":1,"1003":0,"1004":1,"1005":0,"1006":1,"1007":0,"1008":0,"1009":1,"1010":1,"1011":0,"1012":1,"1013":0,"1014":0,"1015":0,"1016":0,"1017":0,"1018":0,"1019":0,"1020":0,"1021":0,"1022":0,"1023":1,"1024":0,"1025":1,"1026":0,"1027":0,"1028":1,"1029":1,"1030":0,"1031":0,"1032":1,"1033":0,"1034":0,"1035":0,"1036":0,"1037":0,"1038":0,"1039":0,"1040":0,"1041":0,"1042":0,"1043":0,"1044":1,"1045":0,"1046":1,"1047":0,"1048":1,"1049":1,"1050":0,"1051":0,"1052":1,"1053":0,"1054":0,"1055":1,"1056":0,"1057":0,"1058":0,"1059":1,"1060":1,"1061":0,"1062":0,"1063":0,"1064":0,"1065":0,"1066":0,"1067":0,"1068":0,"1069":0,"1070":0,"1071":0,"1072":0,"1073":0,"1074":0,"1075":0,"1076":0,"1077":1,"1078":0,"1079":0,"1080":0,"1081":0,"1082":0,"1083":0,"1084":0,"1085":0,"1086":0,"1087":0,"1088":0,"1089":0,"1090":0,"1091":0,"1092":1,"1093":0,"1094":1,"1095":0,"1096":0,"1097":0,"1098":1,"1099":0,"1100":1,"1101":0,"1102":1,"1103":0,"1104":0,"1105":1,"1106":1,"1107":0,"1108":1,"1109":0,"1110":0,"1111":0,"1112":0,"1113":1,"1114":0,"1115":1,"1116":0,"1117":0,"1118":1,"1119":1,"1120":0,"1121":1,"1122":0,"1123":0,"1124":0,"1125":0,"1126":1,"1127":0,"1128":0,"1129":1,"1130":0,"1131":1,"1132":0,"1133":0,"1134":0,"1135":1,"1136":1,"1137":0,"1138":0,"1139":0,"1140":0,"1141":0,"1142":0,"1143":0,"1144":0,"1145":0,"1146":0,"1147":0,"1148":0,"1149":1,"1150":1,"1151":0,"1152":0,"1153":0,"1154":0,"1155":0,"1156":0,"1157":1,"1158":1,"1159":0,"1160":0,"1161":0,"1162":0,"1163":0,"1164":0,"1165":0,"1166":0,"1167":0,"1168":0,"1169":1,"1170":0,"1171":1,"1172":0,"1173":1,"1174":1,"1175":0,"1176":1,"1177":0,"1178":1,"1179":0,"1180":1,"1181":0,"1182":0,"1183":0,"1184":0,"1185":0,"1186":0,"1187":1,"1188":1,"1189":1,"1190":0,"1191":0,"1192":0,"1193":1,"1194":0,"1195":1,"1196":0,"1197":1,"1198":0,"1199":0,"1200":1,"1201":0,"1202":1,"1203":0,"1204":1,"1205":0,"1206":1,"1207":0,"1208":0,"1209":0,"1210":0,"1211":1,"1212":0,"1213":1,"1214":0,"1215":0,"1216":0,"1217":1,"1218":1,"1219":0,"1220":1,"1221":0,"1222":1,"1223":0,"1224":0,"1225":0,"1226":1,"1227":0,"1228":0,"1229":0,"1230":1,"1231":0,"1232":1,"1233":0,"1234":1,"1235":0,"1236":1,"1237":0,"1238":1,"1239":0,"1240":1,"1241":0,"1242":1,"1243":0,"1244":0,"1245":1,"1246":0,"1247":0,"1248":1,"1249":0,"1250":1,"1251":0,"1252":0,"1253":1,"1254":1,"1255":1,"1256":1,"1257":0,"1258":1,"1259":0,"1260":1,"1261":1,"1262":1,"1263":1,"1264":0,"1265":1,"1266":0,"1267":1,"1268":0,"1269":0,"1270":1,"1271":1,"1272":0,"1273":1,"1274":0,"1275":0,"1276":1,"1277":0,"1278":1,"1279":0,"1280":1,"1281":0,"1282":1,"1283":0,"1284":0,"1285":1,"1286":1,"1287":0,"1288":0,"1289":0,"1290":0,"1291":0,"1292":0,"1293":0,"1294":0,"1295":1,"1296":0,"1297":0,"1298":1,"1299":0,"1300":1,"1301":0,"1302":0,"1303":0,"1304":0,"1305":0,"1306":0,"1307":0,"1308":0,"1309":0,"1310":0,"1311":0,"1312":0,"1313":0,"1314":0,"1315":0,"1316":1,"1317":0,"1318":0,"1319":1,"1320":0,"1321":1,"1322":0,"1323":0,"1324":0,"1325":0,"1326":0,"1327":0,"1328":0,"1329":0,"1330":1,"1331":0,"1332":1,"1333":1,"1334":0,"1335":1,"1336":0,"1337":1,"1338":0,"1339":1,"1340":0,"1341":1,"1342":0,"1343":1,"1344":0,"1345":0,"1346":1,"1347":1,"1348":0,"1349":1,"1350":0,"1351":1,"1352":0,"1353":0,"1354":0,"1355":0,"1356":0,"1357":1,"1358":0,"1359":1,"1360":0,"1361":0,"1362":0,"1363":1,"1364":0,"1365":1,"1366":0,"1367":0,"1368":0,"1369":0,"1370":0,"1371":1,"1372":3,"1373":0,"1374":3,"1375":3,"1376":3,"1377":3,"1378":1,"1379":1,"1380":0,"1381":1,"1382":0,"1383":1,"1384":0,"1385":0,"1386":0,"1387":0,"1388":0,"1389":0,"1390":0,"1391":0,"1392":0,"1393":0,"1394":0,"1395":0,"1396":1,"1397":0,"1398":0,"1399":0,"1400":0,"1401":1,"1402":1,"1403":0,"1404":0,"1405":0,"1406":0,"1407":0,"1408":0,"1409":0,"1410":0,"1411":0,"1412":0,"1413":0,"1414":0,"1415":0,"1416":0,"1417":0,"1418":0,"1419":0,"1420":0,"1421":0,"1422":0,"1423":1,"1424":0,"1425":0,"1426":0,"1427":0,"1428":0,"1429":0,"1430":1,"1431":0,"1432":0,"1433":0,"1434":0,"1435":0,"1436":0,"1437":1,"1438":0,"1439":0,"1440":0,"1441":0,"1442":1,"1443":0,"1444":0,"1445":1,"1446":0,"1447":0,"1448":1,"1449":0,"1450":0,"1451":0,"1452":0,"1453":0,"1454":0,"1455":0,"1456":0,"1457":0,"1458":0,"1459":0,"1460":0,"1461":0,"1462":0,"1463":0,"1464":0,"1465":0,"1466":0,"1467":0,"1468":0,"1469":0,"1470":0,"1471":0,"1472":0,"1473":0,"1474":0,"1475":0,"1476":0,"1477":0,"1478":0,"1479":1,"1480":0,"1481":0,"1482":0,"1483":0,"1484":0,"1485":1,"1486":3,"1487":3,"1488":3,"1489":0,"1490":0,"1491":0,"1492":1,"1493":3,"1494":3,"1495":3,"1496":0,"1497":1,"1498":0,"1499":0,"1500":0,"1501":0,"1502":1,"1503":0,"1504":1,"1505":0,"1506":0,"1507":0,"1508":0,"1509":0,"1510":0,"1511":0,"1512":1,"1513":0,"1514":0,"1515":0,"1516":0,"1517":0,"1518":0,"1519":0,"1520":1,"1521":0,"1522":0,"1523":0,"1524":0,"1525":0,"1526":0,"1527":0,"1528":1,"1529":0,"1530":1,"1531":0,"1532":1,"1533":0,"1534":0,"1535":0,"1536":0,"1537":0,"1538":0,"1539":0,"1540":0,"1541":0,"1542":0,"1543":0,"1544":0,"1545":0,"1546":0,"1547":0,"1548":1,"1549":1,"1550":0,"1551":1,"1552":1,"1553":1,"1554":0,"1555":1,"1556":0,"1557":1,"1558":0,"1559":0,"1560":0,"1561":1,"1562":1,"1563":0,"1564":0,"1565":0,"1566":1,"1567":0,"1568":0,"1569":0,"1570":0,"1571":0,"1572":0,"1573":0,"1574":0,"1575":0,"1576":0,"1577":0,"1578":0,"1579":0,"1580":0,"1581":0,"1582":1,"1583":0,"1584":0,"1585":0,"1586":0,"1587":0,"1588":0,"1589":0,"1590":0,"1591":0,"1592":0,"1593":0,"1594":0,"1595":0,"1596":1,"1597":0,"1598":1,"1599":0,"1600":1,"1601":0,"1602":0,"1603":1,"1604":1,"1605":0,"1606":0,"1607":0,"1608":0,"1609":0,"1610":0,"1611":0,"1612":1,"1613":0,"1614":0,"1615":0,"1616":0,"1617":0,"1618":0,"1619":0,"1620":0,"1621":0,"1622":0,"1623":0,"1624":0,"1625":0,"1626":0,"1627":1,"1628":0,"1629":1,"1630":0,"1631":0,"1632":0,"1633":0,"1634":0,"1635":0,"1636":0,"1637":1,"1638":0,"1639":0,"1640":1,"1641":1,"1642":1,"1643":1,"1644":1,"1645":1,"1646":1,"1647":1,"1648":1,"1649":0,"1650":1,"1651":0,"1652":0,"1653":0,"1654":1,"1655":0,"1656":1,"1657":0,"1658":0,"1659":0,"1660":0,"1661":0,"1662":0,"1663":0,"1664":0,"1665":0,"1666":0,"1667":1,"1668":0,"1669":0,"1670":0,"1671":0,"1672":0,"1673":1,"1674":0,"1675":0,"1676":1,"1677":0,"1678":0,"1679":0,"1680":0,"1681":1,"1682":0,"1683":0,"1684":0,"1685":1,"1686":0,"1687":0,"1688":0,"1689":0,"1690":0,"1691":1,"1692":0,"1693":0,"1694":0,"1695":0,"1696":0,"1697":1,"1698":0,"1699":0,"1700":0,"1701":0,"1702":0,"1703":0,"1704":0,"1705":0,"1706":0,"1707":0,"1708":1,"1709":0,"1710":0,"1711":0,"1712":0,"1713":0,"1714":0,"1715":0,"1716":0,"1717":0,"1718":0,"1719":1,"1720":0,"1721":0,"1722":0,"1723":1,"1724":0,"1725":1,"1726":0,"1727":0,"1728":1,"1729":0,"1730":0,"1731":0,"1732":0,"1733":0,"1734":0,"1735":0,"1736":0,"1737":0,"1738":0,"1739":0,"1740":0,"1741":0,"1742":0,"1743":0,"1744":0,"1745":0,"1746":1,"1747":0,"1748":0,"1749":0,"1750":0,"1751":0,"1752":0,"1753":0,"1754":1,"1755":0,"1756":0,"1757":0,"1758":1,"1759":0,"1760":0,"1761":0,"1762":0,"1763":0,"1764":0,"1765":1,"1766":0,"1767":0,"1768":0,"1769":0,"1770":0,"1771":1,"1772":0,"1773":0,"1774":0,"1775":0,"1776":0,"1777":0,"1778":0,"1779":0,"1780":0,"1781":0,"1782":0,"1783":0,"1784":0,"1785":0,"1786":1},"b":{"1":[0,1],"2":[1,0],"3":[1,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0],"190":[0,0],"191":[0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,3],"205":[0,0],"206":[0,0],"207":[0,0],"208":[0,0],"209":[0,0],"210":[0,0],"211":[0,0],"212":[0,0],"213":[0,0],"214":[0,0],"215":[0,0],"216":[0,0],"217":[0,0],"218":[0,0],"219":[0,0,0],"220":[0,0],"221":[0,0],"222":[0,0],"223":[0,0],"224":[0,0],"225":[0,0],"226":[3,0],"227":[3,0],"228":[0,0],"229":[3,0],"230":[3,0],"231":[0,0],"232":[0,0],"233":[0,0],"234":[0,0],"235":[0,0],"236":[0,0],"237":[0,0],"238":[0,0],"239":[0,0],"240":[0,0],"241":[0,0],"242":[0,0],"243":[0,0],"244":[0,0],"245":[0,0],"246":[0,0],"247":[0,0],"248":[0,0],"249":[0,0],"250":[1,0],"251":[0,0,0,0,0],"252":[0,0],"253":[0,0],"254":[0,0],"255":[0,0],"256":[0,0],"257":[0,0],"258":[0,0],"259":[0,0],"260":[0,0],"261":[0,0],"262":[0,0],"263":[0,0],"264":[0,0],"265":[0,0,0,0,0],"266":[0,0],"267":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"268":[0,0],"269":[0,0],"270":[0,0,0,0,0],"271":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"272":[0,0],"273":[0,0],"274":[0,0],"275":[0,0]},"f":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":35,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":2,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":9,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":12,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":4,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":3,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":3,"436":0,"437":3,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":1,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0},"fnMap":{"1":{"name":"(anonymous_1)","line":62,"loc":{"start":{"line":62,"column":1},"end":{"line":62,"column":25}}},"2":{"name":"(anonymous_2)","line":70,"loc":{"start":{"line":70,"column":9},"end":{"line":70,"column":27}}},"3":{"name":"Lazy","line":106,"loc":{"start":{"line":106,"column":2},"end":{"line":106,"column":24}}},"4":{"name":"noop","line":134,"loc":{"start":{"line":134,"column":14},"end":{"line":134,"column":30}}},"5":{"name":"identity","line":135,"loc":{"start":{"line":135,"column":18},"end":{"line":135,"column":39}}},"6":{"name":"strict","line":160,"loc":{"start":{"line":160,"column":16},"end":{"line":160,"column":34}}},"7":{"name":"StrictLazy","line":161,"loc":{"start":{"line":161,"column":4},"end":{"line":161,"column":32}}},"8":{"name":"(anonymous_8)","line":173,"loc":{"start":{"line":173,"column":20},"end":{"line":173,"column":45}}},"9":{"name":"Sequence","line":253,"loc":{"start":{"line":253,"column":2},"end":{"line":253,"column":22}}},"10":{"name":"define","line":289,"loc":{"start":{"line":289,"column":20},"end":{"line":289,"column":59}}},"11":{"name":"size","line":312,"loc":{"start":{"line":312,"column":28},"end":{"line":312,"column":44}}},"12":{"name":"getIterator","line":341,"loc":{"start":{"line":341,"column":35},"end":{"line":341,"column":58}}},"13":{"name":"root","line":348,"loc":{"start":{"line":348,"column":28},"end":{"line":348,"column":44}}},"14":{"name":"isAsync","line":361,"loc":{"start":{"line":361,"column":31},"end":{"line":361,"column":50}}},"15":{"name":"value","line":373,"loc":{"start":{"line":373,"column":29},"end":{"line":373,"column":46}}},"16":{"name":"apply","line":388,"loc":{"start":{"line":388,"column":29},"end":{"line":388,"column":52}}},"17":{"name":"Iterator","line":416,"loc":{"start":{"line":416,"column":2},"end":{"line":416,"column":30}}},"18":{"name":"current","line":427,"loc":{"start":{"line":427,"column":31},"end":{"line":427,"column":50}}},"19":{"name":"moveNext","line":438,"loc":{"start":{"line":438,"column":32},"end":{"line":438,"column":52}}},"20":{"name":"toArray","line":465,"loc":{"start":{"line":465,"column":31},"end":{"line":465,"column":50}}},"21":{"name":"(anonymous_21)","line":466,"loc":{"start":{"line":466,"column":23},"end":{"line":466,"column":46}}},"22":{"name":"getIndex","line":486,"loc":{"start":{"line":486,"column":32},"end":{"line":486,"column":52}}},"23":{"name":"get","line":501,"loc":{"start":{"line":501,"column":27},"end":{"line":501,"column":43}}},"24":{"name":"(anonymous_24)","line":503,"loc":{"start":{"line":503,"column":14},"end":{"line":503,"column":33}}},"25":{"name":"memoize","line":530,"loc":{"start":{"line":530,"column":31},"end":{"line":530,"column":50}}},"26":{"name":"MemoizedSequence","line":537,"loc":{"start":{"line":537,"column":2},"end":{"line":537,"column":36}}},"27":{"name":"toObject","line":562,"loc":{"start":{"line":562,"column":32},"end":{"line":562,"column":52}}},"28":{"name":"(anonymous_28)","line":563,"loc":{"start":{"line":563,"column":23},"end":{"line":563,"column":46}}},"29":{"name":"each","line":582,"loc":{"start":{"line":582,"column":28},"end":{"line":582,"column":46}}},"30":{"name":"forEach","line":595,"loc":{"start":{"line":595,"column":31},"end":{"line":595,"column":52}}},"31":{"name":"map","line":628,"loc":{"start":{"line":628,"column":27},"end":{"line":628,"column":47}}},"32":{"name":"collect","line":632,"loc":{"start":{"line":632,"column":31},"end":{"line":632,"column":55}}},"33":{"name":"MappedSequence","line":639,"loc":{"start":{"line":639,"column":2},"end":{"line":639,"column":41}}},"34":{"name":"getIterator","line":646,"loc":{"start":{"line":646,"column":41},"end":{"line":646,"column":64}}},"35":{"name":"each","line":650,"loc":{"start":{"line":650,"column":34},"end":{"line":650,"column":52}}},"36":{"name":"(anonymous_36)","line":652,"loc":{"start":{"line":652,"column":28},"end":{"line":652,"column":43}}},"37":{"name":"MappingIterator","line":660,"loc":{"start":{"line":660,"column":2},"end":{"line":660,"column":44}}},"38":{"name":"current","line":666,"loc":{"start":{"line":666,"column":38},"end":{"line":666,"column":57}}},"39":{"name":"moveNext","line":670,"loc":{"start":{"line":670,"column":39},"end":{"line":670,"column":59}}},"40":{"name":"pluck","line":696,"loc":{"start":{"line":696,"column":29},"end":{"line":696,"column":54}}},"41":{"name":"invoke","line":723,"loc":{"start":{"line":723,"column":30},"end":{"line":723,"column":58}}},"42":{"name":"(anonymous_42)","line":724,"loc":{"start":{"line":724,"column":20},"end":{"line":724,"column":32}}},"43":{"name":"filter","line":755,"loc":{"start":{"line":755,"column":30},"end":{"line":755,"column":56}}},"44":{"name":"select","line":759,"loc":{"start":{"line":759,"column":30},"end":{"line":759,"column":56}}},"45":{"name":"FilteredSequence","line":766,"loc":{"start":{"line":766,"column":2},"end":{"line":766,"column":46}}},"46":{"name":"getIterator","line":773,"loc":{"start":{"line":773,"column":43},"end":{"line":773,"column":66}}},"47":{"name":"each","line":777,"loc":{"start":{"line":777,"column":36},"end":{"line":777,"column":54}}},"48":{"name":"(anonymous_48)","line":781,"loc":{"start":{"line":781,"column":28},"end":{"line":781,"column":43}}},"49":{"name":"reverse","line":788,"loc":{"start":{"line":788,"column":39},"end":{"line":788,"column":58}}},"50":{"name":"FilteringIterator","line":795,"loc":{"start":{"line":795,"column":2},"end":{"line":795,"column":49}}},"51":{"name":"current","line":801,"loc":{"start":{"line":801,"column":40},"end":{"line":801,"column":59}}},"52":{"name":"moveNext","line":805,"loc":{"start":{"line":805,"column":41},"end":{"line":805,"column":61}}},"53":{"name":"reject","line":836,"loc":{"start":{"line":836,"column":30},"end":{"line":836,"column":56}}},"54":{"name":"(anonymous_54)","line":838,"loc":{"start":{"line":838,"column":23},"end":{"line":838,"column":35}}},"55":{"name":"ofType","line":856,"loc":{"start":{"line":856,"column":30},"end":{"line":856,"column":52}}},"56":{"name":"(anonymous_56)","line":857,"loc":{"start":{"line":857,"column":23},"end":{"line":857,"column":35}}},"57":{"name":"where","line":883,"loc":{"start":{"line":883,"column":29},"end":{"line":883,"column":56}}},"58":{"name":"reverse","line":901,"loc":{"start":{"line":901,"column":31},"end":{"line":901,"column":50}}},"59":{"name":"ReversedSequence","line":908,"loc":{"start":{"line":908,"column":2},"end":{"line":908,"column":36}}},"60":{"name":"getIterator","line":914,"loc":{"start":{"line":914,"column":43},"end":{"line":914,"column":66}}},"61":{"name":"ReversedIterator","line":921,"loc":{"start":{"line":921,"column":2},"end":{"line":921,"column":38}}},"62":{"name":"current","line":925,"loc":{"start":{"line":925,"column":39},"end":{"line":925,"column":58}}},"63":{"name":"moveNext","line":929,"loc":{"start":{"line":929,"column":40},"end":{"line":929,"column":60}}},"64":{"name":"getIndex","line":940,"loc":{"start":{"line":940,"column":40},"end":{"line":940,"column":60}}},"65":{"name":"concat","line":965,"loc":{"start":{"line":965,"column":30},"end":{"line":965,"column":56}}},"66":{"name":"ConcatenatedSequence","line":972,"loc":{"start":{"line":972,"column":2},"end":{"line":972,"column":48}}},"67":{"name":"each","line":979,"loc":{"start":{"line":979,"column":40},"end":{"line":979,"column":58}}},"68":{"name":"(anonymous_68)","line":983,"loc":{"start":{"line":983,"column":21},"end":{"line":983,"column":33}}},"69":{"name":"(anonymous_69)","line":991,"loc":{"start":{"line":991,"column":39},"end":{"line":991,"column":51}}},"70":{"name":"first","line":1021,"loc":{"start":{"line":1021,"column":29},"end":{"line":1021,"column":51}}},"71":{"name":"(anonymous_71)","line":1029,"loc":{"start":{"line":1029,"column":28},"end":{"line":1029,"column":45}}},"72":{"name":"TakeSequence","line":1036,"loc":{"start":{"line":1036,"column":2},"end":{"line":1036,"column":39}}},"73":{"name":"getIterator","line":1043,"loc":{"start":{"line":1043,"column":39},"end":{"line":1043,"column":62}}},"74":{"name":"each","line":1047,"loc":{"start":{"line":1047,"column":32},"end":{"line":1047,"column":50}}},"75":{"name":"(anonymous_75)","line":1052,"loc":{"start":{"line":1052,"column":34},"end":{"line":1052,"column":46}}},"76":{"name":"TakeIterator","line":1068,"loc":{"start":{"line":1068,"column":2},"end":{"line":1068,"column":41}}},"77":{"name":"current","line":1073,"loc":{"start":{"line":1073,"column":35},"end":{"line":1073,"column":54}}},"78":{"name":"moveNext","line":1077,"loc":{"start":{"line":1077,"column":36},"end":{"line":1077,"column":56}}},"79":{"name":"takeWhile","line":1100,"loc":{"start":{"line":1100,"column":33},"end":{"line":1100,"column":63}}},"80":{"name":"TakeWhileSequence","line":1107,"loc":{"start":{"line":1107,"column":2},"end":{"line":1107,"column":48}}},"81":{"name":"each","line":1114,"loc":{"start":{"line":1114,"column":37},"end":{"line":1114,"column":55}}},"82":{"name":"(anonymous_82)","line":1119,"loc":{"start":{"line":1119,"column":34},"end":{"line":1119,"column":49}}},"83":{"name":"initial","line":1149,"loc":{"start":{"line":1149,"column":31},"end":{"line":1149,"column":55}}},"84":{"name":"InitialSequence","line":1153,"loc":{"start":{"line":1153,"column":2},"end":{"line":1153,"column":42}}},"85":{"name":"each","line":1160,"loc":{"start":{"line":1160,"column":35},"end":{"line":1160,"column":53}}},"86":{"name":"last","line":1180,"loc":{"start":{"line":1180,"column":28},"end":{"line":1180,"column":49}}},"87":{"name":"findWhere","line":1203,"loc":{"start":{"line":1203,"column":33},"end":{"line":1203,"column":64}}},"88":{"name":"rest","line":1223,"loc":{"start":{"line":1223,"column":28},"end":{"line":1223,"column":49}}},"89":{"name":"drop","line":1229,"loc":{"start":{"line":1229,"column":28},"end":{"line":1229,"column":49}}},"90":{"name":"DropSequence","line":1236,"loc":{"start":{"line":1236,"column":2},"end":{"line":1236,"column":39}}},"91":{"name":"each","line":1243,"loc":{"start":{"line":1243,"column":32},"end":{"line":1243,"column":50}}},"92":{"name":"(anonymous_92)","line":1248,"loc":{"start":{"line":1248,"column":28},"end":{"line":1248,"column":40}}},"93":{"name":"dropWhile","line":1264,"loc":{"start":{"line":1264,"column":33},"end":{"line":1264,"column":63}}},"94":{"name":"skipWhile","line":1268,"loc":{"start":{"line":1268,"column":33},"end":{"line":1268,"column":63}}},"95":{"name":"DropWhileSequence","line":1275,"loc":{"start":{"line":1275,"column":2},"end":{"line":1275,"column":48}}},"96":{"name":"each","line":1282,"loc":{"start":{"line":1282,"column":37},"end":{"line":1282,"column":55}}},"97":{"name":"(anonymous_97)","line":1286,"loc":{"start":{"line":1286,"column":28},"end":{"line":1286,"column":40}}},"98":{"name":"sort","line":1332,"loc":{"start":{"line":1332,"column":28},"end":{"line":1332,"column":62}}},"99":{"name":"sortBy","line":1382,"loc":{"start":{"line":1382,"column":30},"end":{"line":1382,"column":66}}},"100":{"name":"SortedSequence","line":1391,"loc":{"start":{"line":1391,"column":2},"end":{"line":1391,"column":42}}},"101":{"name":"each","line":1398,"loc":{"start":{"line":1398,"column":34},"end":{"line":1398,"column":52}}},"102":{"name":"reverse","line":1417,"loc":{"start":{"line":1417,"column":37},"end":{"line":1417,"column":56}}},"103":{"name":"groupBy","line":1463,"loc":{"start":{"line":1463,"column":31},"end":{"line":1463,"column":62}}},"104":{"name":"GroupedSequence","line":1470,"loc":{"start":{"line":1470,"column":2},"end":{"line":1470,"column":49}}},"105":{"name":"(anonymous_105)","line":1504,"loc":{"start":{"line":1504,"column":31},"end":{"line":1504,"column":54}}},"106":{"name":"IndexedSequence","line":1511,"loc":{"start":{"line":1511,"column":2},"end":{"line":1511,"column":49}}},"107":{"name":"countBy","line":1542,"loc":{"start":{"line":1542,"column":31},"end":{"line":1542,"column":55}}},"108":{"name":"CountedSequence","line":1549,"loc":{"start":{"line":1549,"column":2},"end":{"line":1549,"column":42}}},"109":{"name":"uniq","line":1594,"loc":{"start":{"line":1594,"column":28},"end":{"line":1594,"column":49}}},"110":{"name":"unique","line":1598,"loc":{"start":{"line":1598,"column":30},"end":{"line":1598,"column":53}}},"111":{"name":"UniqueSequence","line":1605,"loc":{"start":{"line":1605,"column":2},"end":{"line":1605,"column":41}}},"112":{"name":"each","line":1612,"loc":{"start":{"line":1612,"column":34},"end":{"line":1612,"column":52}}},"113":{"name":"(anonymous_113)","line":1619,"loc":{"start":{"line":1619,"column":30},"end":{"line":1619,"column":42}}},"114":{"name":"(anonymous_114)","line":1626,"loc":{"start":{"line":1626,"column":30},"end":{"line":1626,"column":42}}},"115":{"name":"zip","line":1662,"loc":{"start":{"line":1662,"column":27},"end":{"line":1662,"column":50}}},"116":{"name":"ZippedSequence","line":1673,"loc":{"start":{"line":1673,"column":2},"end":{"line":1673,"column":42}}},"117":{"name":"each","line":1680,"loc":{"start":{"line":1680,"column":34},"end":{"line":1680,"column":52}}},"118":{"name":"(anonymous_118)","line":1684,"loc":{"start":{"line":1684,"column":40},"end":{"line":1684,"column":52}}},"119":{"name":"shuffle","line":1732,"loc":{"start":{"line":1732,"column":31},"end":{"line":1732,"column":50}}},"120":{"name":"ShuffledSequence","line":1739,"loc":{"start":{"line":1739,"column":2},"end":{"line":1739,"column":36}}},"121":{"name":"each","line":1745,"loc":{"start":{"line":1745,"column":36},"end":{"line":1745,"column":54}}},"122":{"name":"flatten","line":1777,"loc":{"start":{"line":1777,"column":31},"end":{"line":1777,"column":50}}},"123":{"name":"FlattenedSequence","line":1784,"loc":{"start":{"line":1784,"column":2},"end":{"line":1784,"column":37}}},"124":{"name":"each","line":1790,"loc":{"start":{"line":1790,"column":37},"end":{"line":1790,"column":55}}},"125":{"name":"recurseVisitor","line":1793,"loc":{"start":{"line":1793,"column":28},"end":{"line":1793,"column":55}}},"126":{"name":"compact","line":1816,"loc":{"start":{"line":1816,"column":31},"end":{"line":1816,"column":50}}},"127":{"name":"(anonymous_127)","line":1817,"loc":{"start":{"line":1817,"column":23},"end":{"line":1817,"column":35}}},"128":{"name":"without","line":1834,"loc":{"start":{"line":1834,"column":31},"end":{"line":1834,"column":58}}},"129":{"name":"difference","line":1838,"loc":{"start":{"line":1838,"column":34},"end":{"line":1838,"column":64}}},"130":{"name":"WithoutSequence","line":1845,"loc":{"start":{"line":1845,"column":2},"end":{"line":1845,"column":43}}},"131":{"name":"each","line":1852,"loc":{"start":{"line":1852,"column":35},"end":{"line":1852,"column":53}}},"132":{"name":"(anonymous_132)","line":1855,"loc":{"start":{"line":1855,"column":28},"end":{"line":1855,"column":40}}},"133":{"name":"union","line":1875,"loc":{"start":{"line":1875,"column":29},"end":{"line":1875,"column":54}}},"134":{"name":"intersection","line":1896,"loc":{"start":{"line":1896,"column":36},"end":{"line":1896,"column":68}}},"135":{"name":"IntersectionSequence","line":1907,"loc":{"start":{"line":1907,"column":2},"end":{"line":1907,"column":48}}},"136":{"name":"each","line":1914,"loc":{"start":{"line":1914,"column":40},"end":{"line":1914,"column":58}}},"137":{"name":"(anonymous_137)","line":1915,"loc":{"start":{"line":1915,"column":37},"end":{"line":1915,"column":54}}},"138":{"name":"(anonymous_138)","line":1922,"loc":{"start":{"line":1922,"column":35},"end":{"line":1922,"column":47}}},"139":{"name":"(anonymous_139)","line":1924,"loc":{"start":{"line":1924,"column":23},"end":{"line":1924,"column":37}}},"140":{"name":"Memoizer","line":1940,"loc":{"start":{"line":1940,"column":2},"end":{"line":1940,"column":36}}},"141":{"name":"current","line":1947,"loc":{"start":{"line":1947,"column":31},"end":{"line":1947,"column":50}}},"142":{"name":"moveNext","line":1951,"loc":{"start":{"line":1951,"column":32},"end":{"line":1951,"column":52}}},"143":{"name":"UniqueMemoizer","line":1972,"loc":{"start":{"line":1972,"column":2},"end":{"line":1972,"column":36}}},"144":{"name":"current","line":1979,"loc":{"start":{"line":1979,"column":37},"end":{"line":1979,"column":56}}},"145":{"name":"moveNext","line":1983,"loc":{"start":{"line":1983,"column":38},"end":{"line":1983,"column":58}}},"146":{"name":"each","line":2000,"loc":{"start":{"line":2000,"column":34},"end":{"line":2000,"column":52}}},"147":{"name":"contains","line":2018,"loc":{"start":{"line":2018,"column":38},"end":{"line":2018,"column":59}}},"148":{"name":"every","line":2053,"loc":{"start":{"line":2053,"column":29},"end":{"line":2053,"column":55}}},"149":{"name":"(anonymous_149)","line":2056,"loc":{"start":{"line":2056,"column":21},"end":{"line":2056,"column":36}}},"150":{"name":"all","line":2061,"loc":{"start":{"line":2061,"column":27},"end":{"line":2061,"column":51}}},"151":{"name":"some","line":2086,"loc":{"start":{"line":2086,"column":28},"end":{"line":2086,"column":53}}},"152":{"name":"(anonymous_152)","line":2090,"loc":{"start":{"line":2090,"column":14},"end":{"line":2090,"column":26}}},"153":{"name":"any","line":2099,"loc":{"start":{"line":2099,"column":27},"end":{"line":2099,"column":51}}},"154":{"name":"none","line":2124,"loc":{"start":{"line":2124,"column":28},"end":{"line":2124,"column":53}}},"155":{"name":"isEmpty","line":2139,"loc":{"start":{"line":2139,"column":31},"end":{"line":2139,"column":50}}},"156":{"name":"indexOf","line":2159,"loc":{"start":{"line":2159,"column":31},"end":{"line":2159,"column":55}}},"157":{"name":"(anonymous_157)","line":2161,"loc":{"start":{"line":2161,"column":14},"end":{"line":2161,"column":29}}},"158":{"name":"lastIndexOf","line":2184,"loc":{"start":{"line":2184,"column":35},"end":{"line":2184,"column":63}}},"159":{"name":"sortedIndex","line":2211,"loc":{"start":{"line":2211,"column":35},"end":{"line":2211,"column":63}}},"160":{"name":"contains","line":2241,"loc":{"start":{"line":2241,"column":32},"end":{"line":2241,"column":57}}},"161":{"name":"reduce","line":2274,"loc":{"start":{"line":2274,"column":30},"end":{"line":2274,"column":64}}},"162":{"name":"(anonymous_162)","line":2279,"loc":{"start":{"line":2279,"column":31},"end":{"line":2279,"column":46}}},"163":{"name":"(anonymous_163)","line":2285,"loc":{"start":{"line":2285,"column":29},"end":{"line":2285,"column":40}}},"164":{"name":"foldl","line":2292,"loc":{"start":{"line":2292,"column":29},"end":{"line":2292,"column":62}}},"165":{"name":"reduceRight","line":2321,"loc":{"start":{"line":2321,"column":35},"end":{"line":2321,"column":74}}},"166":{"name":"(anonymous_166)","line":2330,"loc":{"start":{"line":2330,"column":36},"end":{"line":2330,"column":51}}},"167":{"name":"foldr","line":2335,"loc":{"start":{"line":2335,"column":29},"end":{"line":2335,"column":62}}},"168":{"name":"consecutive","line":2356,"loc":{"start":{"line":2356,"column":35},"end":{"line":2356,"column":63}}},"169":{"name":"(anonymous_169)","line":2358,"loc":{"start":{"line":2358,"column":28},"end":{"line":2358,"column":46}}},"170":{"name":"chunk","line":2380,"loc":{"start":{"line":2380,"column":29},"end":{"line":2380,"column":50}}},"171":{"name":"ChunkedSequence","line":2391,"loc":{"start":{"line":2391,"column":2},"end":{"line":2391,"column":41}}},"172":{"name":"getIterator","line":2398,"loc":{"start":{"line":2398,"column":42},"end":{"line":2398,"column":65}}},"173":{"name":"ChunkedIterator","line":2405,"loc":{"start":{"line":2405,"column":2},"end":{"line":2405,"column":43}}},"174":{"name":"current","line":2410,"loc":{"start":{"line":2410,"column":38},"end":{"line":2410,"column":57}}},"175":{"name":"moveNext","line":2414,"loc":{"start":{"line":2414,"column":39},"end":{"line":2414,"column":59}}},"176":{"name":"tap","line":2446,"loc":{"start":{"line":2446,"column":27},"end":{"line":2446,"column":50}}},"177":{"name":"TappedSequence","line":2453,"loc":{"start":{"line":2453,"column":2},"end":{"line":2453,"column":44}}},"178":{"name":"each","line":2460,"loc":{"start":{"line":2460,"column":34},"end":{"line":2460,"column":52}}},"179":{"name":"(anonymous_179)","line":2462,"loc":{"start":{"line":2462,"column":28},"end":{"line":2462,"column":43}}},"180":{"name":"find","line":2488,"loc":{"start":{"line":2488,"column":28},"end":{"line":2488,"column":53}}},"181":{"name":"detect","line":2492,"loc":{"start":{"line":2492,"column":30},"end":{"line":2492,"column":57}}},"182":{"name":"min","line":2516,"loc":{"start":{"line":2516,"column":27},"end":{"line":2516,"column":49}}},"183":{"name":"(anonymous_183)","line":2521,"loc":{"start":{"line":2521,"column":23},"end":{"line":2521,"column":50}}},"184":{"name":"minBy","line":2529,"loc":{"start":{"line":2529,"column":29},"end":{"line":2529,"column":53}}},"185":{"name":"(anonymous_185)","line":2531,"loc":{"start":{"line":2531,"column":23},"end":{"line":2531,"column":38}}},"186":{"name":"max","line":2556,"loc":{"start":{"line":2556,"column":27},"end":{"line":2556,"column":49}}},"187":{"name":"(anonymous_187)","line":2561,"loc":{"start":{"line":2561,"column":23},"end":{"line":2561,"column":50}}},"188":{"name":"maxBy","line":2569,"loc":{"start":{"line":2569,"column":29},"end":{"line":2569,"column":53}}},"189":{"name":"(anonymous_189)","line":2571,"loc":{"start":{"line":2571,"column":23},"end":{"line":2571,"column":38}}},"190":{"name":"sum","line":2588,"loc":{"start":{"line":2588,"column":27},"end":{"line":2588,"column":49}}},"191":{"name":"(anonymous_191)","line":2593,"loc":{"start":{"line":2593,"column":23},"end":{"line":2593,"column":38}}},"192":{"name":"sumBy","line":2596,"loc":{"start":{"line":2596,"column":29},"end":{"line":2596,"column":53}}},"193":{"name":"(anonymous_193)","line":2598,"loc":{"start":{"line":2598,"column":23},"end":{"line":2598,"column":38}}},"194":{"name":"join","line":2623,"loc":{"start":{"line":2623,"column":28},"end":{"line":2623,"column":53}}},"195":{"name":"(anonymous_195)","line":2626,"loc":{"start":{"line":2626,"column":23},"end":{"line":2626,"column":43}}},"196":{"name":"toString","line":2634,"loc":{"start":{"line":2634,"column":32},"end":{"line":2634,"column":61}}},"197":{"name":"async","line":2651,"loc":{"start":{"line":2651,"column":29},"end":{"line":2651,"column":54}}},"198":{"name":"SimpleIntersectionSequence","line":2658,"loc":{"start":{"line":2658,"column":2},"end":{"line":2658,"column":53}}},"199":{"name":"eachMemoizerCache","line":2666,"loc":{"start":{"line":2666,"column":59},"end":{"line":2666,"column":90}}},"200":{"name":"(anonymous_200)","line":2670,"loc":{"start":{"line":2670,"column":35},"end":{"line":2670,"column":47}}},"201":{"name":"eachArrayCache","line":2677,"loc":{"start":{"line":2677,"column":56},"end":{"line":2677,"column":84}}},"202":{"name":"(anonymous_202)","line":2682,"loc":{"start":{"line":2682,"column":35},"end":{"line":2682,"column":47}}},"203":{"name":"getEachForIntersection","line":2689,"loc":{"start":{"line":2689,"column":2},"end":{"line":2689,"column":42}}},"204":{"name":"SimpleZippedSequence","line":2705,"loc":{"start":{"line":2705,"column":2},"end":{"line":2705,"column":47}}},"205":{"name":"each","line":2712,"loc":{"start":{"line":2712,"column":40},"end":{"line":2712,"column":58}}},"206":{"name":"(anonymous_206)","line":2716,"loc":{"start":{"line":2716,"column":40},"end":{"line":2716,"column":52}}},"207":{"name":"ArrayLikeSequence","line":2831,"loc":{"start":{"line":2831,"column":2},"end":{"line":2831,"column":31}}},"208":{"name":"define","line":2864,"loc":{"start":{"line":2864,"column":29},"end":{"line":2864,"column":68}}},"209":{"name":"get","line":2886,"loc":{"start":{"line":2886,"column":36},"end":{"line":2886,"column":52}}},"210":{"name":"length","line":2903,"loc":{"start":{"line":2903,"column":39},"end":{"line":2903,"column":57}}},"211":{"name":"getIndex","line":2910,"loc":{"start":{"line":2910,"column":41},"end":{"line":2910,"column":61}}},"212":{"name":"getIterator","line":2917,"loc":{"start":{"line":2917,"column":44},"end":{"line":2917,"column":67}}},"213":{"name":"IndexedIterator","line":2928,"loc":{"start":{"line":2928,"column":2},"end":{"line":2928,"column":37}}},"214":{"name":"current","line":2933,"loc":{"start":{"line":2933,"column":38},"end":{"line":2933,"column":57}}},"215":{"name":"moveNext","line":2937,"loc":{"start":{"line":2937,"column":39},"end":{"line":2937,"column":59}}},"216":{"name":"each","line":2949,"loc":{"start":{"line":2949,"column":37},"end":{"line":2949,"column":55}}},"217":{"name":"push","line":2973,"loc":{"start":{"line":2973,"column":37},"end":{"line":2973,"column":58}}},"218":{"name":"pop","line":2988,"loc":{"start":{"line":2988,"column":36},"end":{"line":2988,"column":51}}},"219":{"name":"unshift","line":3003,"loc":{"start":{"line":3003,"column":40},"end":{"line":3003,"column":64}}},"220":{"name":"shift","line":3018,"loc":{"start":{"line":3018,"column":38},"end":{"line":3018,"column":55}}},"221":{"name":"slice","line":3040,"loc":{"start":{"line":3040,"column":38},"end":{"line":3040,"column":65}}},"222":{"name":"map","line":3068,"loc":{"start":{"line":3068,"column":36},"end":{"line":3068,"column":56}}},"223":{"name":"IndexedMappedSequence","line":3075,"loc":{"start":{"line":3075,"column":2},"end":{"line":3075,"column":48}}},"224":{"name":"get","line":3082,"loc":{"start":{"line":3082,"column":40},"end":{"line":3082,"column":56}}},"225":{"name":"filter","line":3093,"loc":{"start":{"line":3093,"column":39},"end":{"line":3093,"column":65}}},"226":{"name":"IndexedFilteredSequence","line":3100,"loc":{"start":{"line":3100,"column":2},"end":{"line":3100,"column":53}}},"227":{"name":"each","line":3107,"loc":{"start":{"line":3107,"column":43},"end":{"line":3107,"column":61}}},"228":{"name":"reverse","line":3134,"loc":{"start":{"line":3134,"column":40},"end":{"line":3134,"column":59}}},"229":{"name":"IndexedReversedSequence","line":3141,"loc":{"start":{"line":3141,"column":2},"end":{"line":3141,"column":43}}},"230":{"name":"get","line":3147,"loc":{"start":{"line":3147,"column":42},"end":{"line":3147,"column":58}}},"231":{"name":"first","line":3160,"loc":{"start":{"line":3160,"column":38},"end":{"line":3160,"column":60}}},"232":{"name":"IndexedTakeSequence","line":3171,"loc":{"start":{"line":3171,"column":2},"end":{"line":3171,"column":46}}},"233":{"name":"length","line":3178,"loc":{"start":{"line":3178,"column":41},"end":{"line":3178,"column":59}}},"234":{"name":"rest","line":3192,"loc":{"start":{"line":3192,"column":37},"end":{"line":3192,"column":58}}},"235":{"name":"IndexedDropSequence","line":3199,"loc":{"start":{"line":3199,"column":2},"end":{"line":3199,"column":46}}},"236":{"name":"get","line":3206,"loc":{"start":{"line":3206,"column":38},"end":{"line":3206,"column":54}}},"237":{"name":"length","line":3210,"loc":{"start":{"line":3210,"column":41},"end":{"line":3210,"column":59}}},"238":{"name":"concat","line":3226,"loc":{"start":{"line":3226,"column":39},"end":{"line":3226,"column":65}}},"239":{"name":"IndexedConcatenatedSequence","line":3237,"loc":{"start":{"line":3237,"column":2},"end":{"line":3237,"column":54}}},"240":{"name":"get","line":3244,"loc":{"start":{"line":3244,"column":46},"end":{"line":3244,"column":62}}},"241":{"name":"length","line":3253,"loc":{"start":{"line":3253,"column":49},"end":{"line":3253,"column":67}}},"242":{"name":"uniq","line":3260,"loc":{"start":{"line":3260,"column":37},"end":{"line":3260,"column":58}}},"243":{"name":"IndexedUniqueSequence","line":3268,"loc":{"start":{"line":3268,"column":2},"end":{"line":3268,"column":48}}},"244":{"name":"eachArrayCache","line":3276,"loc":{"start":{"line":3276,"column":51},"end":{"line":3276,"column":79}}},"245":{"name":"getEachForParent","line":3302,"loc":{"start":{"line":3302,"column":2},"end":{"line":3302,"column":36}}},"246":{"name":"getParentIterator","line":3315,"loc":{"start":{"line":3315,"column":49},"end":{"line":3315,"column":78}}},"247":{"name":"getIterator","line":3326,"loc":{"start":{"line":3326,"column":43},"end":{"line":3326,"column":66}}},"248":{"name":"iterateTo","line":3330,"loc":{"start":{"line":3330,"column":41},"end":{"line":3330,"column":63}}},"249":{"name":"get","line":3346,"loc":{"start":{"line":3346,"column":35},"end":{"line":3346,"column":51}}},"250":{"name":"length","line":3360,"loc":{"start":{"line":3360,"column":38},"end":{"line":3360,"column":56}}},"251":{"name":"slice","line":3368,"loc":{"start":{"line":3368,"column":37},"end":{"line":3368,"column":64}}},"252":{"name":"toArray","line":3376,"loc":{"start":{"line":3376,"column":39},"end":{"line":3376,"column":58}}},"253":{"name":"ArrayWrapper","line":3391,"loc":{"start":{"line":3391,"column":2},"end":{"line":3391,"column":32}}},"254":{"name":"root","line":3397,"loc":{"start":{"line":3397,"column":32},"end":{"line":3397,"column":48}}},"255":{"name":"isAsync","line":3401,"loc":{"start":{"line":3401,"column":35},"end":{"line":3401,"column":54}}},"256":{"name":"get","line":3411,"loc":{"start":{"line":3411,"column":31},"end":{"line":3411,"column":47}}},"257":{"name":"length","line":3420,"loc":{"start":{"line":3420,"column":34},"end":{"line":3420,"column":52}}},"258":{"name":"each","line":3427,"loc":{"start":{"line":3427,"column":32},"end":{"line":3427,"column":50}}},"259":{"name":"map","line":3434,"loc":{"start":{"line":3434,"column":31},"end":{"line":3434,"column":51}}},"260":{"name":"filter","line":3441,"loc":{"start":{"line":3441,"column":34},"end":{"line":3441,"column":60}}},"261":{"name":"uniq","line":3448,"loc":{"start":{"line":3448,"column":32},"end":{"line":3448,"column":53}}},"262":{"name":"concat","line":3457,"loc":{"start":{"line":3457,"column":34},"end":{"line":3457,"column":60}}},"263":{"name":"toArray","line":3468,"loc":{"start":{"line":3468,"column":35},"end":{"line":3468,"column":54}}},"264":{"name":"MappedArrayWrapper","line":3475,"loc":{"start":{"line":3475,"column":2},"end":{"line":3475,"column":45}}},"265":{"name":"get","line":3482,"loc":{"start":{"line":3482,"column":37},"end":{"line":3482,"column":53}}},"266":{"name":"length","line":3492,"loc":{"start":{"line":3492,"column":40},"end":{"line":3492,"column":58}}},"267":{"name":"each","line":3496,"loc":{"start":{"line":3496,"column":38},"end":{"line":3496,"column":56}}},"268":{"name":"FilteredArrayWrapper","line":3514,"loc":{"start":{"line":3514,"column":2},"end":{"line":3514,"column":50}}},"269":{"name":"each","line":3521,"loc":{"start":{"line":3521,"column":40},"end":{"line":3521,"column":58}}},"270":{"name":"UniqueArrayWrapper","line":3542,"loc":{"start":{"line":3542,"column":2},"end":{"line":3542,"column":45}}},"271":{"name":"eachNoCache","line":3550,"loc":{"start":{"line":3550,"column":45},"end":{"line":3550,"column":70}}},"272":{"name":"eachArrayCache","line":3572,"loc":{"start":{"line":3572,"column":48},"end":{"line":3572,"column":76}}},"273":{"name":"getEachForSource","line":3622,"loc":{"start":{"line":3622,"column":2},"end":{"line":3622,"column":36}}},"274":{"name":"ConcatArrayWrapper","line":3635,"loc":{"start":{"line":3635,"column":2},"end":{"line":3635,"column":45}}},"275":{"name":"get","line":3642,"loc":{"start":{"line":3642,"column":37},"end":{"line":3642,"column":53}}},"276":{"name":"length","line":3653,"loc":{"start":{"line":3653,"column":40},"end":{"line":3653,"column":58}}},"277":{"name":"each","line":3657,"loc":{"start":{"line":3657,"column":38},"end":{"line":3657,"column":56}}},"278":{"name":"ObjectLikeSequence","line":3700,"loc":{"start":{"line":3700,"column":2},"end":{"line":3700,"column":32}}},"279":{"name":"define","line":3745,"loc":{"start":{"line":3745,"column":30},"end":{"line":3745,"column":69}}},"280":{"name":"value","line":3753,"loc":{"start":{"line":3753,"column":39},"end":{"line":3753,"column":56}}},"281":{"name":"get","line":3774,"loc":{"start":{"line":3774,"column":37},"end":{"line":3774,"column":55}}},"282":{"name":"(anonymous_282)","line":3775,"loc":{"start":{"line":3775,"column":33},"end":{"line":3775,"column":48}}},"283":{"name":"keys","line":3795,"loc":{"start":{"line":3795,"column":38},"end":{"line":3795,"column":54}}},"284":{"name":"KeySequence","line":3799,"loc":{"start":{"line":3799,"column":2},"end":{"line":3799,"column":31}}},"285":{"name":"each","line":3805,"loc":{"start":{"line":3805,"column":31},"end":{"line":3805,"column":49}}},"286":{"name":"(anonymous_286)","line":3808,"loc":{"start":{"line":3808,"column":28},"end":{"line":3808,"column":43}}},"287":{"name":"values","line":3823,"loc":{"start":{"line":3823,"column":40},"end":{"line":3823,"column":58}}},"288":{"name":"ValuesSequence","line":3827,"loc":{"start":{"line":3827,"column":2},"end":{"line":3827,"column":34}}},"289":{"name":"each","line":3833,"loc":{"start":{"line":3833,"column":34},"end":{"line":3833,"column":52}}},"290":{"name":"(anonymous_290)","line":3836,"loc":{"start":{"line":3836,"column":28},"end":{"line":3836,"column":43}}},"291":{"name":"async","line":3849,"loc":{"start":{"line":3849,"column":39},"end":{"line":3849,"column":56}}},"292":{"name":"filter","line":3853,"loc":{"start":{"line":3853,"column":40},"end":{"line":3853,"column":66}}},"293":{"name":"FilteredObjectLikeSequence","line":3857,"loc":{"start":{"line":3857,"column":2},"end":{"line":3857,"column":56}}},"294":{"name":"each","line":3864,"loc":{"start":{"line":3864,"column":46},"end":{"line":3864,"column":64}}},"295":{"name":"(anonymous_295)","line":3867,"loc":{"start":{"line":3867,"column":28},"end":{"line":3867,"column":43}}},"296":{"name":"reverse","line":3878,"loc":{"start":{"line":3878,"column":41},"end":{"line":3878,"column":60}}},"297":{"name":"assign","line":3899,"loc":{"start":{"line":3899,"column":40},"end":{"line":3899,"column":63}}},"298":{"name":"extend","line":3903,"loc":{"start":{"line":3903,"column":40},"end":{"line":3903,"column":63}}},"299":{"name":"AssignSequence","line":3910,"loc":{"start":{"line":3910,"column":2},"end":{"line":3910,"column":41}}},"300":{"name":"get","line":3917,"loc":{"start":{"line":3917,"column":33},"end":{"line":3917,"column":51}}},"301":{"name":"each","line":3921,"loc":{"start":{"line":3921,"column":34},"end":{"line":3921,"column":52}}},"302":{"name":"(anonymous_302)","line":3925,"loc":{"start":{"line":3925,"column":26},"end":{"line":3925,"column":47}}},"303":{"name":"(anonymous_303)","line":3935,"loc":{"start":{"line":3935,"column":30},"end":{"line":3935,"column":51}}},"304":{"name":"defaults","line":3962,"loc":{"start":{"line":3962,"column":42},"end":{"line":3962,"column":70}}},"305":{"name":"DefaultsSequence","line":3969,"loc":{"start":{"line":3969,"column":2},"end":{"line":3969,"column":46}}},"306":{"name":"get","line":3976,"loc":{"start":{"line":3976,"column":35},"end":{"line":3976,"column":53}}},"307":{"name":"each","line":3981,"loc":{"start":{"line":3981,"column":36},"end":{"line":3981,"column":54}}},"308":{"name":"(anonymous_308)","line":3985,"loc":{"start":{"line":3985,"column":21},"end":{"line":3985,"column":42}}},"309":{"name":"(anonymous_309)","line":3997,"loc":{"start":{"line":3997,"column":36},"end":{"line":3997,"column":57}}},"310":{"name":"invert","line":4016,"loc":{"start":{"line":4016,"column":40},"end":{"line":4016,"column":58}}},"311":{"name":"InvertedSequence","line":4023,"loc":{"start":{"line":4023,"column":2},"end":{"line":4023,"column":36}}},"312":{"name":"each","line":4029,"loc":{"start":{"line":4029,"column":36},"end":{"line":4029,"column":54}}},"313":{"name":"(anonymous_313)","line":4030,"loc":{"start":{"line":4030,"column":21},"end":{"line":4030,"column":42}}},"314":{"name":"merge","line":4112,"loc":{"start":{"line":4112,"column":39},"end":{"line":4112,"column":64}}},"315":{"name":"MergedSequence","line":4121,"loc":{"start":{"line":4121,"column":2},"end":{"line":4121,"column":51}}},"316":{"name":"each","line":4129,"loc":{"start":{"line":4129,"column":34},"end":{"line":4129,"column":52}}},"317":{"name":"(anonymous_317)","line":4134,"loc":{"start":{"line":4134,"column":46},"end":{"line":4134,"column":67}}},"318":{"name":"(anonymous_318)","line":4137,"loc":{"start":{"line":4137,"column":22},"end":{"line":4137,"column":38}}},"319":{"name":"(anonymous_319)","line":4154,"loc":{"start":{"line":4154,"column":20},"end":{"line":4154,"column":36}}},"320":{"name":"mergeObjects","line":4176,"loc":{"start":{"line":4176,"column":2},"end":{"line":4176,"column":30}}},"321":{"name":"isVanillaObject","line":4214,"loc":{"start":{"line":4214,"column":2},"end":{"line":4214,"column":35}}},"322":{"name":"functions","line":4236,"loc":{"start":{"line":4236,"column":43},"end":{"line":4236,"column":64}}},"323":{"name":"(anonymous_323)","line":4238,"loc":{"start":{"line":4238,"column":14},"end":{"line":4238,"column":29}}},"324":{"name":"(anonymous_324)","line":4239,"loc":{"start":{"line":4239,"column":11},"end":{"line":4239,"column":26}}},"325":{"name":"methods","line":4242,"loc":{"start":{"line":4242,"column":41},"end":{"line":4242,"column":60}}},"326":{"name":"pick","line":4264,"loc":{"start":{"line":4264,"column":38},"end":{"line":4264,"column":64}}},"327":{"name":"PickSequence","line":4271,"loc":{"start":{"line":4271,"column":2},"end":{"line":4271,"column":44}}},"328":{"name":"get","line":4278,"loc":{"start":{"line":4278,"column":31},"end":{"line":4278,"column":49}}},"329":{"name":"each","line":4282,"loc":{"start":{"line":4282,"column":32},"end":{"line":4282,"column":50}}},"330":{"name":"(anonymous_330)","line":4286,"loc":{"start":{"line":4286,"column":28},"end":{"line":4286,"column":49}}},"331":{"name":"omit","line":4315,"loc":{"start":{"line":4315,"column":38},"end":{"line":4315,"column":64}}},"332":{"name":"OmitSequence","line":4322,"loc":{"start":{"line":4322,"column":2},"end":{"line":4322,"column":44}}},"333":{"name":"get","line":4329,"loc":{"start":{"line":4329,"column":31},"end":{"line":4329,"column":49}}},"334":{"name":"each","line":4333,"loc":{"start":{"line":4333,"column":32},"end":{"line":4333,"column":50}}},"335":{"name":"(anonymous_335)","line":4337,"loc":{"start":{"line":4337,"column":28},"end":{"line":4337,"column":49}}},"336":{"name":"pairs","line":4360,"loc":{"start":{"line":4360,"column":39},"end":{"line":4360,"column":56}}},"337":{"name":"(anonymous_337)","line":4361,"loc":{"start":{"line":4361,"column":20},"end":{"line":4361,"column":35}}},"338":{"name":"toArray","line":4379,"loc":{"start":{"line":4379,"column":41},"end":{"line":4379,"column":60}}},"339":{"name":"toObject","line":4398,"loc":{"start":{"line":4398,"column":42},"end":{"line":4398,"column":62}}},"340":{"name":"(anonymous_340)","line":4399,"loc":{"start":{"line":4399,"column":23},"end":{"line":4399,"column":52}}},"341":{"name":"each","line":4418,"loc":{"start":{"line":4418,"column":35},"end":{"line":4418,"column":53}}},"342":{"name":"(anonymous_342)","line":4423,"loc":{"start":{"line":4423,"column":32},"end":{"line":4423,"column":52}}},"343":{"name":"(anonymous_343)","line":4434,"loc":{"start":{"line":4434,"column":21},"end":{"line":4434,"column":39}}},"344":{"name":"each","line":4446,"loc":{"start":{"line":4446,"column":35},"end":{"line":4446,"column":53}}},"345":{"name":"(anonymous_345)","line":4451,"loc":{"start":{"line":4451,"column":28},"end":{"line":4451,"column":40}}},"346":{"name":"each","line":4464,"loc":{"start":{"line":4464,"column":35},"end":{"line":4464,"column":53}}},"347":{"name":"(anonymous_347)","line":4468,"loc":{"start":{"line":4468,"column":21},"end":{"line":4468,"column":33}}},"348":{"name":"watch","line":4517,"loc":{"start":{"line":4517,"column":39},"end":{"line":4517,"column":69}}},"349":{"name":"ObjectWrapper","line":4524,"loc":{"start":{"line":4524,"column":2},"end":{"line":4524,"column":33}}},"350":{"name":"root","line":4530,"loc":{"start":{"line":4530,"column":33},"end":{"line":4530,"column":49}}},"351":{"name":"isAsync","line":4534,"loc":{"start":{"line":4534,"column":36},"end":{"line":4534,"column":55}}},"352":{"name":"get","line":4538,"loc":{"start":{"line":4538,"column":32},"end":{"line":4538,"column":50}}},"353":{"name":"each","line":4542,"loc":{"start":{"line":4542,"column":33},"end":{"line":4542,"column":51}}},"354":{"name":"StringLikeSequence","line":4589,"loc":{"start":{"line":4589,"column":2},"end":{"line":4589,"column":32}}},"355":{"name":"define","line":4624,"loc":{"start":{"line":4624,"column":30},"end":{"line":4624,"column":69}}},"356":{"name":"value","line":4632,"loc":{"start":{"line":4632,"column":39},"end":{"line":4632,"column":56}}},"357":{"name":"getIterator","line":4642,"loc":{"start":{"line":4642,"column":45},"end":{"line":4642,"column":68}}},"358":{"name":"CharIterator","line":4649,"loc":{"start":{"line":4649,"column":2},"end":{"line":4649,"column":32}}},"359":{"name":"current","line":4654,"loc":{"start":{"line":4654,"column":35},"end":{"line":4654,"column":54}}},"360":{"name":"moveNext","line":4658,"loc":{"start":{"line":4658,"column":36},"end":{"line":4658,"column":56}}},"361":{"name":"charAt","line":4675,"loc":{"start":{"line":4675,"column":40},"end":{"line":4675,"column":59}}},"362":{"name":"charCodeAt","line":4692,"loc":{"start":{"line":4692,"column":44},"end":{"line":4692,"column":67}}},"363":{"name":"substring","line":4717,"loc":{"start":{"line":4717,"column":43},"end":{"line":4717,"column":75}}},"364":{"name":"StringSegment","line":4724,"loc":{"start":{"line":4724,"column":2},"end":{"line":4724,"column":46}}},"365":{"name":"get","line":4732,"loc":{"start":{"line":4732,"column":32},"end":{"line":4732,"column":48}}},"366":{"name":"length","line":4736,"loc":{"start":{"line":4736,"column":35},"end":{"line":4736,"column":53}}},"367":{"name":"first","line":4753,"loc":{"start":{"line":4753,"column":39},"end":{"line":4753,"column":61}}},"368":{"name":"last","line":4774,"loc":{"start":{"line":4774,"column":38},"end":{"line":4774,"column":59}}},"369":{"name":"drop","line":4782,"loc":{"start":{"line":4782,"column":38},"end":{"line":4782,"column":59}}},"370":{"name":"indexOf","line":4804,"loc":{"start":{"line":4804,"column":41},"end":{"line":4804,"column":81}}},"371":{"name":"lastIndexOf","line":4826,"loc":{"start":{"line":4826,"column":45},"end":{"line":4826,"column":89}}},"372":{"name":"contains","line":4842,"loc":{"start":{"line":4842,"column":42},"end":{"line":4842,"column":71}}},"373":{"name":"endsWith","line":4858,"loc":{"start":{"line":4858,"column":42},"end":{"line":4858,"column":68}}},"374":{"name":"startsWith","line":4874,"loc":{"start":{"line":4874,"column":44},"end":{"line":4874,"column":72}}},"375":{"name":"toUpperCase","line":4894,"loc":{"start":{"line":4894,"column":45},"end":{"line":4894,"column":68}}},"376":{"name":"(anonymous_376)","line":4895,"loc":{"start":{"line":4895,"column":26},"end":{"line":4895,"column":41}}},"377":{"name":"toLowerCase","line":4914,"loc":{"start":{"line":4914,"column":45},"end":{"line":4914,"column":68}}},"378":{"name":"(anonymous_378)","line":4915,"loc":{"start":{"line":4915,"column":26},"end":{"line":4915,"column":41}}},"379":{"name":"mapString","line":4934,"loc":{"start":{"line":4934,"column":43},"end":{"line":4934,"column":69}}},"380":{"name":"MappedStringLikeSequence","line":4941,"loc":{"start":{"line":4941,"column":2},"end":{"line":4941,"column":51}}},"381":{"name":"reverse","line":4958,"loc":{"start":{"line":4958,"column":41},"end":{"line":4958,"column":60}}},"382":{"name":"ReversedStringLikeSequence","line":4965,"loc":{"start":{"line":4965,"column":2},"end":{"line":4965,"column":46}}},"383":{"name":"toString","line":4973,"loc":{"start":{"line":4973,"column":42},"end":{"line":4973,"column":62}}},"384":{"name":"match","line":4990,"loc":{"start":{"line":4990,"column":39},"end":{"line":4990,"column":63}}},"385":{"name":"StringMatchSequence","line":4997,"loc":{"start":{"line":4997,"column":2},"end":{"line":4997,"column":48}}},"386":{"name":"getIterator","line":5004,"loc":{"start":{"line":5004,"column":46},"end":{"line":5004,"column":69}}},"387":{"name":"StringMatchIterator","line":5011,"loc":{"start":{"line":5011,"column":2},"end":{"line":5011,"column":48}}},"388":{"name":"current","line":5016,"loc":{"start":{"line":5016,"column":42},"end":{"line":5016,"column":61}}},"389":{"name":"moveNext","line":5020,"loc":{"start":{"line":5020,"column":43},"end":{"line":5020,"column":63}}},"390":{"name":"split","line":5040,"loc":{"start":{"line":5040,"column":39},"end":{"line":5040,"column":65}}},"391":{"name":"SplitStringSequence","line":5047,"loc":{"start":{"line":5047,"column":2},"end":{"line":5047,"column":48}}},"392":{"name":"getIterator","line":5054,"loc":{"start":{"line":5054,"column":46},"end":{"line":5054,"column":69}}},"393":{"name":"SplitWithRegExpIterator","line":5073,"loc":{"start":{"line":5073,"column":2},"end":{"line":5073,"column":52}}},"394":{"name":"current","line":5078,"loc":{"start":{"line":5078,"column":46},"end":{"line":5078,"column":65}}},"395":{"name":"moveNext","line":5082,"loc":{"start":{"line":5082,"column":47},"end":{"line":5082,"column":67}}},"396":{"name":"SplitWithStringIterator","line":5109,"loc":{"start":{"line":5109,"column":2},"end":{"line":5109,"column":54}}},"397":{"name":"current","line":5114,"loc":{"start":{"line":5114,"column":46},"end":{"line":5114,"column":65}}},"398":{"name":"moveNext","line":5118,"loc":{"start":{"line":5118,"column":47},"end":{"line":5118,"column":67}}},"399":{"name":"StringWrapper","line":5144,"loc":{"start":{"line":5144,"column":2},"end":{"line":5144,"column":33}}},"400":{"name":"root","line":5150,"loc":{"start":{"line":5150,"column":33},"end":{"line":5150,"column":49}}},"401":{"name":"isAsync","line":5154,"loc":{"start":{"line":5154,"column":36},"end":{"line":5154,"column":55}}},"402":{"name":"get","line":5158,"loc":{"start":{"line":5158,"column":32},"end":{"line":5158,"column":48}}},"403":{"name":"length","line":5162,"loc":{"start":{"line":5162,"column":35},"end":{"line":5162,"column":53}}},"404":{"name":"toString","line":5166,"loc":{"start":{"line":5166,"column":37},"end":{"line":5166,"column":57}}},"405":{"name":"GeneratedSequence","line":5184,"loc":{"start":{"line":5184,"column":2},"end":{"line":5184,"column":50}}},"406":{"name":"isAsync","line":5191,"loc":{"start":{"line":5191,"column":40},"end":{"line":5191,"column":59}}},"407":{"name":"length","line":5202,"loc":{"start":{"line":5202,"column":39},"end":{"line":5202,"column":57}}},"408":{"name":"each","line":5216,"loc":{"start":{"line":5216,"column":37},"end":{"line":5216,"column":55}}},"409":{"name":"getIterator","line":5230,"loc":{"start":{"line":5230,"column":44},"end":{"line":5230,"column":67}}},"410":{"name":"GeneratedIterator","line":5241,"loc":{"start":{"line":5241,"column":2},"end":{"line":5241,"column":39}}},"411":{"name":"current","line":5247,"loc":{"start":{"line":5247,"column":40},"end":{"line":5247,"column":59}}},"412":{"name":"moveNext","line":5251,"loc":{"start":{"line":5251,"column":41},"end":{"line":5251,"column":61}}},"413":{"name":"AsyncSequence","line":5306,"loc":{"start":{"line":5306,"column":2},"end":{"line":5306,"column":43}}},"414":{"name":"isAsync","line":5319,"loc":{"start":{"line":5319,"column":36},"end":{"line":5319,"column":55}}},"415":{"name":"getIterator","line":5331,"loc":{"start":{"line":5331,"column":40},"end":{"line":5331,"column":63}}},"416":{"name":"each","line":5346,"loc":{"start":{"line":5346,"column":33},"end":{"line":5346,"column":51}}},"417":{"name":"cancel","line":5352,"loc":{"start":{"line":5352,"column":33},"end":{"line":5352,"column":51}}},"418":{"name":"iterate","line":5358,"loc":{"start":{"line":5358,"column":40},"end":{"line":5358,"column":59}}},"419":{"name":"AsyncHandle","line":5417,"loc":{"start":{"line":5417,"column":2},"end":{"line":5417,"column":33}}},"420":{"name":"then","line":5429,"loc":{"start":{"line":5429,"column":31},"end":{"line":5429,"column":70}}},"421":{"name":"(anonymous_421)","line":5432,"loc":{"start":{"line":5432,"column":31},"end":{"line":5432,"column":47}}},"422":{"name":"(anonymous_422)","line":5446,"loc":{"start":{"line":5446,"column":30},"end":{"line":5446,"column":47}}},"423":{"name":"_resolve","line":5471,"loc":{"start":{"line":5471,"column":35},"end":{"line":5471,"column":60}}},"424":{"name":"_reject","line":5484,"loc":{"start":{"line":5484,"column":34},"end":{"line":5484,"column":59}}},"425":{"name":"cancel","line":5502,"loc":{"start":{"line":5502,"column":33},"end":{"line":5502,"column":51}}},"426":{"name":"onComplete","line":5518,"loc":{"start":{"line":5518,"column":37},"end":{"line":5518,"column":67}}},"427":{"name":"onError","line":5532,"loc":{"start":{"line":5532,"column":34},"end":{"line":5532,"column":61}}},"428":{"name":"resolve","line":5541,"loc":{"start":{"line":5541,"column":2},"end":{"line":5541,"column":31}}},"429":{"name":"(anonymous_429)","line":5549,"loc":{"start":{"line":5549,"column":8},"end":{"line":5549,"column":24}}},"430":{"name":"(anonymous_430)","line":5550,"loc":{"start":{"line":5550,"column":8},"end":{"line":5550,"column":25}}},"431":{"name":"resolvePromise","line":5568,"loc":{"start":{"line":5568,"column":10},"end":{"line":5568,"column":41}}},"432":{"name":"rejectPromise","line":5575,"loc":{"start":{"line":5575,"column":10},"end":{"line":5575,"column":41}}},"433":{"name":"consumeListeners","line":5597,"loc":{"start":{"line":5597,"column":2},"end":{"line":5597,"column":56}}},"434":{"name":"(anonymous_434)","line":5600,"loc":{"start":{"line":5600,"column":13},"end":{"line":5600,"column":24}}},"435":{"name":"getOnNextCallback","line":5608,"loc":{"start":{"line":5608,"column":2},"end":{"line":5608,"column":39}}},"436":{"name":"(anonymous_436)","line":5616,"loc":{"start":{"line":5616,"column":11},"end":{"line":5616,"column":24}}},"437":{"name":"getCancelCallback","line":5621,"loc":{"start":{"line":5621,"column":2},"end":{"line":5621,"column":39}}},"438":{"name":"transform","line":5641,"loc":{"start":{"line":5641,"column":2},"end":{"line":5641,"column":32}}},"439":{"name":"(anonymous_439)","line":5643,"loc":{"start":{"line":5643,"column":24},"end":{"line":5643,"column":35}}},"440":{"name":"reverse","line":5651,"loc":{"start":{"line":5651,"column":36},"end":{"line":5651,"column":55}}},"441":{"name":"find","line":5664,"loc":{"start":{"line":5664,"column":33},"end":{"line":5664,"column":58}}},"442":{"name":"(anonymous_442)","line":5667,"loc":{"start":{"line":5667,"column":27},"end":{"line":5667,"column":42}}},"443":{"name":"(anonymous_443)","line":5674,"loc":{"start":{"line":5674,"column":23},"end":{"line":5674,"column":34}}},"444":{"name":"indexOf","line":5685,"loc":{"start":{"line":5685,"column":36},"end":{"line":5685,"column":60}}},"445":{"name":"(anonymous_445)","line":5688,"loc":{"start":{"line":5688,"column":27},"end":{"line":5688,"column":42}}},"446":{"name":"(anonymous_446)","line":5695,"loc":{"start":{"line":5695,"column":23},"end":{"line":5695,"column":34}}},"447":{"name":"contains","line":5708,"loc":{"start":{"line":5708,"column":37},"end":{"line":5708,"column":62}}},"448":{"name":"(anonymous_448)","line":5711,"loc":{"start":{"line":5711,"column":27},"end":{"line":5711,"column":39}}},"449":{"name":"(anonymous_449)","line":5718,"loc":{"start":{"line":5718,"column":23},"end":{"line":5718,"column":34}}},"450":{"name":"async","line":5726,"loc":{"start":{"line":5726,"column":34},"end":{"line":5726,"column":51}}},"451":{"name":"watch","line":5733,"loc":{"start":{"line":5733,"column":34},"end":{"line":5733,"column":64}}},"452":{"name":"WatchedPropertySequence","line":5737,"loc":{"start":{"line":5737,"column":2},"end":{"line":5737,"column":58}}},"453":{"name":"(anonymous_453)","line":5749,"loc":{"start":{"line":5749,"column":29},"end":{"line":5749,"column":52}}},"454":{"name":"(anonymous_454)","line":5753,"loc":{"start":{"line":5753,"column":13},"end":{"line":5753,"column":24}}},"455":{"name":"(anonymous_455)","line":5757,"loc":{"start":{"line":5757,"column":13},"end":{"line":5757,"column":29}}},"456":{"name":"each","line":5772,"loc":{"start":{"line":5772,"column":43},"end":{"line":5772,"column":61}}},"457":{"name":"StreamLikeSequence","line":5782,"loc":{"start":{"line":5782,"column":2},"end":{"line":5782,"column":32}}},"458":{"name":"isAsync","line":5786,"loc":{"start":{"line":5786,"column":41},"end":{"line":5786,"column":60}}},"459":{"name":"split","line":5790,"loc":{"start":{"line":5790,"column":39},"end":{"line":5790,"column":65}}},"460":{"name":"SplitStreamSequence","line":5797,"loc":{"start":{"line":5797,"column":2},"end":{"line":5797,"column":50}}},"461":{"name":"getEachForDelimiter","line":5805,"loc":{"start":{"line":5805,"column":54},"end":{"line":5805,"column":94}}},"462":{"name":"each","line":5813,"loc":{"start":{"line":5813,"column":44},"end":{"line":5813,"column":62}}},"463":{"name":"(anonymous_463)","line":5819,"loc":{"start":{"line":5819,"column":34},"end":{"line":5819,"column":50}}},"464":{"name":"(anonymous_464)","line":5835,"loc":{"start":{"line":5835,"column":22},"end":{"line":5835,"column":33}}},"465":{"name":"each","line":5844,"loc":{"start":{"line":5844,"column":45},"end":{"line":5844,"column":63}}},"466":{"name":"(anonymous_466)","line":5850,"loc":{"start":{"line":5850,"column":34},"end":{"line":5850,"column":50}}},"467":{"name":"(anonymous_467)","line":5863,"loc":{"start":{"line":5863,"column":22},"end":{"line":5863,"column":33}}},"468":{"name":"lines","line":5870,"loc":{"start":{"line":5870,"column":39},"end":{"line":5870,"column":56}}},"469":{"name":"match","line":5874,"loc":{"start":{"line":5874,"column":39},"end":{"line":5874,"column":63}}},"470":{"name":"MatchedStreamSequence","line":5881,"loc":{"start":{"line":5881,"column":2},"end":{"line":5881,"column":50}}},"471":{"name":"each","line":5888,"loc":{"start":{"line":5888,"column":41},"end":{"line":5888,"column":59}}},"472":{"name":"(anonymous_472)","line":5893,"loc":{"start":{"line":5893,"column":28},"end":{"line":5893,"column":44}}},"473":{"name":"(anonymous_473)","line":5894,"loc":{"start":{"line":5894,"column":38},"end":{"line":5894,"column":54}}},"474":{"name":"createWrapper","line":5953,"loc":{"start":{"line":5953,"column":23},"end":{"line":5953,"column":59}}},"475":{"name":"(anonymous_475)","line":5954,"loc":{"start":{"line":5954,"column":15},"end":{"line":5954,"column":26}}},"476":{"name":"(anonymous_476)","line":5960,"loc":{"start":{"line":5960,"column":26},"end":{"line":5960,"column":45}}},"477":{"name":"(anonymous_477)","line":5964,"loc":{"start":{"line":5964,"column":26},"end":{"line":5964,"column":41}}},"478":{"name":"(anonymous_478)","line":5974,"loc":{"start":{"line":5974,"column":11},"end":{"line":5974,"column":22}}},"479":{"name":"generate","line":6002,"loc":{"start":{"line":6002,"column":18},"end":{"line":6002,"column":57}}},"480":{"name":"range","line":6025,"loc":{"start":{"line":6025,"column":15},"end":{"line":6025,"column":32}}},"481":{"name":"(anonymous_481)","line":6038,"loc":{"start":{"line":6038,"column":25},"end":{"line":6038,"column":37}}},"482":{"name":"repeat","line":6058,"loc":{"start":{"line":6058,"column":16},"end":{"line":6058,"column":46}}},"483":{"name":"(anonymous_483)","line":6059,"loc":{"start":{"line":6059,"column":25},"end":{"line":6059,"column":36}}},"484":{"name":"clone","line":6088,"loc":{"start":{"line":6088,"column":15},"end":{"line":6088,"column":38}}},"485":{"name":"deprecate","line":6095,"loc":{"start":{"line":6095,"column":19},"end":{"line":6095,"column":51}}},"486":{"name":"(anonymous_486)","line":6096,"loc":{"start":{"line":6096,"column":11},"end":{"line":6096,"column":22}}},"487":{"name":"(anonymous_487)","line":6102,"loc":{"start":{"line":6102,"column":36},"end":{"line":6102,"column":48}}},"488":{"name":"createCallback","line":6127,"loc":{"start":{"line":6127,"column":2},"end":{"line":6127,"column":50}}},"489":{"name":"(anonymous_489)","line":6133,"loc":{"start":{"line":6133,"column":15},"end":{"line":6133,"column":27}}},"490":{"name":"(anonymous_490)","line":6138,"loc":{"start":{"line":6138,"column":15},"end":{"line":6138,"column":27}}},"491":{"name":"(anonymous_491)","line":6139,"loc":{"start":{"line":6139,"column":36},"end":{"line":6139,"column":57}}},"492":{"name":"(anonymous_492)","line":6146,"loc":{"start":{"line":6146,"column":10},"end":{"line":6146,"column":21}}},"493":{"name":"createComparator","line":6173,"loc":{"start":{"line":6173,"column":2},"end":{"line":6173,"column":50}}},"494":{"name":"(anonymous_494)","line":6178,"loc":{"start":{"line":6178,"column":11},"end":{"line":6178,"column":26}}},"495":{"name":"reverseArguments","line":6195,"loc":{"start":{"line":6195,"column":2},"end":{"line":6195,"column":32}}},"496":{"name":"(anonymous_496)","line":6196,"loc":{"start":{"line":6196,"column":11},"end":{"line":6196,"column":26}}},"497":{"name":"createSet","line":6206,"loc":{"start":{"line":6206,"column":2},"end":{"line":6206,"column":29}}},"498":{"name":"(anonymous_498)","line":6208,"loc":{"start":{"line":6208,"column":38},"end":{"line":6208,"column":50}}},"499":{"name":"compare","line":6228,"loc":{"start":{"line":6228,"column":2},"end":{"line":6228,"column":25}}},"500":{"name":"forEach","line":6245,"loc":{"start":{"line":6245,"column":2},"end":{"line":6245,"column":30}}},"501":{"name":"getFirst","line":6258,"loc":{"start":{"line":6258,"column":2},"end":{"line":6258,"column":30}}},"502":{"name":"(anonymous_502)","line":6260,"loc":{"start":{"line":6260,"column":18},"end":{"line":6260,"column":30}}},"503":{"name":"arrayContains","line":6281,"loc":{"start":{"line":6281,"column":2},"end":{"line":6281,"column":41}}},"504":{"name":"arrayContainsBefore","line":6317,"loc":{"start":{"line":6317,"column":2},"end":{"line":6317,"column":61}}},"505":{"name":"swap","line":6352,"loc":{"start":{"line":6352,"column":2},"end":{"line":6352,"column":29}}},"506":{"name":"cloneRegex","line":6365,"loc":{"start":{"line":6365,"column":2},"end":{"line":6365,"column":31}}},"507":{"name":"Set","line":6416,"loc":{"start":{"line":6416,"column":2},"end":{"line":6416,"column":17}}},"508":{"name":"add","line":6428,"loc":{"start":{"line":6428,"column":22},"end":{"line":6428,"column":42}}},"509":{"name":"contains","line":6497,"loc":{"start":{"line":6497,"column":27},"end":{"line":6497,"column":52}}},"510":{"name":"Queue","line":6584,"loc":{"start":{"line":6584,"column":2},"end":{"line":6584,"column":27}}},"511":{"name":"add","line":6593,"loc":{"start":{"line":6593,"column":24},"end":{"line":6593,"column":46}}},"512":{"name":"toArray","line":6612,"loc":{"start":{"line":6612,"column":28},"end":{"line":6612,"column":47}}},"513":{"name":"defineSequenceType","line":6628,"loc":{"start":{"line":6628,"column":2},"end":{"line":6628,"column":53}}},"514":{"name":"ctor","line":6630,"loc":{"start":{"line":6630,"column":15},"end":{"line":6630,"column":31}}},"515":{"name":"factory","line":6644,"loc":{"start":{"line":6644,"column":18},"end":{"line":6644,"column":37}}}},"statementMap":{"1":{"start":{"line":62,"column":0},"end":{"line":6667,"column":3}},"2":{"start":{"line":63,"column":2},"end":{"line":69,"column":3}},"3":{"start":{"line":64,"column":4},"end":{"line":64,"column":20}},"4":{"start":{"line":65,"column":9},"end":{"line":69,"column":3}},"5":{"start":{"line":66,"column":4},"end":{"line":66,"column":31}},"6":{"start":{"line":68,"column":4},"end":{"line":68,"column":26}},"7":{"start":{"line":106,"column":2},"end":{"line":128,"column":3}},"8":{"start":{"line":107,"column":4},"end":{"line":115,"column":5}},"9":{"start":{"line":108,"column":6},"end":{"line":108,"column":38}},"10":{"start":{"line":110,"column":11},"end":{"line":115,"column":5}},"11":{"start":{"line":111,"column":6},"end":{"line":111,"column":39}},"12":{"start":{"line":113,"column":11},"end":{"line":115,"column":5}},"13":{"start":{"line":114,"column":6},"end":{"line":114,"column":20}},"14":{"start":{"line":117,"column":4},"end":{"line":125,"column":5}},"15":{"start":{"line":118,"column":6},"end":{"line":118,"column":75}},"16":{"start":{"line":119,"column":6},"end":{"line":121,"column":7}},"17":{"start":{"line":120,"column":8},"end":{"line":120,"column":44}},"18":{"start":{"line":122,"column":6},"end":{"line":124,"column":7}},"19":{"start":{"line":123,"column":8},"end":{"line":123,"column":22}},"20":{"start":{"line":127,"column":4},"end":{"line":127,"column":37}},"21":{"start":{"line":130,"column":2},"end":{"line":130,"column":25}},"22":{"start":{"line":134,"column":2},"end":{"line":134,"column":33}},"23":{"start":{"line":135,"column":2},"end":{"line":135,"column":53}},"24":{"start":{"line":135,"column":41},"end":{"line":135,"column":50}},"25":{"start":{"line":160,"column":2},"end":{"line":178,"column":4}},"26":{"start":{"line":161,"column":4},"end":{"line":171,"column":5}},"27":{"start":{"line":162,"column":6},"end":{"line":164,"column":7}},"28":{"start":{"line":163,"column":8},"end":{"line":163,"column":73}},"29":{"start":{"line":166,"column":6},"end":{"line":168,"column":7}},"30":{"start":{"line":167,"column":8},"end":{"line":167,"column":72}},"31":{"start":{"line":170,"column":6},"end":{"line":170,"column":26}},"32":{"start":{"line":173,"column":4},"end":{"line":175,"column":7}},"33":{"start":{"line":174,"column":6},"end":{"line":174,"column":34}},"34":{"start":{"line":177,"column":4},"end":{"line":177,"column":22}},"35":{"start":{"line":253,"column":2},"end":{"line":253,"column":24}},"36":{"start":{"line":289,"column":2},"end":{"line":295,"column":4}},"37":{"start":{"line":290,"column":4},"end":{"line":292,"column":5}},"38":{"start":{"line":291,"column":6},"end":{"line":291,"column":90}},"39":{"start":{"line":294,"column":4},"end":{"line":294,"column":63}},"40":{"start":{"line":312,"column":2},"end":{"line":314,"column":4}},"41":{"start":{"line":313,"column":4},"end":{"line":313,"column":36}},"42":{"start":{"line":341,"column":2},"end":{"line":343,"column":4}},"43":{"start":{"line":342,"column":4},"end":{"line":342,"column":30}},"44":{"start":{"line":348,"column":2},"end":{"line":350,"column":4}},"45":{"start":{"line":349,"column":4},"end":{"line":349,"column":30}},"46":{"start":{"line":361,"column":2},"end":{"line":363,"column":4}},"47":{"start":{"line":362,"column":4},"end":{"line":362,"column":55}},"48":{"start":{"line":373,"column":2},"end":{"line":375,"column":4}},"49":{"start":{"line":374,"column":4},"end":{"line":374,"column":26}},"50":{"start":{"line":388,"column":2},"end":{"line":401,"column":4}},"51":{"start":{"line":389,"column":4},"end":{"line":391,"column":15}},"52":{"start":{"line":393,"column":4},"end":{"line":398,"column":5}},"53":{"start":{"line":394,"column":6},"end":{"line":394,"column":27}},"54":{"start":{"line":395,"column":6},"end":{"line":395,"column":28}},"55":{"start":{"line":397,"column":6},"end":{"line":397,"column":35}},"56":{"start":{"line":400,"column":4},"end":{"line":400,"column":18}},"57":{"start":{"line":416,"column":2},"end":{"line":419,"column":3}},"58":{"start":{"line":417,"column":4},"end":{"line":417,"column":29}},"59":{"start":{"line":418,"column":4},"end":{"line":418,"column":23}},"60":{"start":{"line":427,"column":2},"end":{"line":429,"column":4}},"61":{"start":{"line":428,"column":4},"end":{"line":428,"column":64}},"62":{"start":{"line":438,"column":2},"end":{"line":451,"column":4}},"63":{"start":{"line":439,"column":4},"end":{"line":439,"column":39}},"64":{"start":{"line":441,"column":4},"end":{"line":443,"column":5}},"65":{"start":{"line":442,"column":6},"end":{"line":442,"column":64}},"66":{"start":{"line":445,"column":4},"end":{"line":447,"column":5}},"67":{"start":{"line":446,"column":6},"end":{"line":446,"column":19}},"68":{"start":{"line":449,"column":4},"end":{"line":449,"column":17}},"69":{"start":{"line":450,"column":4},"end":{"line":450,"column":16}},"70":{"start":{"line":465,"column":2},"end":{"line":470,"column":4}},"71":{"start":{"line":466,"column":4},"end":{"line":469,"column":11}},"72":{"start":{"line":467,"column":6},"end":{"line":467,"column":24}},"73":{"start":{"line":468,"column":6},"end":{"line":468,"column":17}},"74":{"start":{"line":486,"column":2},"end":{"line":488,"column":4}},"75":{"start":{"line":487,"column":4},"end":{"line":487,"column":44}},"76":{"start":{"line":501,"column":2},"end":{"line":510,"column":4}},"77":{"start":{"line":502,"column":4},"end":{"line":502,"column":16}},"78":{"start":{"line":503,"column":4},"end":{"line":508,"column":7}},"79":{"start":{"line":504,"column":6},"end":{"line":507,"column":7}},"80":{"start":{"line":505,"column":8},"end":{"line":505,"column":20}},"81":{"start":{"line":506,"column":8},"end":{"line":506,"column":21}},"82":{"start":{"line":509,"column":4},"end":{"line":509,"column":19}},"83":{"start":{"line":530,"column":2},"end":{"line":532,"column":4}},"84":{"start":{"line":531,"column":4},"end":{"line":531,"column":38}},"85":{"start":{"line":537,"column":2},"end":{"line":542,"column":3}},"86":{"start":{"line":538,"column":4},"end":{"line":538,"column":27}},"87":{"start":{"line":539,"column":4},"end":{"line":539,"column":23}},"88":{"start":{"line":540,"column":4},"end":{"line":540,"column":30}},"89":{"start":{"line":541,"column":4},"end":{"line":541,"column":26}},"90":{"start":{"line":562,"column":2},"end":{"line":567,"column":4}},"91":{"start":{"line":563,"column":4},"end":{"line":566,"column":11}},"92":{"start":{"line":564,"column":6},"end":{"line":564,"column":32}},"93":{"start":{"line":565,"column":6},"end":{"line":565,"column":20}},"94":{"start":{"line":582,"column":2},"end":{"line":593,"column":4}},"95":{"start":{"line":583,"column":4},"end":{"line":584,"column":15}},"96":{"start":{"line":586,"column":4},"end":{"line":590,"column":5}},"97":{"start":{"line":587,"column":6},"end":{"line":589,"column":7}},"98":{"start":{"line":588,"column":8},"end":{"line":588,"column":21}},"99":{"start":{"line":592,"column":4},"end":{"line":592,"column":16}},"100":{"start":{"line":595,"column":2},"end":{"line":597,"column":4}},"101":{"start":{"line":596,"column":4},"end":{"line":596,"column":25}},"102":{"start":{"line":628,"column":2},"end":{"line":630,"column":4}},"103":{"start":{"line":629,"column":4},"end":{"line":629,"column":59}},"104":{"start":{"line":632,"column":2},"end":{"line":634,"column":4}},"105":{"start":{"line":633,"column":4},"end":{"line":633,"column":27}},"106":{"start":{"line":639,"column":2},"end":{"line":642,"column":3}},"107":{"start":{"line":640,"column":4},"end":{"line":640,"column":25}},"108":{"start":{"line":641,"column":4},"end":{"line":641,"column":24}},"109":{"start":{"line":644,"column":2},"end":{"line":644,"column":44}},"110":{"start":{"line":646,"column":2},"end":{"line":648,"column":4}},"111":{"start":{"line":647,"column":4},"end":{"line":647,"column":56}},"112":{"start":{"line":650,"column":2},"end":{"line":655,"column":4}},"113":{"start":{"line":651,"column":4},"end":{"line":651,"column":27}},"114":{"start":{"line":652,"column":4},"end":{"line":654,"column":7}},"115":{"start":{"line":653,"column":6},"end":{"line":653,"column":32}},"116":{"start":{"line":660,"column":2},"end":{"line":664,"column":3}},"117":{"start":{"line":661,"column":4},"end":{"line":661,"column":43}},"118":{"start":{"line":662,"column":4},"end":{"line":662,"column":26}},"119":{"start":{"line":663,"column":4},"end":{"line":663,"column":23}},"120":{"start":{"line":666,"column":2},"end":{"line":668,"column":4}},"121":{"start":{"line":667,"column":4},"end":{"line":667,"column":59}},"122":{"start":{"line":670,"column":2},"end":{"line":677,"column":4}},"123":{"start":{"line":671,"column":4},"end":{"line":674,"column":5}},"124":{"start":{"line":672,"column":6},"end":{"line":672,"column":19}},"125":{"start":{"line":673,"column":6},"end":{"line":673,"column":18}},"126":{"start":{"line":676,"column":4},"end":{"line":676,"column":17}},"127":{"start":{"line":696,"column":2},"end":{"line":698,"column":4}},"128":{"start":{"line":697,"column":4},"end":{"line":697,"column":30}},"129":{"start":{"line":723,"column":2},"end":{"line":727,"column":4}},"130":{"start":{"line":724,"column":4},"end":{"line":726,"column":7}},"131":{"start":{"line":725,"column":6},"end":{"line":725,"column":29}},"132":{"start":{"line":755,"column":2},"end":{"line":757,"column":4}},"133":{"start":{"line":756,"column":4},"end":{"line":756,"column":64}},"134":{"start":{"line":759,"column":2},"end":{"line":761,"column":4}},"135":{"start":{"line":760,"column":4},"end":{"line":760,"column":33}},"136":{"start":{"line":766,"column":2},"end":{"line":769,"column":3}},"137":{"start":{"line":767,"column":4},"end":{"line":767,"column":27}},"138":{"start":{"line":768,"column":4},"end":{"line":768,"column":29}},"139":{"start":{"line":771,"column":2},"end":{"line":771,"column":46}},"140":{"start":{"line":773,"column":2},"end":{"line":775,"column":4}},"141":{"start":{"line":774,"column":4},"end":{"line":774,"column":61}},"142":{"start":{"line":777,"column":2},"end":{"line":786,"column":4}},"143":{"start":{"line":778,"column":4},"end":{"line":779,"column":14}},"144":{"start":{"line":781,"column":4},"end":{"line":785,"column":7}},"145":{"start":{"line":782,"column":6},"end":{"line":784,"column":7}},"146":{"start":{"line":783,"column":8},"end":{"line":783,"column":26}},"147":{"start":{"line":788,"column":2},"end":{"line":790,"column":4}},"148":{"start":{"line":789,"column":4},"end":{"line":789,"column":55}},"149":{"start":{"line":795,"column":2},"end":{"line":799,"column":3}},"150":{"start":{"line":796,"column":4},"end":{"line":796,"column":43}},"151":{"start":{"line":797,"column":4},"end":{"line":797,"column":29}},"152":{"start":{"line":798,"column":4},"end":{"line":798,"column":22}},"153":{"start":{"line":801,"column":2},"end":{"line":803,"column":4}},"154":{"start":{"line":802,"column":4},"end":{"line":802,"column":22}},"155":{"start":{"line":805,"column":2},"end":{"line":820,"column":4}},"156":{"start":{"line":806,"column":4},"end":{"line":808,"column":14}},"157":{"start":{"line":810,"column":4},"end":{"line":816,"column":5}},"158":{"start":{"line":811,"column":6},"end":{"line":811,"column":33}},"159":{"start":{"line":812,"column":6},"end":{"line":815,"column":7}},"160":{"start":{"line":813,"column":8},"end":{"line":813,"column":27}},"161":{"start":{"line":814,"column":8},"end":{"line":814,"column":20}},"162":{"start":{"line":818,"column":4},"end":{"line":818,"column":27}},"163":{"start":{"line":819,"column":4},"end":{"line":819,"column":17}},"164":{"start":{"line":836,"column":2},"end":{"line":839,"column":4}},"165":{"start":{"line":837,"column":4},"end":{"line":837,"column":40}},"166":{"start":{"line":838,"column":4},"end":{"line":838,"column":61}},"167":{"start":{"line":838,"column":37},"end":{"line":838,"column":57}},"168":{"start":{"line":856,"column":2},"end":{"line":858,"column":4}},"169":{"start":{"line":857,"column":4},"end":{"line":857,"column":66}},"170":{"start":{"line":857,"column":37},"end":{"line":857,"column":62}},"171":{"start":{"line":883,"column":2},"end":{"line":885,"column":4}},"172":{"start":{"line":884,"column":4},"end":{"line":884,"column":35}},"173":{"start":{"line":901,"column":2},"end":{"line":903,"column":4}},"174":{"start":{"line":902,"column":4},"end":{"line":902,"column":38}},"175":{"start":{"line":908,"column":2},"end":{"line":910,"column":3}},"176":{"start":{"line":909,"column":4},"end":{"line":909,"column":25}},"177":{"start":{"line":912,"column":2},"end":{"line":912,"column":46}},"178":{"start":{"line":914,"column":2},"end":{"line":916,"column":4}},"179":{"start":{"line":915,"column":4},"end":{"line":915,"column":45}},"180":{"start":{"line":921,"column":2},"end":{"line":923,"column":3}},"181":{"start":{"line":922,"column":4},"end":{"line":922,"column":29}},"182":{"start":{"line":925,"column":2},"end":{"line":927,"column":4}},"183":{"start":{"line":926,"column":4},"end":{"line":926,"column":43}},"184":{"start":{"line":929,"column":2},"end":{"line":938,"column":4}},"185":{"start":{"line":930,"column":4},"end":{"line":931,"column":32}},"186":{"start":{"line":933,"column":4},"end":{"line":935,"column":5}},"187":{"start":{"line":934,"column":6},"end":{"line":934,"column":26}},"188":{"start":{"line":937,"column":4},"end":{"line":937,"column":31}},"189":{"start":{"line":940,"column":2},"end":{"line":946,"column":4}},"190":{"start":{"line":941,"column":4},"end":{"line":943,"column":5}},"191":{"start":{"line":942,"column":6},"end":{"line":942,"column":50}},"192":{"start":{"line":945,"column":4},"end":{"line":945,"column":28}},"193":{"start":{"line":965,"column":2},"end":{"line":967,"column":4}},"194":{"start":{"line":966,"column":4},"end":{"line":966,"column":73}},"195":{"start":{"line":972,"column":2},"end":{"line":975,"column":3}},"196":{"start":{"line":973,"column":4},"end":{"line":973,"column":25}},"197":{"start":{"line":974,"column":4},"end":{"line":974,"column":25}},"198":{"start":{"line":977,"column":2},"end":{"line":977,"column":50}},"199":{"start":{"line":979,"column":2},"end":{"line":997,"column":4}},"200":{"start":{"line":980,"column":4},"end":{"line":981,"column":14}},"201":{"start":{"line":983,"column":4},"end":{"line":988,"column":7}},"202":{"start":{"line":984,"column":6},"end":{"line":987,"column":7}},"203":{"start":{"line":985,"column":8},"end":{"line":985,"column":20}},"204":{"start":{"line":986,"column":8},"end":{"line":986,"column":21}},"205":{"start":{"line":990,"column":4},"end":{"line":996,"column":5}},"206":{"start":{"line":991,"column":6},"end":{"line":995,"column":9}},"207":{"start":{"line":992,"column":8},"end":{"line":994,"column":9}},"208":{"start":{"line":993,"column":10},"end":{"line":993,"column":23}},"209":{"start":{"line":1021,"column":2},"end":{"line":1026,"column":4}},"210":{"start":{"line":1022,"column":4},"end":{"line":1024,"column":5}},"211":{"start":{"line":1023,"column":6},"end":{"line":1023,"column":28}},"212":{"start":{"line":1025,"column":4},"end":{"line":1025,"column":41}},"213":{"start":{"line":1028,"column":2},"end":{"line":1031,"column":4}},"214":{"start":{"line":1030,"column":4},"end":{"line":1030,"column":29}},"215":{"start":{"line":1036,"column":2},"end":{"line":1039,"column":3}},"216":{"start":{"line":1037,"column":4},"end":{"line":1037,"column":25}},"217":{"start":{"line":1038,"column":4},"end":{"line":1038,"column":24}},"218":{"start":{"line":1041,"column":2},"end":{"line":1041,"column":42}},"219":{"start":{"line":1043,"column":2},"end":{"line":1045,"column":4}},"220":{"start":{"line":1044,"column":4},"end":{"line":1044,"column":53}},"221":{"start":{"line":1047,"column":2},"end":{"line":1063,"column":4}},"222":{"start":{"line":1048,"column":4},"end":{"line":1049,"column":18}},"223":{"start":{"line":1051,"column":4},"end":{"line":1051,"column":15}},"224":{"start":{"line":1052,"column":4},"end":{"line":1056,"column":7}},"225":{"start":{"line":1053,"column":6},"end":{"line":1053,"column":45}},"226":{"start":{"line":1053,"column":23},"end":{"line":1053,"column":43}},"227":{"start":{"line":1054,"column":6},"end":{"line":1054,"column":39}},"228":{"start":{"line":1054,"column":24},"end":{"line":1054,"column":37}},"229":{"start":{"line":1055,"column":6},"end":{"line":1055,"column":20}},"230":{"start":{"line":1058,"column":4},"end":{"line":1060,"column":5}},"231":{"start":{"line":1059,"column":6},"end":{"line":1059,"column":20}},"232":{"start":{"line":1062,"column":4},"end":{"line":1062,"column":43}},"233":{"start":{"line":1068,"column":2},"end":{"line":1071,"column":3}},"234":{"start":{"line":1069,"column":4},"end":{"line":1069,"column":43}},"235":{"start":{"line":1070,"column":4},"end":{"line":1070,"column":26}},"236":{"start":{"line":1073,"column":2},"end":{"line":1075,"column":4}},"237":{"start":{"line":1074,"column":4},"end":{"line":1074,"column":35}},"238":{"start":{"line":1077,"column":2},"end":{"line":1079,"column":4}},"239":{"start":{"line":1078,"column":4},"end":{"line":1078,"column":61}},"240":{"start":{"line":1100,"column":2},"end":{"line":1102,"column":4}},"241":{"start":{"line":1101,"column":4},"end":{"line":1101,"column":50}},"242":{"start":{"line":1107,"column":2},"end":{"line":1110,"column":3}},"243":{"start":{"line":1108,"column":4},"end":{"line":1108,"column":28}},"244":{"start":{"line":1109,"column":4},"end":{"line":1109,"column":31}},"245":{"start":{"line":1112,"column":2},"end":{"line":1112,"column":47}},"246":{"start":{"line":1114,"column":2},"end":{"line":1133,"column":4}},"247":{"start":{"line":1115,"column":4},"end":{"line":1117,"column":14}},"248":{"start":{"line":1119,"column":4},"end":{"line":1126,"column":7}},"249":{"start":{"line":1120,"column":6},"end":{"line":1123,"column":7}},"250":{"start":{"line":1121,"column":8},"end":{"line":1121,"column":24}},"251":{"start":{"line":1122,"column":8},"end":{"line":1122,"column":21}},"252":{"start":{"line":1125,"column":6},"end":{"line":1125,"column":24}},"253":{"start":{"line":1128,"column":4},"end":{"line":1130,"column":5}},"254":{"start":{"line":1129,"column":6},"end":{"line":1129,"column":20}},"255":{"start":{"line":1132,"column":4},"end":{"line":1132,"column":20}},"256":{"start":{"line":1149,"column":2},"end":{"line":1151,"column":4}},"257":{"start":{"line":1150,"column":4},"end":{"line":1150,"column":44}},"258":{"start":{"line":1153,"column":2},"end":{"line":1156,"column":3}},"259":{"start":{"line":1154,"column":4},"end":{"line":1154,"column":25}},"260":{"start":{"line":1155,"column":4},"end":{"line":1155,"column":55}},"261":{"start":{"line":1158,"column":2},"end":{"line":1158,"column":45}},"262":{"start":{"line":1160,"column":2},"end":{"line":1163,"column":4}},"263":{"start":{"line":1161,"column":4},"end":{"line":1161,"column":39}},"264":{"start":{"line":1162,"column":4},"end":{"line":1162,"column":60}},"265":{"start":{"line":1180,"column":2},"end":{"line":1185,"column":4}},"266":{"start":{"line":1181,"column":4},"end":{"line":1183,"column":5}},"267":{"start":{"line":1182,"column":6},"end":{"line":1182,"column":36}},"268":{"start":{"line":1184,"column":4},"end":{"line":1184,"column":48}},"269":{"start":{"line":1203,"column":2},"end":{"line":1205,"column":4}},"270":{"start":{"line":1204,"column":4},"end":{"line":1204,"column":42}},"271":{"start":{"line":1223,"column":2},"end":{"line":1225,"column":4}},"272":{"start":{"line":1224,"column":4},"end":{"line":1224,"column":41}},"273":{"start":{"line":1227,"column":2},"end":{"line":1231,"column":4}},"274":{"start":{"line":1230,"column":4},"end":{"line":1230,"column":28}},"275":{"start":{"line":1236,"column":2},"end":{"line":1239,"column":3}},"276":{"start":{"line":1237,"column":4},"end":{"line":1237,"column":25}},"277":{"start":{"line":1238,"column":4},"end":{"line":1238,"column":56}},"278":{"start":{"line":1241,"column":2},"end":{"line":1241,"column":42}},"279":{"start":{"line":1243,"column":2},"end":{"line":1252,"column":4}},"280":{"start":{"line":1244,"column":4},"end":{"line":1246,"column":20}},"281":{"start":{"line":1248,"column":4},"end":{"line":1251,"column":7}},"282":{"start":{"line":1249,"column":6},"end":{"line":1249,"column":40}},"283":{"start":{"line":1249,"column":31},"end":{"line":1249,"column":38}},"284":{"start":{"line":1250,"column":6},"end":{"line":1250,"column":24}},"285":{"start":{"line":1264,"column":2},"end":{"line":1266,"column":4}},"286":{"start":{"line":1265,"column":4},"end":{"line":1265,"column":50}},"287":{"start":{"line":1268,"column":2},"end":{"line":1270,"column":4}},"288":{"start":{"line":1269,"column":4},"end":{"line":1269,"column":37}},"289":{"start":{"line":1275,"column":2},"end":{"line":1278,"column":3}},"290":{"start":{"line":1276,"column":4},"end":{"line":1276,"column":28}},"291":{"start":{"line":1277,"column":4},"end":{"line":1277,"column":31}},"292":{"start":{"line":1280,"column":2},"end":{"line":1280,"column":47}},"293":{"start":{"line":1282,"column":2},"end":{"line":1297,"column":4}},"294":{"start":{"line":1283,"column":4},"end":{"line":1284,"column":26}},"295":{"start":{"line":1286,"column":4},"end":{"line":1296,"column":7}},"296":{"start":{"line":1287,"column":6},"end":{"line":1293,"column":7}},"297":{"start":{"line":1288,"column":8},"end":{"line":1290,"column":9}},"298":{"start":{"line":1289,"column":10},"end":{"line":1289,"column":17}},"299":{"start":{"line":1292,"column":8},"end":{"line":1292,"column":20}},"300":{"start":{"line":1295,"column":6},"end":{"line":1295,"column":19}},"301":{"start":{"line":1332,"column":2},"end":{"line":1336,"column":4}},"302":{"start":{"line":1333,"column":4},"end":{"line":1333,"column":33}},"303":{"start":{"line":1334,"column":4},"end":{"line":1334,"column":58}},"304":{"start":{"line":1334,"column":22},"end":{"line":1334,"column":56}},"305":{"start":{"line":1335,"column":4},"end":{"line":1335,"column":44}},"306":{"start":{"line":1382,"column":2},"end":{"line":1386,"column":4}},"307":{"start":{"line":1383,"column":4},"end":{"line":1383,"column":38}},"308":{"start":{"line":1384,"column":4},"end":{"line":1384,"column":58}},"309":{"start":{"line":1384,"column":22},"end":{"line":1384,"column":56}},"310":{"start":{"line":1385,"column":4},"end":{"line":1385,"column":44}},"311":{"start":{"line":1391,"column":2},"end":{"line":1394,"column":3}},"312":{"start":{"line":1392,"column":4},"end":{"line":1392,"column":25}},"313":{"start":{"line":1393,"column":4},"end":{"line":1393,"column":25}},"314":{"start":{"line":1396,"column":2},"end":{"line":1396,"column":44}},"315":{"start":{"line":1398,"column":2},"end":{"line":1405,"column":4}},"316":{"start":{"line":1399,"column":4},"end":{"line":1400,"column":39}},"317":{"start":{"line":1402,"column":4},"end":{"line":1402,"column":24}},"318":{"start":{"line":1404,"column":4},"end":{"line":1404,"column":31}},"319":{"start":{"line":1417,"column":2},"end":{"line":1419,"column":4}},"320":{"start":{"line":1418,"column":4},"end":{"line":1418,"column":74}},"321":{"start":{"line":1463,"column":2},"end":{"line":1465,"column":4}},"322":{"start":{"line":1464,"column":4},"end":{"line":1464,"column":51}},"323":{"start":{"line":1470,"column":2},"end":{"line":1474,"column":3}},"324":{"start":{"line":1471,"column":4},"end":{"line":1471,"column":25}},"325":{"start":{"line":1472,"column":4},"end":{"line":1472,"column":24}},"326":{"start":{"line":1473,"column":4},"end":{"line":1473,"column":24}},"327":{"start":{"line":1504,"column":2},"end":{"line":1506,"column":4}},"328":{"start":{"line":1505,"column":4},"end":{"line":1505,"column":51}},"329":{"start":{"line":1511,"column":2},"end":{"line":1515,"column":3}},"330":{"start":{"line":1512,"column":4},"end":{"line":1512,"column":25}},"331":{"start":{"line":1513,"column":4},"end":{"line":1513,"column":24}},"332":{"start":{"line":1514,"column":4},"end":{"line":1514,"column":24}},"333":{"start":{"line":1542,"column":2},"end":{"line":1544,"column":4}},"334":{"start":{"line":1543,"column":4},"end":{"line":1543,"column":44}},"335":{"start":{"line":1549,"column":2},"end":{"line":1552,"column":3}},"336":{"start":{"line":1550,"column":4},"end":{"line":1550,"column":25}},"337":{"start":{"line":1551,"column":4},"end":{"line":1551,"column":24}},"338":{"start":{"line":1594,"column":2},"end":{"line":1596,"column":4}},"339":{"start":{"line":1595,"column":4},"end":{"line":1595,"column":43}},"340":{"start":{"line":1598,"column":2},"end":{"line":1600,"column":4}},"341":{"start":{"line":1599,"column":4},"end":{"line":1599,"column":28}},"342":{"start":{"line":1605,"column":2},"end":{"line":1608,"column":3}},"343":{"start":{"line":1606,"column":4},"end":{"line":1606,"column":25}},"344":{"start":{"line":1607,"column":4},"end":{"line":1607,"column":24}},"345":{"start":{"line":1610,"column":2},"end":{"line":1610,"column":44}},"346":{"start":{"line":1612,"column":2},"end":{"line":1632,"column":4}},"347":{"start":{"line":1613,"column":4},"end":{"line":1615,"column":18}},"348":{"start":{"line":1617,"column":4},"end":{"line":1631,"column":5}},"349":{"start":{"line":1618,"column":6},"end":{"line":1618,"column":36}},"350":{"start":{"line":1619,"column":6},"end":{"line":1623,"column":9}},"351":{"start":{"line":1620,"column":8},"end":{"line":1622,"column":9}},"352":{"start":{"line":1621,"column":10},"end":{"line":1621,"column":28}},"353":{"start":{"line":1626,"column":6},"end":{"line":1630,"column":9}},"354":{"start":{"line":1627,"column":8},"end":{"line":1629,"column":9}},"355":{"start":{"line":1628,"column":10},"end":{"line":1628,"column":28}},"356":{"start":{"line":1662,"column":2},"end":{"line":1668,"column":4}},"357":{"start":{"line":1663,"column":4},"end":{"line":1667,"column":5}},"358":{"start":{"line":1664,"column":6},"end":{"line":1664,"column":77}},"359":{"start":{"line":1666,"column":6},"end":{"line":1666,"column":69}},"360":{"start":{"line":1673,"column":2},"end":{"line":1676,"column":3}},"361":{"start":{"line":1674,"column":4},"end":{"line":1674,"column":25}},"362":{"start":{"line":1675,"column":4},"end":{"line":1675,"column":25}},"363":{"start":{"line":1678,"column":2},"end":{"line":1678,"column":44}},"364":{"start":{"line":1680,"column":2},"end":{"line":1717,"column":4}},"365":{"start":{"line":1681,"column":4},"end":{"line":1682,"column":14}},"366":{"start":{"line":1684,"column":4},"end":{"line":1690,"column":7}},"367":{"start":{"line":1685,"column":6},"end":{"line":1685,"column":22}},"368":{"start":{"line":1686,"column":6},"end":{"line":1688,"column":7}},"369":{"start":{"line":1687,"column":8},"end":{"line":1687,"column":33}},"370":{"start":{"line":1689,"column":6},"end":{"line":1689,"column":28}},"371":{"start":{"line":1692,"column":4},"end":{"line":1694,"column":5}},"372":{"start":{"line":1693,"column":6},"end":{"line":1693,"column":19}},"373":{"start":{"line":1696,"column":4},"end":{"line":1697,"column":25}},"374":{"start":{"line":1699,"column":4},"end":{"line":1714,"column":5}},"375":{"start":{"line":1700,"column":6},"end":{"line":1700,"column":24}},"376":{"start":{"line":1701,"column":6},"end":{"line":1701,"column":26}},"377":{"start":{"line":1702,"column":6},"end":{"line":1709,"column":7}},"378":{"start":{"line":1703,"column":8},"end":{"line":1703,"column":33}},"379":{"start":{"line":1706,"column":8},"end":{"line":1708,"column":9}},"380":{"start":{"line":1707,"column":10},"end":{"line":1707,"column":27}},"381":{"start":{"line":1711,"column":6},"end":{"line":1713,"column":7}},"382":{"start":{"line":1712,"column":8},"end":{"line":1712,"column":21}},"383":{"start":{"line":1716,"column":4},"end":{"line":1716,"column":16}},"384":{"start":{"line":1732,"column":2},"end":{"line":1734,"column":4}},"385":{"start":{"line":1733,"column":4},"end":{"line":1733,"column":38}},"386":{"start":{"line":1739,"column":2},"end":{"line":1741,"column":3}},"387":{"start":{"line":1740,"column":4},"end":{"line":1740,"column":25}},"388":{"start":{"line":1743,"column":2},"end":{"line":1743,"column":46}},"389":{"start":{"line":1745,"column":2},"end":{"line":1763,"column":4}},"390":{"start":{"line":1746,"column":4},"end":{"line":1749,"column":14}},"391":{"start":{"line":1751,"column":4},"end":{"line":1756,"column":5}},"392":{"start":{"line":1752,"column":6},"end":{"line":1752,"column":51}},"393":{"start":{"line":1753,"column":6},"end":{"line":1755,"column":7}},"394":{"start":{"line":1754,"column":8},"end":{"line":1754,"column":21}},"395":{"start":{"line":1758,"column":4},"end":{"line":1760,"column":5}},"396":{"start":{"line":1759,"column":6},"end":{"line":1759,"column":25}},"397":{"start":{"line":1762,"column":4},"end":{"line":1762,"column":16}},"398":{"start":{"line":1777,"column":2},"end":{"line":1779,"column":4}},"399":{"start":{"line":1778,"column":4},"end":{"line":1778,"column":39}},"400":{"start":{"line":1784,"column":2},"end":{"line":1786,"column":3}},"401":{"start":{"line":1785,"column":4},"end":{"line":1785,"column":25}},"402":{"start":{"line":1788,"column":2},"end":{"line":1788,"column":47}},"403":{"start":{"line":1790,"column":2},"end":{"line":1804,"column":4}},"404":{"start":{"line":1791,"column":4},"end":{"line":1791,"column":18}},"405":{"start":{"line":1793,"column":4},"end":{"line":1803,"column":7}},"406":{"start":{"line":1794,"column":6},"end":{"line":1796,"column":7}},"407":{"start":{"line":1795,"column":8},"end":{"line":1795,"column":42}},"408":{"start":{"line":1798,"column":6},"end":{"line":1800,"column":7}},"409":{"start":{"line":1799,"column":8},"end":{"line":1799,"column":38}},"410":{"start":{"line":1802,"column":6},"end":{"line":1802,"column":28}},"411":{"start":{"line":1816,"column":2},"end":{"line":1818,"column":4}},"412":{"start":{"line":1817,"column":4},"end":{"line":1817,"column":52}},"413":{"start":{"line":1817,"column":37},"end":{"line":1817,"column":48}},"414":{"start":{"line":1834,"column":2},"end":{"line":1836,"column":4}},"415":{"start":{"line":1835,"column":4},"end":{"line":1835,"column":68}},"416":{"start":{"line":1838,"column":2},"end":{"line":1840,"column":4}},"417":{"start":{"line":1839,"column":4},"end":{"line":1839,"column":47}},"418":{"start":{"line":1845,"column":2},"end":{"line":1848,"column":3}},"419":{"start":{"line":1846,"column":4},"end":{"line":1846,"column":25}},"420":{"start":{"line":1847,"column":4},"end":{"line":1847,"column":25}},"421":{"start":{"line":1850,"column":2},"end":{"line":1850,"column":45}},"422":{"start":{"line":1852,"column":2},"end":{"line":1860,"column":4}},"423":{"start":{"line":1853,"column":4},"end":{"line":1854,"column":14}},"424":{"start":{"line":1855,"column":4},"end":{"line":1859,"column":7}},"425":{"start":{"line":1856,"column":6},"end":{"line":1858,"column":7}},"426":{"start":{"line":1857,"column":8},"end":{"line":1857,"column":26}},"427":{"start":{"line":1875,"column":2},"end":{"line":1877,"column":4}},"428":{"start":{"line":1876,"column":4},"end":{"line":1876,"column":40}},"429":{"start":{"line":1896,"column":2},"end":{"line":1902,"column":4}},"430":{"start":{"line":1897,"column":4},"end":{"line":1901,"column":5}},"431":{"start":{"line":1898,"column":6},"end":{"line":1898,"column":83}},"432":{"start":{"line":1900,"column":6},"end":{"line":1900,"column":75}},"433":{"start":{"line":1907,"column":2},"end":{"line":1910,"column":3}},"434":{"start":{"line":1908,"column":4},"end":{"line":1908,"column":25}},"435":{"start":{"line":1909,"column":4},"end":{"line":1909,"column":25}},"436":{"start":{"line":1912,"column":2},"end":{"line":1912,"column":50}},"437":{"start":{"line":1914,"column":2},"end":{"line":1935,"column":4}},"438":{"start":{"line":1915,"column":4},"end":{"line":1917,"column":7}},"439":{"start":{"line":1916,"column":6},"end":{"line":1916,"column":60}},"440":{"start":{"line":1919,"column":4},"end":{"line":1920,"column":14}},"441":{"start":{"line":1922,"column":4},"end":{"line":1934,"column":7}},"442":{"start":{"line":1923,"column":6},"end":{"line":1923,"column":31}},"443":{"start":{"line":1924,"column":6},"end":{"line":1929,"column":9}},"444":{"start":{"line":1925,"column":8},"end":{"line":1928,"column":9}},"445":{"start":{"line":1926,"column":10},"end":{"line":1926,"column":32}},"446":{"start":{"line":1927,"column":10},"end":{"line":1927,"column":23}},"447":{"start":{"line":1931,"column":6},"end":{"line":1933,"column":7}},"448":{"start":{"line":1932,"column":8},"end":{"line":1932,"column":26}},"449":{"start":{"line":1940,"column":2},"end":{"line":1945,"column":3}},"450":{"start":{"line":1941,"column":4},"end":{"line":1941,"column":33}},"451":{"start":{"line":1942,"column":4},"end":{"line":1942,"column":29}},"452":{"start":{"line":1943,"column":4},"end":{"line":1943,"column":26}},"453":{"start":{"line":1944,"column":4},"end":{"line":1944,"column":34}},"454":{"start":{"line":1947,"column":2},"end":{"line":1949,"column":4}},"455":{"start":{"line":1948,"column":4},"end":{"line":1948,"column":29}},"456":{"start":{"line":1951,"column":2},"end":{"line":1967,"column":4}},"457":{"start":{"line":1952,"column":4},"end":{"line":1954,"column":16}},"458":{"start":{"line":1956,"column":4},"end":{"line":1959,"column":5}},"459":{"start":{"line":1957,"column":6},"end":{"line":1957,"column":52}},"460":{"start":{"line":1958,"column":6},"end":{"line":1958,"column":18}},"461":{"start":{"line":1961,"column":4},"end":{"line":1964,"column":5}},"462":{"start":{"line":1962,"column":6},"end":{"line":1962,"column":73}},"463":{"start":{"line":1963,"column":6},"end":{"line":1963,"column":18}},"464":{"start":{"line":1966,"column":4},"end":{"line":1966,"column":17}},"465":{"start":{"line":1972,"column":2},"end":{"line":1977,"column":3}},"466":{"start":{"line":1973,"column":4},"end":{"line":1973,"column":33}},"467":{"start":{"line":1974,"column":4},"end":{"line":1974,"column":34}},"468":{"start":{"line":1975,"column":4},"end":{"line":1975,"column":27}},"469":{"start":{"line":1976,"column":4},"end":{"line":1976,"column":34}},"470":{"start":{"line":1979,"column":2},"end":{"line":1981,"column":4}},"471":{"start":{"line":1980,"column":4},"end":{"line":1980,"column":29}},"472":{"start":{"line":1983,"column":2},"end":{"line":1998,"column":4}},"473":{"start":{"line":1984,"column":4},"end":{"line":1987,"column":16}},"474":{"start":{"line":1989,"column":4},"end":{"line":1996,"column":5}},"475":{"start":{"line":1990,"column":6},"end":{"line":1990,"column":35}},"476":{"start":{"line":1991,"column":6},"end":{"line":1995,"column":7}},"477":{"start":{"line":1992,"column":8},"end":{"line":1992,"column":27}},"478":{"start":{"line":1993,"column":8},"end":{"line":1993,"column":36}},"479":{"start":{"line":1994,"column":8},"end":{"line":1994,"column":20}},"480":{"start":{"line":1997,"column":4},"end":{"line":1997,"column":17}},"481":{"start":{"line":2000,"column":2},"end":{"line":2016,"column":4}},"482":{"start":{"line":2001,"column":4},"end":{"line":2003,"column":15}},"483":{"start":{"line":2005,"column":4},"end":{"line":2009,"column":5}},"484":{"start":{"line":2006,"column":6},"end":{"line":2008,"column":7}},"485":{"start":{"line":2007,"column":8},"end":{"line":2007,"column":21}},"486":{"start":{"line":2011,"column":4},"end":{"line":2015,"column":5}},"487":{"start":{"line":2012,"column":6},"end":{"line":2014,"column":7}},"488":{"start":{"line":2013,"column":8},"end":{"line":2013,"column":14}},"489":{"start":{"line":2018,"column":2},"end":{"line":2030,"column":4}},"490":{"start":{"line":2019,"column":4},"end":{"line":2021,"column":5}},"491":{"start":{"line":2020,"column":6},"end":{"line":2020,"column":18}},"492":{"start":{"line":2023,"column":4},"end":{"line":2027,"column":5}},"493":{"start":{"line":2024,"column":6},"end":{"line":2026,"column":7}},"494":{"start":{"line":2025,"column":8},"end":{"line":2025,"column":20}},"495":{"start":{"line":2029,"column":4},"end":{"line":2029,"column":17}},"496":{"start":{"line":2053,"column":2},"end":{"line":2059,"column":4}},"497":{"start":{"line":2054,"column":4},"end":{"line":2054,"column":42}},"498":{"start":{"line":2056,"column":4},"end":{"line":2058,"column":7}},"499":{"start":{"line":2057,"column":6},"end":{"line":2057,"column":31}},"500":{"start":{"line":2061,"column":2},"end":{"line":2063,"column":4}},"501":{"start":{"line":2062,"column":4},"end":{"line":2062,"column":33}},"502":{"start":{"line":2086,"column":2},"end":{"line":2097,"column":4}},"503":{"start":{"line":2087,"column":4},"end":{"line":2087,"column":48}},"504":{"start":{"line":2089,"column":4},"end":{"line":2089,"column":24}},"505":{"start":{"line":2090,"column":4},"end":{"line":2095,"column":7}},"506":{"start":{"line":2091,"column":6},"end":{"line":2094,"column":7}},"507":{"start":{"line":2092,"column":8},"end":{"line":2092,"column":23}},"508":{"start":{"line":2093,"column":8},"end":{"line":2093,"column":21}},"509":{"start":{"line":2096,"column":4},"end":{"line":2096,"column":19}},"510":{"start":{"line":2099,"column":2},"end":{"line":2101,"column":4}},"511":{"start":{"line":2100,"column":4},"end":{"line":2100,"column":32}},"512":{"start":{"line":2124,"column":2},"end":{"line":2126,"column":4}},"513":{"start":{"line":2125,"column":4},"end":{"line":2125,"column":32}},"514":{"start":{"line":2139,"column":2},"end":{"line":2141,"column":4}},"515":{"start":{"line":2140,"column":4},"end":{"line":2140,"column":23}},"516":{"start":{"line":2159,"column":2},"end":{"line":2168,"column":4}},"517":{"start":{"line":2160,"column":4},"end":{"line":2160,"column":24}},"518":{"start":{"line":2161,"column":4},"end":{"line":2166,"column":7}},"519":{"start":{"line":2162,"column":6},"end":{"line":2165,"column":7}},"520":{"start":{"line":2163,"column":8},"end":{"line":2163,"column":23}},"521":{"start":{"line":2164,"column":8},"end":{"line":2164,"column":21}},"522":{"start":{"line":2167,"column":4},"end":{"line":2167,"column":22}},"523":{"start":{"line":2184,"column":2},"end":{"line":2191,"column":4}},"524":{"start":{"line":2185,"column":4},"end":{"line":2186,"column":43}},"525":{"start":{"line":2187,"column":4},"end":{"line":2189,"column":5}},"526":{"start":{"line":2188,"column":6},"end":{"line":2188,"column":44}},"527":{"start":{"line":2190,"column":4},"end":{"line":2190,"column":17}},"528":{"start":{"line":2211,"column":2},"end":{"line":2226,"column":4}},"529":{"start":{"line":2212,"column":4},"end":{"line":2215,"column":10}},"530":{"start":{"line":2217,"column":4},"end":{"line":2224,"column":5}},"531":{"start":{"line":2218,"column":6},"end":{"line":2218,"column":32}},"532":{"start":{"line":2219,"column":6},"end":{"line":2223,"column":7}},"533":{"start":{"line":2220,"column":8},"end":{"line":2220,"column":22}},"534":{"start":{"line":2222,"column":8},"end":{"line":2222,"column":18}},"535":{"start":{"line":2225,"column":4},"end":{"line":2225,"column":17}},"536":{"start":{"line":2241,"column":2},"end":{"line":2243,"column":4}},"537":{"start":{"line":2242,"column":4},"end":{"line":2242,"column":38}},"538":{"start":{"line":2274,"column":2},"end":{"line":2289,"column":4}},"539":{"start":{"line":2275,"column":4},"end":{"line":2277,"column":5}},"540":{"start":{"line":2276,"column":6},"end":{"line":2276,"column":57}},"541":{"start":{"line":2279,"column":4},"end":{"line":2281,"column":7}},"542":{"start":{"line":2280,"column":6},"end":{"line":2280,"column":36}},"543":{"start":{"line":2284,"column":4},"end":{"line":2286,"column":5}},"544":{"start":{"line":2285,"column":6},"end":{"line":2285,"column":58}},"545":{"start":{"line":2285,"column":42},"end":{"line":2285,"column":54}},"546":{"start":{"line":2288,"column":4},"end":{"line":2288,"column":16}},"547":{"start":{"line":2291,"column":2},"end":{"line":2294,"column":4}},"548":{"start":{"line":2293,"column":4},"end":{"line":2293,"column":41}},"549":{"start":{"line":2321,"column":2},"end":{"line":2333,"column":4}},"550":{"start":{"line":2322,"column":4},"end":{"line":2324,"column":5}},"551":{"start":{"line":2323,"column":6},"end":{"line":2323,"column":66}},"552":{"start":{"line":2328,"column":4},"end":{"line":2329,"column":33}},"553":{"start":{"line":2330,"column":4},"end":{"line":2332,"column":13}},"554":{"start":{"line":2331,"column":6},"end":{"line":2331,"column":35}},"555":{"start":{"line":2335,"column":2},"end":{"line":2337,"column":4}},"556":{"start":{"line":2336,"column":4},"end":{"line":2336,"column":46}},"557":{"start":{"line":2356,"column":2},"end":{"line":2364,"column":4}},"558":{"start":{"line":2357,"column":4},"end":{"line":2357,"column":36}},"559":{"start":{"line":2358,"column":4},"end":{"line":2362,"column":7}},"560":{"start":{"line":2359,"column":6},"end":{"line":2361,"column":7}},"561":{"start":{"line":2360,"column":8},"end":{"line":2360,"column":31}},"562":{"start":{"line":2363,"column":4},"end":{"line":2363,"column":30}},"563":{"start":{"line":2380,"column":2},"end":{"line":2386,"column":4}},"564":{"start":{"line":2381,"column":4},"end":{"line":2383,"column":5}},"565":{"start":{"line":2382,"column":6},"end":{"line":2382,"column":65}},"566":{"start":{"line":2385,"column":4},"end":{"line":2385,"column":43}},"567":{"start":{"line":2391,"column":2},"end":{"line":2394,"column":3}},"568":{"start":{"line":2392,"column":4},"end":{"line":2392,"column":28}},"569":{"start":{"line":2393,"column":4},"end":{"line":2393,"column":26}},"570":{"start":{"line":2396,"column":2},"end":{"line":2396,"column":45}},"571":{"start":{"line":2398,"column":2},"end":{"line":2400,"column":4}},"572":{"start":{"line":2399,"column":4},"end":{"line":2399,"column":60}},"573":{"start":{"line":2405,"column":2},"end":{"line":2408,"column":3}},"574":{"start":{"line":2406,"column":4},"end":{"line":2406,"column":43}},"575":{"start":{"line":2407,"column":4},"end":{"line":2407,"column":25}},"576":{"start":{"line":2410,"column":2},"end":{"line":2412,"column":4}},"577":{"start":{"line":2411,"column":4},"end":{"line":2411,"column":29}},"578":{"start":{"line":2414,"column":2},"end":{"line":2429,"column":4}},"579":{"start":{"line":2415,"column":4},"end":{"line":2417,"column":23}},"580":{"start":{"line":2419,"column":4},"end":{"line":2421,"column":5}},"581":{"start":{"line":2420,"column":6},"end":{"line":2420,"column":37}},"582":{"start":{"line":2423,"column":4},"end":{"line":2425,"column":5}},"583":{"start":{"line":2424,"column":6},"end":{"line":2424,"column":19}},"584":{"start":{"line":2427,"column":4},"end":{"line":2427,"column":30}},"585":{"start":{"line":2428,"column":4},"end":{"line":2428,"column":16}},"586":{"start":{"line":2446,"column":2},"end":{"line":2448,"column":4}},"587":{"start":{"line":2447,"column":4},"end":{"line":2447,"column":46}},"588":{"start":{"line":2453,"column":2},"end":{"line":2456,"column":3}},"589":{"start":{"line":2454,"column":4},"end":{"line":2454,"column":25}},"590":{"start":{"line":2455,"column":4},"end":{"line":2455,"column":29}},"591":{"start":{"line":2458,"column":2},"end":{"line":2458,"column":44}},"592":{"start":{"line":2460,"column":2},"end":{"line":2466,"column":4}},"593":{"start":{"line":2461,"column":4},"end":{"line":2461,"column":33}},"594":{"start":{"line":2462,"column":4},"end":{"line":2465,"column":7}},"595":{"start":{"line":2463,"column":6},"end":{"line":2463,"column":21}},"596":{"start":{"line":2464,"column":6},"end":{"line":2464,"column":22}},"597":{"start":{"line":2488,"column":2},"end":{"line":2490,"column":4}},"598":{"start":{"line":2489,"column":4},"end":{"line":2489,"column":42}},"599":{"start":{"line":2492,"column":2},"end":{"line":2494,"column":4}},"600":{"start":{"line":2493,"column":4},"end":{"line":2493,"column":32}},"601":{"start":{"line":2516,"column":2},"end":{"line":2527,"column":4}},"602":{"start":{"line":2517,"column":4},"end":{"line":2519,"column":5}},"603":{"start":{"line":2518,"column":6},"end":{"line":2518,"column":33}},"604":{"start":{"line":2521,"column":4},"end":{"line":2526,"column":7}},"605":{"start":{"line":2522,"column":6},"end":{"line":2524,"column":7}},"606":{"start":{"line":2523,"column":8},"end":{"line":2523,"column":23}},"607":{"start":{"line":2525,"column":6},"end":{"line":2525,"column":45}},"608":{"start":{"line":2529,"column":2},"end":{"line":2532,"column":4}},"609":{"start":{"line":2530,"column":4},"end":{"line":2530,"column":38}},"610":{"start":{"line":2531,"column":4},"end":{"line":2531,"column":83}},"611":{"start":{"line":2531,"column":40},"end":{"line":2531,"column":79}},"612":{"start":{"line":2556,"column":2},"end":{"line":2567,"column":4}},"613":{"start":{"line":2557,"column":4},"end":{"line":2559,"column":5}},"614":{"start":{"line":2558,"column":6},"end":{"line":2558,"column":33}},"615":{"start":{"line":2561,"column":4},"end":{"line":2566,"column":7}},"616":{"start":{"line":2562,"column":6},"end":{"line":2564,"column":7}},"617":{"start":{"line":2563,"column":8},"end":{"line":2563,"column":23}},"618":{"start":{"line":2565,"column":6},"end":{"line":2565,"column":45}},"619":{"start":{"line":2569,"column":2},"end":{"line":2572,"column":4}},"620":{"start":{"line":2570,"column":4},"end":{"line":2570,"column":38}},"621":{"start":{"line":2571,"column":4},"end":{"line":2571,"column":83}},"622":{"start":{"line":2571,"column":40},"end":{"line":2571,"column":79}},"623":{"start":{"line":2588,"column":2},"end":{"line":2594,"column":4}},"624":{"start":{"line":2589,"column":4},"end":{"line":2591,"column":5}},"625":{"start":{"line":2590,"column":6},"end":{"line":2590,"column":33}},"626":{"start":{"line":2593,"column":4},"end":{"line":2593,"column":60}},"627":{"start":{"line":2593,"column":40},"end":{"line":2593,"column":53}},"628":{"start":{"line":2596,"column":2},"end":{"line":2599,"column":4}},"629":{"start":{"line":2597,"column":4},"end":{"line":2597,"column":38}},"630":{"start":{"line":2598,"column":4},"end":{"line":2598,"column":69}},"631":{"start":{"line":2598,"column":40},"end":{"line":2598,"column":62}},"632":{"start":{"line":2623,"column":2},"end":{"line":2632,"column":4}},"633":{"start":{"line":2624,"column":4},"end":{"line":2624,"column":75}},"634":{"start":{"line":2626,"column":4},"end":{"line":2631,"column":11}},"635":{"start":{"line":2627,"column":6},"end":{"line":2629,"column":7}},"636":{"start":{"line":2628,"column":8},"end":{"line":2628,"column":25}},"637":{"start":{"line":2630,"column":6},"end":{"line":2630,"column":21}},"638":{"start":{"line":2634,"column":2},"end":{"line":2636,"column":4}},"639":{"start":{"line":2635,"column":4},"end":{"line":2635,"column":32}},"640":{"start":{"line":2651,"column":2},"end":{"line":2653,"column":4}},"641":{"start":{"line":2652,"column":4},"end":{"line":2652,"column":45}},"642":{"start":{"line":2658,"column":2},"end":{"line":2662,"column":3}},"643":{"start":{"line":2659,"column":4},"end":{"line":2659,"column":25}},"644":{"start":{"line":2660,"column":4},"end":{"line":2660,"column":24}},"645":{"start":{"line":2661,"column":4},"end":{"line":2661,"column":48}},"646":{"start":{"line":2664,"column":2},"end":{"line":2664,"column":56}},"647":{"start":{"line":2666,"column":2},"end":{"line":2675,"column":4}},"648":{"start":{"line":2667,"column":4},"end":{"line":2668,"column":14}},"649":{"start":{"line":2670,"column":4},"end":{"line":2674,"column":7}},"650":{"start":{"line":2671,"column":6},"end":{"line":2673,"column":7}},"651":{"start":{"line":2672,"column":8},"end":{"line":2672,"column":26}},"652":{"start":{"line":2677,"column":2},"end":{"line":2687,"column":4}},"653":{"start":{"line":2678,"column":4},"end":{"line":2680,"column":14}},"654":{"start":{"line":2682,"column":4},"end":{"line":2686,"column":7}},"655":{"start":{"line":2683,"column":6},"end":{"line":2685,"column":7}},"656":{"start":{"line":2684,"column":8},"end":{"line":2684,"column":26}},"657":{"start":{"line":2689,"column":2},"end":{"line":2695,"column":3}},"658":{"start":{"line":2690,"column":4},"end":{"line":2694,"column":5}},"659":{"start":{"line":2691,"column":6},"end":{"line":2691,"column":65}},"660":{"start":{"line":2693,"column":6},"end":{"line":2693,"column":68}},"661":{"start":{"line":2705,"column":2},"end":{"line":2708,"column":3}},"662":{"start":{"line":2706,"column":4},"end":{"line":2706,"column":25}},"663":{"start":{"line":2707,"column":4},"end":{"line":2707,"column":24}},"664":{"start":{"line":2710,"column":2},"end":{"line":2710,"column":50}},"665":{"start":{"line":2712,"column":2},"end":{"line":2732,"column":4}},"666":{"start":{"line":2713,"column":4},"end":{"line":2714,"column":15}},"667":{"start":{"line":2716,"column":4},"end":{"line":2719,"column":7}},"668":{"start":{"line":2717,"column":6},"end":{"line":2717,"column":10}},"669":{"start":{"line":2718,"column":6},"end":{"line":2718,"column":34}},"670":{"start":{"line":2721,"column":4},"end":{"line":2723,"column":5}},"671":{"start":{"line":2722,"column":6},"end":{"line":2722,"column":19}},"672":{"start":{"line":2725,"column":4},"end":{"line":2729,"column":5}},"673":{"start":{"line":2726,"column":6},"end":{"line":2728,"column":7}},"674":{"start":{"line":2727,"column":8},"end":{"line":2727,"column":21}},"675":{"start":{"line":2731,"column":4},"end":{"line":2731,"column":16}},"676":{"start":{"line":2831,"column":2},"end":{"line":2831,"column":33}},"677":{"start":{"line":2833,"column":2},"end":{"line":2833,"column":47}},"678":{"start":{"line":2864,"column":2},"end":{"line":2870,"column":4}},"679":{"start":{"line":2865,"column":4},"end":{"line":2867,"column":5}},"680":{"start":{"line":2866,"column":6},"end":{"line":2866,"column":85}},"681":{"start":{"line":2869,"column":4},"end":{"line":2869,"column":72}},"682":{"start":{"line":2886,"column":2},"end":{"line":2888,"column":4}},"683":{"start":{"line":2887,"column":4},"end":{"line":2887,"column":30}},"684":{"start":{"line":2903,"column":2},"end":{"line":2905,"column":4}},"685":{"start":{"line":2904,"column":4},"end":{"line":2904,"column":32}},"686":{"start":{"line":2910,"column":2},"end":{"line":2912,"column":4}},"687":{"start":{"line":2911,"column":4},"end":{"line":2911,"column":16}},"688":{"start":{"line":2917,"column":2},"end":{"line":2919,"column":4}},"689":{"start":{"line":2918,"column":4},"end":{"line":2918,"column":37}},"690":{"start":{"line":2928,"column":2},"end":{"line":2931,"column":3}},"691":{"start":{"line":2929,"column":4},"end":{"line":2929,"column":29}},"692":{"start":{"line":2930,"column":4},"end":{"line":2930,"column":23}},"693":{"start":{"line":2933,"column":2},"end":{"line":2935,"column":4}},"694":{"start":{"line":2934,"column":4},"end":{"line":2934,"column":41}},"695":{"start":{"line":2937,"column":2},"end":{"line":2944,"column":4}},"696":{"start":{"line":2938,"column":4},"end":{"line":2940,"column":5}},"697":{"start":{"line":2939,"column":6},"end":{"line":2939,"column":19}},"698":{"start":{"line":2942,"column":4},"end":{"line":2942,"column":17}},"699":{"start":{"line":2943,"column":4},"end":{"line":2943,"column":16}},"700":{"start":{"line":2949,"column":2},"end":{"line":2960,"column":4}},"701":{"start":{"line":2950,"column":4},"end":{"line":2951,"column":15}},"702":{"start":{"line":2953,"column":4},"end":{"line":2957,"column":5}},"703":{"start":{"line":2954,"column":6},"end":{"line":2956,"column":7}},"704":{"start":{"line":2955,"column":8},"end":{"line":2955,"column":21}},"705":{"start":{"line":2959,"column":4},"end":{"line":2959,"column":16}},"706":{"start":{"line":2973,"column":2},"end":{"line":2975,"column":4}},"707":{"start":{"line":2974,"column":4},"end":{"line":2974,"column":32}},"708":{"start":{"line":2988,"column":2},"end":{"line":2990,"column":4}},"709":{"start":{"line":2989,"column":4},"end":{"line":2989,"column":26}},"710":{"start":{"line":3003,"column":2},"end":{"line":3005,"column":4}},"711":{"start":{"line":3004,"column":4},"end":{"line":3004,"column":38}},"712":{"start":{"line":3018,"column":2},"end":{"line":3020,"column":4}},"713":{"start":{"line":3019,"column":4},"end":{"line":3019,"column":23}},"714":{"start":{"line":3040,"column":2},"end":{"line":3057,"column":4}},"715":{"start":{"line":3041,"column":4},"end":{"line":3041,"column":31}},"716":{"start":{"line":3043,"column":4},"end":{"line":3045,"column":5}},"717":{"start":{"line":3044,"column":6},"end":{"line":3044,"column":29}},"718":{"start":{"line":3047,"column":4},"end":{"line":3047,"column":34}},"719":{"start":{"line":3049,"column":4},"end":{"line":3054,"column":5}},"720":{"start":{"line":3050,"column":6},"end":{"line":3052,"column":7}},"721":{"start":{"line":3051,"column":8},"end":{"line":3051,"column":27}},"722":{"start":{"line":3053,"column":6},"end":{"line":3053,"column":40}},"723":{"start":{"line":3056,"column":4},"end":{"line":3056,"column":18}},"724":{"start":{"line":3068,"column":2},"end":{"line":3070,"column":4}},"725":{"start":{"line":3069,"column":4},"end":{"line":3069,"column":66}},"726":{"start":{"line":3075,"column":2},"end":{"line":3078,"column":3}},"727":{"start":{"line":3076,"column":4},"end":{"line":3076,"column":25}},"728":{"start":{"line":3077,"column":4},"end":{"line":3077,"column":24}},"729":{"start":{"line":3080,"column":2},"end":{"line":3080,"column":60}},"730":{"start":{"line":3082,"column":2},"end":{"line":3088,"column":4}},"731":{"start":{"line":3083,"column":4},"end":{"line":3085,"column":5}},"732":{"start":{"line":3084,"column":6},"end":{"line":3084,"column":23}},"733":{"start":{"line":3087,"column":4},"end":{"line":3087,"column":45}},"734":{"start":{"line":3093,"column":2},"end":{"line":3095,"column":4}},"735":{"start":{"line":3094,"column":4},"end":{"line":3094,"column":71}},"736":{"start":{"line":3100,"column":2},"end":{"line":3103,"column":3}},"737":{"start":{"line":3101,"column":4},"end":{"line":3101,"column":27}},"738":{"start":{"line":3102,"column":4},"end":{"line":3102,"column":29}},"739":{"start":{"line":3105,"column":2},"end":{"line":3105,"column":61}},"740":{"start":{"line":3107,"column":2},"end":{"line":3123,"column":4}},"741":{"start":{"line":3108,"column":4},"end":{"line":3113,"column":10}},"742":{"start":{"line":3115,"column":4},"end":{"line":3120,"column":5}},"743":{"start":{"line":3116,"column":6},"end":{"line":3116,"column":24}},"744":{"start":{"line":3117,"column":6},"end":{"line":3119,"column":7}},"745":{"start":{"line":3118,"column":8},"end":{"line":3118,"column":21}},"746":{"start":{"line":3122,"column":4},"end":{"line":3122,"column":16}},"747":{"start":{"line":3134,"column":2},"end":{"line":3136,"column":4}},"748":{"start":{"line":3135,"column":4},"end":{"line":3135,"column":45}},"749":{"start":{"line":3141,"column":2},"end":{"line":3143,"column":3}},"750":{"start":{"line":3142,"column":4},"end":{"line":3142,"column":25}},"751":{"start":{"line":3145,"column":2},"end":{"line":3145,"column":62}},"752":{"start":{"line":3147,"column":2},"end":{"line":3149,"column":4}},"753":{"start":{"line":3148,"column":4},"end":{"line":3148,"column":50}},"754":{"start":{"line":3160,"column":2},"end":{"line":3166,"column":4}},"755":{"start":{"line":3161,"column":4},"end":{"line":3163,"column":5}},"756":{"start":{"line":3162,"column":6},"end":{"line":3162,"column":25}},"757":{"start":{"line":3165,"column":4},"end":{"line":3165,"column":48}},"758":{"start":{"line":3171,"column":2},"end":{"line":3174,"column":3}},"759":{"start":{"line":3172,"column":4},"end":{"line":3172,"column":25}},"760":{"start":{"line":3173,"column":4},"end":{"line":3173,"column":24}},"761":{"start":{"line":3176,"column":2},"end":{"line":3176,"column":58}},"762":{"start":{"line":3178,"column":2},"end":{"line":3181,"column":4}},"763":{"start":{"line":3179,"column":4},"end":{"line":3179,"column":44}},"764":{"start":{"line":3180,"column":4},"end":{"line":3180,"column":66}},"765":{"start":{"line":3192,"column":2},"end":{"line":3194,"column":4}},"766":{"start":{"line":3193,"column":4},"end":{"line":3193,"column":48}},"767":{"start":{"line":3199,"column":2},"end":{"line":3202,"column":3}},"768":{"start":{"line":3200,"column":4},"end":{"line":3200,"column":25}},"769":{"start":{"line":3201,"column":4},"end":{"line":3201,"column":56}},"770":{"start":{"line":3204,"column":2},"end":{"line":3204,"column":58}},"771":{"start":{"line":3206,"column":2},"end":{"line":3208,"column":4}},"772":{"start":{"line":3207,"column":4},"end":{"line":3207,"column":43}},"773":{"start":{"line":3210,"column":2},"end":{"line":3213,"column":4}},"774":{"start":{"line":3211,"column":4},"end":{"line":3211,"column":44}},"775":{"start":{"line":3212,"column":4},"end":{"line":3212,"column":70}},"776":{"start":{"line":3226,"column":2},"end":{"line":3232,"column":4}},"777":{"start":{"line":3227,"column":4},"end":{"line":3231,"column":5}},"778":{"start":{"line":3228,"column":6},"end":{"line":3228,"column":84}},"779":{"start":{"line":3230,"column":6},"end":{"line":3230,"column":62}},"780":{"start":{"line":3237,"column":2},"end":{"line":3240,"column":3}},"781":{"start":{"line":3238,"column":4},"end":{"line":3238,"column":25}},"782":{"start":{"line":3239,"column":4},"end":{"line":3239,"column":24}},"783":{"start":{"line":3242,"column":2},"end":{"line":3242,"column":66}},"784":{"start":{"line":3244,"column":2},"end":{"line":3251,"column":4}},"785":{"start":{"line":3245,"column":4},"end":{"line":3245,"column":44}},"786":{"start":{"line":3246,"column":4},"end":{"line":3250,"column":5}},"787":{"start":{"line":3247,"column":6},"end":{"line":3247,"column":32}},"788":{"start":{"line":3249,"column":6},"end":{"line":3249,"column":42}},"789":{"start":{"line":3253,"column":2},"end":{"line":3255,"column":4}},"790":{"start":{"line":3254,"column":4},"end":{"line":3254,"column":52}},"791":{"start":{"line":3260,"column":2},"end":{"line":3262,"column":4}},"792":{"start":{"line":3261,"column":4},"end":{"line":3261,"column":66}},"793":{"start":{"line":3268,"column":2},"end":{"line":3272,"column":3}},"794":{"start":{"line":3269,"column":4},"end":{"line":3269,"column":25}},"795":{"start":{"line":3270,"column":4},"end":{"line":3270,"column":43}},"796":{"start":{"line":3271,"column":4},"end":{"line":3271,"column":24}},"797":{"start":{"line":3274,"column":2},"end":{"line":3274,"column":51}},"798":{"start":{"line":3276,"column":2},"end":{"line":3298,"column":4}},"799":{"start":{"line":3279,"column":4},"end":{"line":3286,"column":14}},"800":{"start":{"line":3288,"column":4},"end":{"line":3297,"column":5}},"801":{"start":{"line":3289,"column":6},"end":{"line":3289,"column":28}},"802":{"start":{"line":3290,"column":6},"end":{"line":3290,"column":25}},"803":{"start":{"line":3291,"column":6},"end":{"line":3296,"column":7}},"804":{"start":{"line":3292,"column":8},"end":{"line":3292,"column":24}},"805":{"start":{"line":3293,"column":8},"end":{"line":3295,"column":9}},"806":{"start":{"line":3294,"column":10},"end":{"line":3294,"column":23}},"807":{"start":{"line":3300,"column":2},"end":{"line":3300,"column":79}},"808":{"start":{"line":3302,"column":2},"end":{"line":3308,"column":3}},"809":{"start":{"line":3303,"column":4},"end":{"line":3307,"column":5}},"810":{"start":{"line":3304,"column":6},"end":{"line":3304,"column":60}},"811":{"start":{"line":3306,"column":6},"end":{"line":3306,"column":43}},"812":{"start":{"line":3313,"column":2},"end":{"line":3313,"column":46}},"813":{"start":{"line":3315,"column":2},"end":{"line":3324,"column":4}},"814":{"start":{"line":3319,"column":4},"end":{"line":3321,"column":5}},"815":{"start":{"line":3320,"column":6},"end":{"line":3320,"column":48}},"816":{"start":{"line":3323,"column":4},"end":{"line":3323,"column":25}},"817":{"start":{"line":3326,"column":2},"end":{"line":3328,"column":4}},"818":{"start":{"line":3327,"column":4},"end":{"line":3327,"column":61}},"819":{"start":{"line":3330,"column":2},"end":{"line":3344,"column":4}},"820":{"start":{"line":3331,"column":4},"end":{"line":3332,"column":44}},"821":{"start":{"line":3334,"column":4},"end":{"line":3341,"column":5}},"822":{"start":{"line":3335,"column":6},"end":{"line":3338,"column":7}},"823":{"start":{"line":3336,"column":8},"end":{"line":3336,"column":29}},"824":{"start":{"line":3337,"column":8},"end":{"line":3337,"column":21}},"825":{"start":{"line":3340,"column":6},"end":{"line":3340,"column":36}},"826":{"start":{"line":3343,"column":4},"end":{"line":3343,"column":16}},"827":{"start":{"line":3346,"column":2},"end":{"line":3358,"column":4}},"828":{"start":{"line":3347,"column":4},"end":{"line":3347,"column":25}},"829":{"start":{"line":3349,"column":4},"end":{"line":3351,"column":5}},"830":{"start":{"line":3350,"column":6},"end":{"line":3350,"column":21}},"831":{"start":{"line":3353,"column":4},"end":{"line":3355,"column":5}},"832":{"start":{"line":3354,"column":6},"end":{"line":3354,"column":23}},"833":{"start":{"line":3357,"column":4},"end":{"line":3357,"column":19}},"834":{"start":{"line":3360,"column":2},"end":{"line":3366,"column":4}},"835":{"start":{"line":3361,"column":4},"end":{"line":3363,"column":5}},"836":{"start":{"line":3362,"column":6},"end":{"line":3362,"column":31}},"837":{"start":{"line":3365,"column":4},"end":{"line":3365,"column":28}},"838":{"start":{"line":3368,"column":2},"end":{"line":3374,"column":4}},"839":{"start":{"line":3369,"column":4},"end":{"line":3371,"column":5}},"840":{"start":{"line":3370,"column":6},"end":{"line":3370,"column":26}},"841":{"start":{"line":3373,"column":4},"end":{"line":3373,"column":45}},"842":{"start":{"line":3376,"column":2},"end":{"line":3382,"column":4}},"843":{"start":{"line":3377,"column":4},"end":{"line":3379,"column":5}},"844":{"start":{"line":3378,"column":6},"end":{"line":3378,"column":31}},"845":{"start":{"line":3381,"column":4},"end":{"line":3381,"column":30}},"846":{"start":{"line":3391,"column":2},"end":{"line":3393,"column":3}},"847":{"start":{"line":3392,"column":4},"end":{"line":3392,"column":25}},"848":{"start":{"line":3395,"column":2},"end":{"line":3395,"column":51}},"849":{"start":{"line":3397,"column":2},"end":{"line":3399,"column":4}},"850":{"start":{"line":3398,"column":4},"end":{"line":3398,"column":16}},"851":{"start":{"line":3401,"column":2},"end":{"line":3403,"column":4}},"852":{"start":{"line":3402,"column":4},"end":{"line":3402,"column":17}},"853":{"start":{"line":3411,"column":2},"end":{"line":3413,"column":4}},"854":{"start":{"line":3412,"column":4},"end":{"line":3412,"column":26}},"855":{"start":{"line":3420,"column":2},"end":{"line":3422,"column":4}},"856":{"start":{"line":3421,"column":4},"end":{"line":3421,"column":30}},"857":{"start":{"line":3427,"column":2},"end":{"line":3429,"column":4}},"858":{"start":{"line":3428,"column":4},"end":{"line":3428,"column":36}},"859":{"start":{"line":3434,"column":2},"end":{"line":3436,"column":4}},"860":{"start":{"line":3435,"column":4},"end":{"line":3435,"column":63}},"861":{"start":{"line":3441,"column":2},"end":{"line":3443,"column":4}},"862":{"start":{"line":3442,"column":4},"end":{"line":3442,"column":68}},"863":{"start":{"line":3448,"column":2},"end":{"line":3450,"column":4}},"864":{"start":{"line":3449,"column":4},"end":{"line":3449,"column":47}},"865":{"start":{"line":3457,"column":2},"end":{"line":3463,"column":4}},"866":{"start":{"line":3458,"column":4},"end":{"line":3462,"column":5}},"867":{"start":{"line":3459,"column":6},"end":{"line":3459,"column":75}},"868":{"start":{"line":3461,"column":6},"end":{"line":3461,"column":71}},"869":{"start":{"line":3468,"column":2},"end":{"line":3470,"column":4}},"870":{"start":{"line":3469,"column":4},"end":{"line":3469,"column":32}},"871":{"start":{"line":3475,"column":2},"end":{"line":3478,"column":3}},"872":{"start":{"line":3476,"column":4},"end":{"line":3476,"column":25}},"873":{"start":{"line":3477,"column":4},"end":{"line":3477,"column":24}},"874":{"start":{"line":3480,"column":2},"end":{"line":3480,"column":57}},"875":{"start":{"line":3482,"column":2},"end":{"line":3490,"column":4}},"876":{"start":{"line":3483,"column":4},"end":{"line":3483,"column":36}},"877":{"start":{"line":3485,"column":4},"end":{"line":3487,"column":5}},"878":{"start":{"line":3486,"column":6},"end":{"line":3486,"column":23}},"879":{"start":{"line":3489,"column":4},"end":{"line":3489,"column":33}},"880":{"start":{"line":3492,"column":2},"end":{"line":3494,"column":4}},"881":{"start":{"line":3493,"column":4},"end":{"line":3493,"column":37}},"882":{"start":{"line":3496,"column":2},"end":{"line":3509,"column":4}},"883":{"start":{"line":3497,"column":4},"end":{"line":3500,"column":15}},"884":{"start":{"line":3502,"column":4},"end":{"line":3506,"column":5}},"885":{"start":{"line":3503,"column":6},"end":{"line":3505,"column":7}},"886":{"start":{"line":3504,"column":8},"end":{"line":3504,"column":21}},"887":{"start":{"line":3508,"column":4},"end":{"line":3508,"column":16}},"888":{"start":{"line":3514,"column":2},"end":{"line":3517,"column":3}},"889":{"start":{"line":3515,"column":4},"end":{"line":3515,"column":27}},"890":{"start":{"line":3516,"column":4},"end":{"line":3516,"column":29}},"891":{"start":{"line":3519,"column":2},"end":{"line":3519,"column":58}},"892":{"start":{"line":3521,"column":2},"end":{"line":3537,"column":4}},"893":{"start":{"line":3522,"column":4},"end":{"line":3527,"column":10}},"894":{"start":{"line":3529,"column":4},"end":{"line":3534,"column":5}},"895":{"start":{"line":3530,"column":6},"end":{"line":3530,"column":20}},"896":{"start":{"line":3531,"column":6},"end":{"line":3533,"column":7}},"897":{"start":{"line":3532,"column":8},"end":{"line":3532,"column":21}},"898":{"start":{"line":3536,"column":4},"end":{"line":3536,"column":16}},"899":{"start":{"line":3542,"column":2},"end":{"line":3546,"column":3}},"900":{"start":{"line":3543,"column":4},"end":{"line":3543,"column":25}},"901":{"start":{"line":3544,"column":4},"end":{"line":3544,"column":50}},"902":{"start":{"line":3545,"column":4},"end":{"line":3545,"column":24}},"903":{"start":{"line":3548,"column":2},"end":{"line":3548,"column":48}},"904":{"start":{"line":3550,"column":2},"end":{"line":3570,"column":4}},"905":{"start":{"line":3551,"column":4},"end":{"line":3560,"column":14}},"906":{"start":{"line":3562,"column":4},"end":{"line":3567,"column":5}},"907":{"start":{"line":3563,"column":6},"end":{"line":3563,"column":24}},"908":{"start":{"line":3564,"column":6},"end":{"line":3566,"column":7}},"909":{"start":{"line":3565,"column":8},"end":{"line":3565,"column":21}},"910":{"start":{"line":3569,"column":4},"end":{"line":3569,"column":16}},"911":{"start":{"line":3572,"column":2},"end":{"line":3610,"column":4}},"912":{"start":{"line":3575,"column":4},"end":{"line":3582,"column":14}},"913":{"start":{"line":3584,"column":4},"end":{"line":3607,"column":5}},"914":{"start":{"line":3585,"column":6},"end":{"line":3585,"column":36}},"915":{"start":{"line":3586,"column":6},"end":{"line":3595,"column":7}},"916":{"start":{"line":3587,"column":8},"end":{"line":3587,"column":26}},"917":{"start":{"line":3588,"column":8},"end":{"line":3588,"column":27}},"918":{"start":{"line":3589,"column":8},"end":{"line":3594,"column":9}},"919":{"start":{"line":3590,"column":10},"end":{"line":3590,"column":26}},"920":{"start":{"line":3591,"column":10},"end":{"line":3593,"column":11}},"921":{"start":{"line":3592,"column":12},"end":{"line":3592,"column":25}},"922":{"start":{"line":3598,"column":6},"end":{"line":3606,"column":7}},"923":{"start":{"line":3599,"column":8},"end":{"line":3599,"column":26}},"924":{"start":{"line":3600,"column":8},"end":{"line":3605,"column":9}},"925":{"start":{"line":3601,"column":10},"end":{"line":3601,"column":28}},"926":{"start":{"line":3602,"column":10},"end":{"line":3604,"column":11}},"927":{"start":{"line":3603,"column":12},"end":{"line":3603,"column":25}},"928":{"start":{"line":3609,"column":4},"end":{"line":3609,"column":16}},"929":{"start":{"line":3612,"column":2},"end":{"line":3612,"column":76}},"930":{"start":{"line":3622,"column":2},"end":{"line":3630,"column":3}},"931":{"start":{"line":3623,"column":4},"end":{"line":3629,"column":5}},"932":{"start":{"line":3624,"column":6},"end":{"line":3624,"column":54}},"933":{"start":{"line":3625,"column":11},"end":{"line":3629,"column":5}},"934":{"start":{"line":3626,"column":6},"end":{"line":3626,"column":57}},"935":{"start":{"line":3628,"column":6},"end":{"line":3628,"column":55}},"936":{"start":{"line":3635,"column":2},"end":{"line":3638,"column":3}},"937":{"start":{"line":3636,"column":4},"end":{"line":3636,"column":25}},"938":{"start":{"line":3637,"column":4},"end":{"line":3637,"column":24}},"939":{"start":{"line":3640,"column":2},"end":{"line":3640,"column":57}},"940":{"start":{"line":3642,"column":2},"end":{"line":3651,"column":4}},"941":{"start":{"line":3643,"column":4},"end":{"line":3644,"column":37}},"942":{"start":{"line":3646,"column":4},"end":{"line":3650,"column":5}},"943":{"start":{"line":3647,"column":6},"end":{"line":3647,"column":23}},"944":{"start":{"line":3649,"column":6},"end":{"line":3649,"column":42}},"945":{"start":{"line":3653,"column":2},"end":{"line":3655,"column":4}},"946":{"start":{"line":3654,"column":4},"end":{"line":3654,"column":57}},"947":{"start":{"line":3657,"column":2},"end":{"line":3679,"column":4}},"948":{"start":{"line":3658,"column":4},"end":{"line":3663,"column":15}},"949":{"start":{"line":3665,"column":4},"end":{"line":3669,"column":5}},"950":{"start":{"line":3666,"column":6},"end":{"line":3668,"column":7}},"951":{"start":{"line":3667,"column":8},"end":{"line":3667,"column":21}},"952":{"start":{"line":3671,"column":4},"end":{"line":3671,"column":11}},"953":{"start":{"line":3672,"column":4},"end":{"line":3676,"column":5}},"954":{"start":{"line":3673,"column":6},"end":{"line":3675,"column":7}},"955":{"start":{"line":3674,"column":8},"end":{"line":3674,"column":21}},"956":{"start":{"line":3678,"column":4},"end":{"line":3678,"column":16}},"957":{"start":{"line":3700,"column":2},"end":{"line":3700,"column":34}},"958":{"start":{"line":3702,"column":2},"end":{"line":3702,"column":48}},"959":{"start":{"line":3745,"column":2},"end":{"line":3751,"column":4}},"960":{"start":{"line":3746,"column":4},"end":{"line":3748,"column":5}},"961":{"start":{"line":3747,"column":6},"end":{"line":3747,"column":87}},"962":{"start":{"line":3750,"column":4},"end":{"line":3750,"column":73}},"963":{"start":{"line":3753,"column":2},"end":{"line":3755,"column":4}},"964":{"start":{"line":3754,"column":4},"end":{"line":3754,"column":27}},"965":{"start":{"line":3774,"column":2},"end":{"line":3780,"column":4}},"966":{"start":{"line":3775,"column":4},"end":{"line":3777,"column":7}},"967":{"start":{"line":3776,"column":6},"end":{"line":3776,"column":29}},"968":{"start":{"line":3779,"column":4},"end":{"line":3779,"column":38}},"969":{"start":{"line":3795,"column":2},"end":{"line":3797,"column":4}},"970":{"start":{"line":3796,"column":4},"end":{"line":3796,"column":33}},"971":{"start":{"line":3799,"column":2},"end":{"line":3801,"column":3}},"972":{"start":{"line":3800,"column":4},"end":{"line":3800,"column":25}},"973":{"start":{"line":3803,"column":2},"end":{"line":3803,"column":41}},"974":{"start":{"line":3805,"column":2},"end":{"line":3811,"column":4}},"975":{"start":{"line":3806,"column":4},"end":{"line":3806,"column":15}},"976":{"start":{"line":3808,"column":4},"end":{"line":3810,"column":7}},"977":{"start":{"line":3809,"column":6},"end":{"line":3809,"column":24}},"978":{"start":{"line":3823,"column":2},"end":{"line":3825,"column":4}},"979":{"start":{"line":3824,"column":4},"end":{"line":3824,"column":36}},"980":{"start":{"line":3827,"column":2},"end":{"line":3829,"column":3}},"981":{"start":{"line":3828,"column":4},"end":{"line":3828,"column":25}},"982":{"start":{"line":3831,"column":2},"end":{"line":3831,"column":44}},"983":{"start":{"line":3833,"column":2},"end":{"line":3839,"column":4}},"984":{"start":{"line":3834,"column":4},"end":{"line":3834,"column":15}},"985":{"start":{"line":3836,"column":4},"end":{"line":3838,"column":7}},"986":{"start":{"line":3837,"column":6},"end":{"line":3837,"column":24}},"987":{"start":{"line":3849,"column":2},"end":{"line":3851,"column":4}},"988":{"start":{"line":3850,"column":4},"end":{"line":3850,"column":86}},"989":{"start":{"line":3853,"column":2},"end":{"line":3855,"column":4}},"990":{"start":{"line":3854,"column":4},"end":{"line":3854,"column":74}},"991":{"start":{"line":3857,"column":2},"end":{"line":3860,"column":3}},"992":{"start":{"line":3858,"column":4},"end":{"line":3858,"column":25}},"993":{"start":{"line":3859,"column":4},"end":{"line":3859,"column":29}},"994":{"start":{"line":3862,"column":2},"end":{"line":3862,"column":66}},"995":{"start":{"line":3864,"column":2},"end":{"line":3872,"column":4}},"996":{"start":{"line":3865,"column":4},"end":{"line":3865,"column":33}},"997":{"start":{"line":3867,"column":4},"end":{"line":3871,"column":7}},"998":{"start":{"line":3868,"column":6},"end":{"line":3870,"column":7}},"999":{"start":{"line":3869,"column":8},"end":{"line":3869,"column":24}},"1000":{"start":{"line":3878,"column":2},"end":{"line":3880,"column":4}},"1001":{"start":{"line":3879,"column":4},"end":{"line":3879,"column":16}},"1002":{"start":{"line":3899,"column":2},"end":{"line":3901,"column":4}},"1003":{"start":{"line":3900,"column":4},"end":{"line":3900,"column":43}},"1004":{"start":{"line":3903,"column":2},"end":{"line":3905,"column":4}},"1005":{"start":{"line":3904,"column":4},"end":{"line":3904,"column":30}},"1006":{"start":{"line":3910,"column":2},"end":{"line":3913,"column":3}},"1007":{"start":{"line":3911,"column":4},"end":{"line":3911,"column":25}},"1008":{"start":{"line":3912,"column":4},"end":{"line":3912,"column":24}},"1009":{"start":{"line":3915,"column":2},"end":{"line":3915,"column":54}},"1010":{"start":{"line":3917,"column":2},"end":{"line":3919,"column":4}},"1011":{"start":{"line":3918,"column":4},"end":{"line":3918,"column":70}},"1012":{"start":{"line":3921,"column":2},"end":{"line":3941,"column":4}},"1013":{"start":{"line":3922,"column":4},"end":{"line":3923,"column":23}},"1014":{"start":{"line":3925,"column":4},"end":{"line":3932,"column":7}},"1015":{"start":{"line":3926,"column":6},"end":{"line":3929,"column":7}},"1016":{"start":{"line":3927,"column":8},"end":{"line":3927,"column":20}},"1017":{"start":{"line":3928,"column":8},"end":{"line":3928,"column":21}},"1018":{"start":{"line":3931,"column":6},"end":{"line":3931,"column":22}},"1019":{"start":{"line":3934,"column":4},"end":{"line":3940,"column":5}},"1020":{"start":{"line":3935,"column":6},"end":{"line":3939,"column":9}},"1021":{"start":{"line":3936,"column":8},"end":{"line":3938,"column":9}},"1022":{"start":{"line":3937,"column":10},"end":{"line":3937,"column":23}},"1023":{"start":{"line":3962,"column":2},"end":{"line":3964,"column":4}},"1024":{"start":{"line":3963,"column":4},"end":{"line":3963,"column":48}},"1025":{"start":{"line":3969,"column":2},"end":{"line":3972,"column":3}},"1026":{"start":{"line":3970,"column":4},"end":{"line":3970,"column":32}},"1027":{"start":{"line":3971,"column":4},"end":{"line":3971,"column":34}},"1028":{"start":{"line":3974,"column":2},"end":{"line":3974,"column":56}},"1029":{"start":{"line":3976,"column":2},"end":{"line":3979,"column":4}},"1030":{"start":{"line":3977,"column":4},"end":{"line":3977,"column":43}},"1031":{"start":{"line":3978,"column":4},"end":{"line":3978,"column":77}},"1032":{"start":{"line":3981,"column":2},"end":{"line":4003,"column":4}},"1033":{"start":{"line":3982,"column":4},"end":{"line":3983,"column":23}},"1034":{"start":{"line":3985,"column":4},"end":{"line":3994,"column":7}},"1035":{"start":{"line":3986,"column":6},"end":{"line":3989,"column":7}},"1036":{"start":{"line":3987,"column":8},"end":{"line":3987,"column":20}},"1037":{"start":{"line":3988,"column":8},"end":{"line":3988,"column":21}},"1038":{"start":{"line":3991,"column":6},"end":{"line":3993,"column":7}},"1039":{"start":{"line":3992,"column":8},"end":{"line":3992,"column":24}},"1040":{"start":{"line":3996,"column":4},"end":{"line":4002,"column":5}},"1041":{"start":{"line":3997,"column":6},"end":{"line":4001,"column":9}},"1042":{"start":{"line":3998,"column":8},"end":{"line":4000,"column":9}},"1043":{"start":{"line":3999,"column":10},"end":{"line":3999,"column":23}},"1044":{"start":{"line":4016,"column":2},"end":{"line":4018,"column":4}},"1045":{"start":{"line":4017,"column":4},"end":{"line":4017,"column":38}},"1046":{"start":{"line":4023,"column":2},"end":{"line":4025,"column":3}},"1047":{"start":{"line":4024,"column":4},"end":{"line":4024,"column":25}},"1048":{"start":{"line":4027,"column":2},"end":{"line":4027,"column":56}},"1049":{"start":{"line":4029,"column":2},"end":{"line":4033,"column":4}},"1050":{"start":{"line":4030,"column":4},"end":{"line":4032,"column":7}},"1051":{"start":{"line":4031,"column":6},"end":{"line":4031,"column":28}},"1052":{"start":{"line":4112,"column":2},"end":{"line":4116,"column":4}},"1053":{"start":{"line":4113,"column":4},"end":{"line":4114,"column":38}},"1054":{"start":{"line":4115,"column":4},"end":{"line":4115,"column":76}},"1055":{"start":{"line":4121,"column":2},"end":{"line":4125,"column":3}},"1056":{"start":{"line":4122,"column":4},"end":{"line":4122,"column":26}},"1057":{"start":{"line":4123,"column":4},"end":{"line":4123,"column":26}},"1058":{"start":{"line":4124,"column":4},"end":{"line":4124,"column":27}},"1059":{"start":{"line":4127,"column":2},"end":{"line":4127,"column":54}},"1060":{"start":{"line":4129,"column":2},"end":{"line":4163,"column":4}},"1061":{"start":{"line":4130,"column":4},"end":{"line":4132,"column":21}},"1062":{"start":{"line":4134,"column":4},"end":{"line":4146,"column":7}},"1063":{"start":{"line":4135,"column":6},"end":{"line":4135,"column":25}},"1064":{"start":{"line":4137,"column":6},"end":{"line":4141,"column":9}},"1065":{"start":{"line":4138,"column":8},"end":{"line":4140,"column":9}},"1066":{"start":{"line":4139,"column":10},"end":{"line":4139,"column":47}},"1067":{"start":{"line":4143,"column":6},"end":{"line":4143,"column":23}},"1068":{"start":{"line":4145,"column":6},"end":{"line":4145,"column":29}},"1069":{"start":{"line":4148,"column":4},"end":{"line":4150,"column":5}},"1070":{"start":{"line":4149,"column":6},"end":{"line":4149,"column":19}},"1071":{"start":{"line":4152,"column":4},"end":{"line":4152,"column":23}},"1072":{"start":{"line":4154,"column":4},"end":{"line":4160,"column":7}},"1073":{"start":{"line":4155,"column":6},"end":{"line":4159,"column":7}},"1074":{"start":{"line":4156,"column":8},"end":{"line":4158,"column":9}},"1075":{"start":{"line":4157,"column":10},"end":{"line":4157,"column":57}},"1076":{"start":{"line":4162,"column":4},"end":{"line":4162,"column":36}},"1077":{"start":{"line":4176,"column":2},"end":{"line":4202,"column":3}},"1078":{"start":{"line":4177,"column":4},"end":{"line":4177,"column":21}},"1079":{"start":{"line":4179,"column":4},"end":{"line":4181,"column":5}},"1080":{"start":{"line":4180,"column":6},"end":{"line":4180,"column":15}},"1081":{"start":{"line":4184,"column":4},"end":{"line":4191,"column":5}},"1082":{"start":{"line":4185,"column":6},"end":{"line":4185,"column":18}},"1083":{"start":{"line":4186,"column":11},"end":{"line":4191,"column":5}},"1084":{"start":{"line":4187,"column":6},"end":{"line":4187,"column":18}},"1085":{"start":{"line":4190,"column":6},"end":{"line":4190,"column":15}},"1086":{"start":{"line":4193,"column":4},"end":{"line":4195,"column":5}},"1087":{"start":{"line":4194,"column":6},"end":{"line":4194,"column":52}},"1088":{"start":{"line":4196,"column":4},"end":{"line":4200,"column":5}},"1089":{"start":{"line":4197,"column":6},"end":{"line":4199,"column":7}},"1090":{"start":{"line":4198,"column":8},"end":{"line":4198,"column":31}},"1091":{"start":{"line":4201,"column":4},"end":{"line":4201,"column":18}},"1092":{"start":{"line":4214,"column":2},"end":{"line":4216,"column":3}},"1093":{"start":{"line":4215,"column":4},"end":{"line":4215,"column":51}},"1094":{"start":{"line":4236,"column":2},"end":{"line":4240,"column":4}},"1095":{"start":{"line":4237,"column":4},"end":{"line":4239,"column":41}},"1096":{"start":{"line":4238,"column":31},"end":{"line":4238,"column":63}},"1097":{"start":{"line":4239,"column":28},"end":{"line":4239,"column":37}},"1098":{"start":{"line":4242,"column":2},"end":{"line":4244,"column":4}},"1099":{"start":{"line":4243,"column":4},"end":{"line":4243,"column":28}},"1100":{"start":{"line":4264,"column":2},"end":{"line":4266,"column":4}},"1101":{"start":{"line":4265,"column":4},"end":{"line":4265,"column":46}},"1102":{"start":{"line":4271,"column":2},"end":{"line":4274,"column":3}},"1103":{"start":{"line":4272,"column":4},"end":{"line":4272,"column":29}},"1104":{"start":{"line":4273,"column":4},"end":{"line":4273,"column":33}},"1105":{"start":{"line":4276,"column":2},"end":{"line":4276,"column":52}},"1106":{"start":{"line":4278,"column":2},"end":{"line":4280,"column":4}},"1107":{"start":{"line":4279,"column":4},"end":{"line":4279,"column":82}},"1108":{"start":{"line":4282,"column":2},"end":{"line":4291,"column":4}},"1109":{"start":{"line":4283,"column":4},"end":{"line":4284,"column":37}},"1110":{"start":{"line":4286,"column":4},"end":{"line":4290,"column":7}},"1111":{"start":{"line":4287,"column":6},"end":{"line":4289,"column":7}},"1112":{"start":{"line":4288,"column":8},"end":{"line":4288,"column":30}},"1113":{"start":{"line":4315,"column":2},"end":{"line":4317,"column":4}},"1114":{"start":{"line":4316,"column":4},"end":{"line":4316,"column":46}},"1115":{"start":{"line":4322,"column":2},"end":{"line":4325,"column":3}},"1116":{"start":{"line":4323,"column":4},"end":{"line":4323,"column":29}},"1117":{"start":{"line":4324,"column":4},"end":{"line":4324,"column":33}},"1118":{"start":{"line":4327,"column":2},"end":{"line":4327,"column":52}},"1119":{"start":{"line":4329,"column":2},"end":{"line":4331,"column":4}},"1120":{"start":{"line":4330,"column":4},"end":{"line":4330,"column":82}},"1121":{"start":{"line":4333,"column":2},"end":{"line":4342,"column":4}},"1122":{"start":{"line":4334,"column":4},"end":{"line":4335,"column":37}},"1123":{"start":{"line":4337,"column":4},"end":{"line":4341,"column":7}},"1124":{"start":{"line":4338,"column":6},"end":{"line":4340,"column":7}},"1125":{"start":{"line":4339,"column":8},"end":{"line":4339,"column":30}},"1126":{"start":{"line":4360,"column":2},"end":{"line":4362,"column":4}},"1127":{"start":{"line":4361,"column":4},"end":{"line":4361,"column":55}},"1128":{"start":{"line":4361,"column":37},"end":{"line":4361,"column":51}},"1129":{"start":{"line":4379,"column":2},"end":{"line":4381,"column":4}},"1130":{"start":{"line":4380,"column":4},"end":{"line":4380,"column":34}},"1131":{"start":{"line":4398,"column":2},"end":{"line":4403,"column":4}},"1132":{"start":{"line":4399,"column":4},"end":{"line":4402,"column":11}},"1133":{"start":{"line":4400,"column":6},"end":{"line":4400,"column":26}},"1134":{"start":{"line":4401,"column":6},"end":{"line":4401,"column":20}},"1135":{"start":{"line":4409,"column":2},"end":{"line":4409,"column":55}},"1136":{"start":{"line":4418,"column":2},"end":{"line":4442,"column":4}},"1137":{"start":{"line":4419,"column":4},"end":{"line":4421,"column":15}},"1138":{"start":{"line":4423,"column":4},"end":{"line":4432,"column":10}},"1139":{"start":{"line":4424,"column":6},"end":{"line":4425,"column":25}},"1140":{"start":{"line":4426,"column":6},"end":{"line":4430,"column":7}},"1141":{"start":{"line":4427,"column":8},"end":{"line":4427,"column":29}},"1142":{"start":{"line":4429,"column":8},"end":{"line":4429,"column":31}},"1143":{"start":{"line":4431,"column":6},"end":{"line":4431,"column":21}},"1144":{"start":{"line":4434,"column":4},"end":{"line":4441,"column":15}},"1145":{"start":{"line":4435,"column":6},"end":{"line":4439,"column":7}},"1146":{"start":{"line":4436,"column":8},"end":{"line":4438,"column":9}},"1147":{"start":{"line":4437,"column":10},"end":{"line":4437,"column":23}},"1148":{"start":{"line":4440,"column":6},"end":{"line":4440,"column":18}},"1149":{"start":{"line":4444,"column":2},"end":{"line":4444,"column":55}},"1150":{"start":{"line":4446,"column":2},"end":{"line":4460,"column":4}},"1151":{"start":{"line":4447,"column":4},"end":{"line":4449,"column":21}},"1152":{"start":{"line":4451,"column":4},"end":{"line":4459,"column":7}},"1153":{"start":{"line":4452,"column":6},"end":{"line":4453,"column":25}},"1154":{"start":{"line":4455,"column":6},"end":{"line":4458,"column":7}},"1155":{"start":{"line":4456,"column":8},"end":{"line":4456,"column":27}},"1156":{"start":{"line":4457,"column":8},"end":{"line":4457,"column":28}},"1157":{"start":{"line":4462,"column":2},"end":{"line":4462,"column":55}},"1158":{"start":{"line":4464,"column":2},"end":{"line":4484,"column":4}},"1159":{"start":{"line":4465,"column":4},"end":{"line":4466,"column":21}},"1160":{"start":{"line":4468,"column":4},"end":{"line":4475,"column":7}},"1161":{"start":{"line":4469,"column":6},"end":{"line":4469,"column":25}},"1162":{"start":{"line":4470,"column":6},"end":{"line":4474,"column":7}},"1163":{"start":{"line":4471,"column":8},"end":{"line":4471,"column":25}},"1164":{"start":{"line":4473,"column":8},"end":{"line":4473,"column":26}},"1165":{"start":{"line":4477,"column":4},"end":{"line":4481,"column":5}},"1166":{"start":{"line":4478,"column":6},"end":{"line":4480,"column":7}},"1167":{"start":{"line":4479,"column":8},"end":{"line":4479,"column":21}},"1168":{"start":{"line":4483,"column":4},"end":{"line":4483,"column":16}},"1169":{"start":{"line":4517,"column":2},"end":{"line":4519,"column":4}},"1170":{"start":{"line":4518,"column":4},"end":{"line":4518,"column":78}},"1171":{"start":{"line":4524,"column":2},"end":{"line":4526,"column":3}},"1172":{"start":{"line":4525,"column":4},"end":{"line":4525,"column":25}},"1173":{"start":{"line":4528,"column":2},"end":{"line":4528,"column":53}},"1174":{"start":{"line":4530,"column":2},"end":{"line":4532,"column":4}},"1175":{"start":{"line":4531,"column":4},"end":{"line":4531,"column":16}},"1176":{"start":{"line":4534,"column":2},"end":{"line":4536,"column":4}},"1177":{"start":{"line":4535,"column":4},"end":{"line":4535,"column":17}},"1178":{"start":{"line":4538,"column":2},"end":{"line":4540,"column":4}},"1179":{"start":{"line":4539,"column":4},"end":{"line":4539,"column":28}},"1180":{"start":{"line":4542,"column":2},"end":{"line":4558,"column":4}},"1181":{"start":{"line":4543,"column":4},"end":{"line":4547,"column":14}},"1182":{"start":{"line":4549,"column":4},"end":{"line":4555,"column":5}},"1183":{"start":{"line":4550,"column":6},"end":{"line":4550,"column":24}},"1184":{"start":{"line":4552,"column":6},"end":{"line":4554,"column":7}},"1185":{"start":{"line":4553,"column":8},"end":{"line":4553,"column":21}},"1186":{"start":{"line":4557,"column":4},"end":{"line":4557,"column":16}},"1187":{"start":{"line":4589,"column":2},"end":{"line":4589,"column":34}},"1188":{"start":{"line":4591,"column":2},"end":{"line":4591,"column":57}},"1189":{"start":{"line":4624,"column":2},"end":{"line":4630,"column":4}},"1190":{"start":{"line":4625,"column":4},"end":{"line":4627,"column":5}},"1191":{"start":{"line":4626,"column":6},"end":{"line":4626,"column":86}},"1192":{"start":{"line":4629,"column":4},"end":{"line":4629,"column":73}},"1193":{"start":{"line":4632,"column":2},"end":{"line":4634,"column":4}},"1194":{"start":{"line":4633,"column":4},"end":{"line":4633,"column":27}},"1195":{"start":{"line":4642,"column":2},"end":{"line":4644,"column":4}},"1196":{"start":{"line":4643,"column":4},"end":{"line":4643,"column":34}},"1197":{"start":{"line":4649,"column":2},"end":{"line":4652,"column":3}},"1198":{"start":{"line":4650,"column":4},"end":{"line":4650,"column":31}},"1199":{"start":{"line":4651,"column":4},"end":{"line":4651,"column":20}},"1200":{"start":{"line":4654,"column":2},"end":{"line":4656,"column":4}},"1201":{"start":{"line":4655,"column":4},"end":{"line":4655,"column":42}},"1202":{"start":{"line":4658,"column":2},"end":{"line":4660,"column":4}},"1203":{"start":{"line":4659,"column":4},"end":{"line":4659,"column":49}},"1204":{"start":{"line":4675,"column":2},"end":{"line":4677,"column":4}},"1205":{"start":{"line":4676,"column":4},"end":{"line":4676,"column":23}},"1206":{"start":{"line":4692,"column":2},"end":{"line":4697,"column":4}},"1207":{"start":{"line":4693,"column":4},"end":{"line":4693,"column":30}},"1208":{"start":{"line":4694,"column":4},"end":{"line":4694,"column":30}},"1209":{"start":{"line":4694,"column":17},"end":{"line":4694,"column":28}},"1210":{"start":{"line":4696,"column":4},"end":{"line":4696,"column":30}},"1211":{"start":{"line":4717,"column":2},"end":{"line":4719,"column":4}},"1212":{"start":{"line":4718,"column":4},"end":{"line":4718,"column":48}},"1213":{"start":{"line":4724,"column":2},"end":{"line":4728,"column":3}},"1214":{"start":{"line":4725,"column":4},"end":{"line":4725,"column":25}},"1215":{"start":{"line":4726,"column":4},"end":{"line":4726,"column":37}},"1216":{"start":{"line":4727,"column":4},"end":{"line":4727,"column":23}},"1217":{"start":{"line":4730,"column":2},"end":{"line":4730,"column":53}},"1218":{"start":{"line":4732,"column":2},"end":{"line":4734,"column":4}},"1219":{"start":{"line":4733,"column":4},"end":{"line":4733,"column":43}},"1220":{"start":{"line":4736,"column":2},"end":{"line":4738,"column":4}},"1221":{"start":{"line":4737,"column":4},"end":{"line":4737,"column":91}},"1222":{"start":{"line":4753,"column":2},"end":{"line":4759,"column":4}},"1223":{"start":{"line":4754,"column":4},"end":{"line":4756,"column":5}},"1224":{"start":{"line":4755,"column":6},"end":{"line":4755,"column":28}},"1225":{"start":{"line":4758,"column":4},"end":{"line":4758,"column":36}},"1226":{"start":{"line":4774,"column":2},"end":{"line":4780,"column":4}},"1227":{"start":{"line":4775,"column":4},"end":{"line":4777,"column":5}},"1228":{"start":{"line":4776,"column":6},"end":{"line":4776,"column":44}},"1229":{"start":{"line":4779,"column":4},"end":{"line":4779,"column":49}},"1230":{"start":{"line":4782,"column":2},"end":{"line":4784,"column":4}},"1231":{"start":{"line":4783,"column":4},"end":{"line":4783,"column":33}},"1232":{"start":{"line":4804,"column":2},"end":{"line":4806,"column":4}},"1233":{"start":{"line":4805,"column":4},"end":{"line":4805,"column":58}},"1234":{"start":{"line":4826,"column":2},"end":{"line":4828,"column":4}},"1235":{"start":{"line":4827,"column":4},"end":{"line":4827,"column":62}},"1236":{"start":{"line":4842,"column":2},"end":{"line":4844,"column":4}},"1237":{"start":{"line":4843,"column":4},"end":{"line":4843,"column":42}},"1238":{"start":{"line":4858,"column":2},"end":{"line":4860,"column":4}},"1239":{"start":{"line":4859,"column":4},"end":{"line":4859,"column":79}},"1240":{"start":{"line":4874,"column":2},"end":{"line":4876,"column":4}},"1241":{"start":{"line":4875,"column":4},"end":{"line":4875,"column":66}},"1242":{"start":{"line":4894,"column":2},"end":{"line":4896,"column":4}},"1243":{"start":{"line":4895,"column":4},"end":{"line":4895,"column":73}},"1244":{"start":{"line":4895,"column":43},"end":{"line":4895,"column":69}},"1245":{"start":{"line":4914,"column":2},"end":{"line":4916,"column":4}},"1246":{"start":{"line":4915,"column":4},"end":{"line":4915,"column":73}},"1247":{"start":{"line":4915,"column":43},"end":{"line":4915,"column":69}},"1248":{"start":{"line":4934,"column":2},"end":{"line":4936,"column":4}},"1249":{"start":{"line":4935,"column":4},"end":{"line":4935,"column":53}},"1250":{"start":{"line":4941,"column":2},"end":{"line":4944,"column":3}},"1251":{"start":{"line":4942,"column":4},"end":{"line":4942,"column":25}},"1252":{"start":{"line":4943,"column":4},"end":{"line":4943,"column":24}},"1253":{"start":{"line":4946,"column":2},"end":{"line":4946,"column":64}},"1254":{"start":{"line":4947,"column":2},"end":{"line":4947,"column":79}},"1255":{"start":{"line":4948,"column":2},"end":{"line":4948,"column":85}},"1256":{"start":{"line":4958,"column":2},"end":{"line":4960,"column":4}},"1257":{"start":{"line":4959,"column":4},"end":{"line":4959,"column":48}},"1258":{"start":{"line":4965,"column":2},"end":{"line":4967,"column":3}},"1259":{"start":{"line":4966,"column":4},"end":{"line":4966,"column":25}},"1260":{"start":{"line":4969,"column":2},"end":{"line":4969,"column":66}},"1261":{"start":{"line":4970,"column":2},"end":{"line":4970,"column":83}},"1262":{"start":{"line":4971,"column":2},"end":{"line":4971,"column":89}},"1263":{"start":{"line":4973,"column":2},"end":{"line":4975,"column":4}},"1264":{"start":{"line":4974,"column":4},"end":{"line":4974,"column":25}},"1265":{"start":{"line":4990,"column":2},"end":{"line":4992,"column":4}},"1266":{"start":{"line":4991,"column":4},"end":{"line":4991,"column":50}},"1267":{"start":{"line":4997,"column":2},"end":{"line":5000,"column":3}},"1268":{"start":{"line":4998,"column":4},"end":{"line":4998,"column":25}},"1269":{"start":{"line":4999,"column":4},"end":{"line":4999,"column":27}},"1270":{"start":{"line":5002,"column":2},"end":{"line":5002,"column":49}},"1271":{"start":{"line":5004,"column":2},"end":{"line":5006,"column":4}},"1272":{"start":{"line":5005,"column":4},"end":{"line":5005,"column":73}},"1273":{"start":{"line":5011,"column":2},"end":{"line":5014,"column":3}},"1274":{"start":{"line":5012,"column":4},"end":{"line":5012,"column":26}},"1275":{"start":{"line":5013,"column":4},"end":{"line":5013,"column":39}},"1276":{"start":{"line":5016,"column":2},"end":{"line":5018,"column":4}},"1277":{"start":{"line":5017,"column":4},"end":{"line":5017,"column":25}},"1278":{"start":{"line":5020,"column":2},"end":{"line":5022,"column":4}},"1279":{"start":{"line":5021,"column":4},"end":{"line":5021,"column":59}},"1280":{"start":{"line":5040,"column":2},"end":{"line":5042,"column":4}},"1281":{"start":{"line":5041,"column":4},"end":{"line":5041,"column":52}},"1282":{"start":{"line":5047,"column":2},"end":{"line":5050,"column":3}},"1283":{"start":{"line":5048,"column":4},"end":{"line":5048,"column":25}},"1284":{"start":{"line":5049,"column":4},"end":{"line":5049,"column":27}},"1285":{"start":{"line":5052,"column":2},"end":{"line":5052,"column":49}},"1286":{"start":{"line":5054,"column":2},"end":{"line":5068,"column":4}},"1287":{"start":{"line":5055,"column":4},"end":{"line":5055,"column":40}},"1288":{"start":{"line":5057,"column":4},"end":{"line":5067,"column":5}},"1289":{"start":{"line":5058,"column":6},"end":{"line":5062,"column":7}},"1290":{"start":{"line":5059,"column":8},"end":{"line":5059,"column":40}},"1291":{"start":{"line":5061,"column":8},"end":{"line":5061,"column":65}},"1292":{"start":{"line":5063,"column":11},"end":{"line":5067,"column":5}},"1293":{"start":{"line":5064,"column":6},"end":{"line":5064,"column":38}},"1294":{"start":{"line":5066,"column":6},"end":{"line":5066,"column":63}},"1295":{"start":{"line":5073,"column":2},"end":{"line":5076,"column":3}},"1296":{"start":{"line":5074,"column":4},"end":{"line":5074,"column":26}},"1297":{"start":{"line":5075,"column":4},"end":{"line":5075,"column":39}},"1298":{"start":{"line":5078,"column":2},"end":{"line":5080,"column":4}},"1299":{"start":{"line":5079,"column":4},"end":{"line":5079,"column":55}},"1300":{"start":{"line":5082,"column":2},"end":{"line":5104,"column":4}},"1301":{"start":{"line":5083,"column":4},"end":{"line":5085,"column":5}},"1302":{"start":{"line":5084,"column":6},"end":{"line":5084,"column":19}},"1303":{"start":{"line":5087,"column":4},"end":{"line":5087,"column":47}},"1304":{"start":{"line":5089,"column":4},"end":{"line":5101,"column":5}},"1305":{"start":{"line":5090,"column":6},"end":{"line":5090,"column":55}},"1306":{"start":{"line":5091,"column":6},"end":{"line":5091,"column":29}},"1307":{"start":{"line":5092,"column":6},"end":{"line":5092,"column":53}},"1308":{"start":{"line":5093,"column":6},"end":{"line":5093,"column":18}},"1309":{"start":{"line":5095,"column":11},"end":{"line":5101,"column":5}},"1310":{"start":{"line":5096,"column":6},"end":{"line":5096,"column":34}},"1311":{"start":{"line":5097,"column":6},"end":{"line":5097,"column":27}},"1312":{"start":{"line":5098,"column":6},"end":{"line":5098,"column":33}},"1313":{"start":{"line":5099,"column":6},"end":{"line":5099,"column":31}},"1314":{"start":{"line":5100,"column":6},"end":{"line":5100,"column":18}},"1315":{"start":{"line":5103,"column":4},"end":{"line":5103,"column":17}},"1316":{"start":{"line":5109,"column":2},"end":{"line":5112,"column":3}},"1317":{"start":{"line":5110,"column":4},"end":{"line":5110,"column":25}},"1318":{"start":{"line":5111,"column":4},"end":{"line":5111,"column":31}},"1319":{"start":{"line":5114,"column":2},"end":{"line":5116,"column":4}},"1320":{"start":{"line":5115,"column":4},"end":{"line":5115,"column":66}},"1321":{"start":{"line":5118,"column":2},"end":{"line":5133,"column":4}},"1322":{"start":{"line":5119,"column":4},"end":{"line":5124,"column":5}},"1323":{"start":{"line":5120,"column":6},"end":{"line":5122,"column":10}},"1324":{"start":{"line":5123,"column":6},"end":{"line":5123,"column":76}},"1325":{"start":{"line":5126,"column":4},"end":{"line":5130,"column":5}},"1326":{"start":{"line":5127,"column":6},"end":{"line":5127,"column":27}},"1327":{"start":{"line":5128,"column":6},"end":{"line":5128,"column":34}},"1328":{"start":{"line":5129,"column":6},"end":{"line":5129,"column":18}},"1329":{"start":{"line":5132,"column":4},"end":{"line":5132,"column":26}},"1330":{"start":{"line":5144,"column":2},"end":{"line":5146,"column":3}},"1331":{"start":{"line":5145,"column":4},"end":{"line":5145,"column":25}},"1332":{"start":{"line":5148,"column":2},"end":{"line":5148,"column":53}},"1333":{"start":{"line":5150,"column":2},"end":{"line":5152,"column":4}},"1334":{"start":{"line":5151,"column":4},"end":{"line":5151,"column":16}},"1335":{"start":{"line":5154,"column":2},"end":{"line":5156,"column":4}},"1336":{"start":{"line":5155,"column":4},"end":{"line":5155,"column":17}},"1337":{"start":{"line":5158,"column":2},"end":{"line":5160,"column":4}},"1338":{"start":{"line":5159,"column":4},"end":{"line":5159,"column":33}},"1339":{"start":{"line":5162,"column":2},"end":{"line":5164,"column":4}},"1340":{"start":{"line":5163,"column":4},"end":{"line":5163,"column":30}},"1341":{"start":{"line":5166,"column":2},"end":{"line":5168,"column":4}},"1342":{"start":{"line":5167,"column":4},"end":{"line":5167,"column":23}},"1343":{"start":{"line":5184,"column":2},"end":{"line":5187,"column":3}},"1344":{"start":{"line":5185,"column":4},"end":{"line":5185,"column":27}},"1345":{"start":{"line":5186,"column":4},"end":{"line":5186,"column":30}},"1346":{"start":{"line":5189,"column":2},"end":{"line":5189,"column":47}},"1347":{"start":{"line":5191,"column":2},"end":{"line":5193,"column":4}},"1348":{"start":{"line":5192,"column":4},"end":{"line":5192,"column":17}},"1349":{"start":{"line":5202,"column":2},"end":{"line":5204,"column":4}},"1350":{"start":{"line":5203,"column":4},"end":{"line":5203,"column":28}},"1351":{"start":{"line":5216,"column":2},"end":{"line":5228,"column":4}},"1352":{"start":{"line":5217,"column":4},"end":{"line":5219,"column":14}},"1353":{"start":{"line":5221,"column":4},"end":{"line":5225,"column":5}},"1354":{"start":{"line":5222,"column":6},"end":{"line":5224,"column":7}},"1355":{"start":{"line":5223,"column":8},"end":{"line":5223,"column":21}},"1356":{"start":{"line":5227,"column":4},"end":{"line":5227,"column":16}},"1357":{"start":{"line":5230,"column":2},"end":{"line":5232,"column":4}},"1358":{"start":{"line":5231,"column":4},"end":{"line":5231,"column":39}},"1359":{"start":{"line":5241,"column":2},"end":{"line":5245,"column":3}},"1360":{"start":{"line":5242,"column":4},"end":{"line":5242,"column":33}},"1361":{"start":{"line":5243,"column":4},"end":{"line":5243,"column":26}},"1362":{"start":{"line":5244,"column":4},"end":{"line":5244,"column":29}},"1363":{"start":{"line":5247,"column":2},"end":{"line":5249,"column":4}},"1364":{"start":{"line":5248,"column":4},"end":{"line":5248,"column":29}},"1365":{"start":{"line":5251,"column":2},"end":{"line":5260,"column":4}},"1366":{"start":{"line":5252,"column":4},"end":{"line":5252,"column":33}},"1367":{"start":{"line":5254,"column":4},"end":{"line":5256,"column":5}},"1368":{"start":{"line":5255,"column":6},"end":{"line":5255,"column":19}},"1369":{"start":{"line":5258,"column":4},"end":{"line":5258,"column":51}},"1370":{"start":{"line":5259,"column":4},"end":{"line":5259,"column":16}},"1371":{"start":{"line":5306,"column":2},"end":{"line":5315,"column":3}},"1372":{"start":{"line":5307,"column":4},"end":{"line":5309,"column":5}},"1373":{"start":{"line":5308,"column":6},"end":{"line":5308,"column":59}},"1374":{"start":{"line":5311,"column":4},"end":{"line":5311,"column":33}},"1375":{"start":{"line":5312,"column":4},"end":{"line":5312,"column":35}},"1376":{"start":{"line":5313,"column":4},"end":{"line":5313,"column":54}},"1377":{"start":{"line":5314,"column":4},"end":{"line":5314,"column":54}},"1378":{"start":{"line":5317,"column":2},"end":{"line":5317,"column":43}},"1379":{"start":{"line":5319,"column":2},"end":{"line":5321,"column":4}},"1380":{"start":{"line":5320,"column":4},"end":{"line":5320,"column":16}},"1381":{"start":{"line":5331,"column":2},"end":{"line":5333,"column":4}},"1382":{"start":{"line":5332,"column":4},"end":{"line":5332,"column":80}},"1383":{"start":{"line":5346,"column":2},"end":{"line":5375,"column":4}},"1384":{"start":{"line":5347,"column":4},"end":{"line":5350,"column":14}},"1385":{"start":{"line":5352,"column":4},"end":{"line":5356,"column":7}},"1386":{"start":{"line":5353,"column":6},"end":{"line":5355,"column":7}},"1387":{"start":{"line":5354,"column":8},"end":{"line":5354,"column":39}},"1388":{"start":{"line":5358,"column":4},"end":{"line":5372,"column":7}},"1389":{"start":{"line":5359,"column":6},"end":{"line":5359,"column":28}},"1390":{"start":{"line":5361,"column":6},"end":{"line":5371,"column":7}},"1391":{"start":{"line":5362,"column":8},"end":{"line":5367,"column":9}},"1392":{"start":{"line":5363,"column":10},"end":{"line":5363,"column":51}},"1393":{"start":{"line":5366,"column":10},"end":{"line":5366,"column":28}},"1394":{"start":{"line":5370,"column":8},"end":{"line":5370,"column":26}},"1395":{"start":{"line":5374,"column":4},"end":{"line":5374,"column":18}},"1396":{"start":{"line":5417,"column":2},"end":{"line":5422,"column":3}},"1397":{"start":{"line":5418,"column":4},"end":{"line":5418,"column":31}},"1398":{"start":{"line":5419,"column":4},"end":{"line":5419,"column":30}},"1399":{"start":{"line":5420,"column":4},"end":{"line":5420,"column":25}},"1400":{"start":{"line":5421,"column":4},"end":{"line":5421,"column":29}},"1401":{"start":{"line":5425,"column":2},"end":{"line":5427,"column":19}},"1402":{"start":{"line":5429,"column":2},"end":{"line":5469,"column":4}},"1403":{"start":{"line":5430,"column":4},"end":{"line":5430,"column":49}},"1404":{"start":{"line":5432,"column":4},"end":{"line":5444,"column":7}},"1405":{"start":{"line":5433,"column":6},"end":{"line":5443,"column":7}},"1406":{"start":{"line":5434,"column":8},"end":{"line":5437,"column":9}},"1407":{"start":{"line":5435,"column":10},"end":{"line":5435,"column":34}},"1408":{"start":{"line":5436,"column":10},"end":{"line":5436,"column":17}},"1409":{"start":{"line":5439,"column":8},"end":{"line":5439,"column":45}},"1410":{"start":{"line":5442,"column":8},"end":{"line":5442,"column":27}},"1411":{"start":{"line":5446,"column":4},"end":{"line":5458,"column":7}},"1412":{"start":{"line":5447,"column":6},"end":{"line":5457,"column":7}},"1413":{"start":{"line":5448,"column":8},"end":{"line":5451,"column":9}},"1414":{"start":{"line":5449,"column":10},"end":{"line":5449,"column":34}},"1415":{"start":{"line":5450,"column":10},"end":{"line":5450,"column":17}},"1416":{"start":{"line":5453,"column":8},"end":{"line":5453,"column":45}},"1417":{"start":{"line":5456,"column":8},"end":{"line":5456,"column":27}},"1418":{"start":{"line":5460,"column":4},"end":{"line":5462,"column":5}},"1419":{"start":{"line":5461,"column":6},"end":{"line":5461,"column":32}},"1420":{"start":{"line":5464,"column":4},"end":{"line":5466,"column":5}},"1421":{"start":{"line":5465,"column":6},"end":{"line":5465,"column":32}},"1422":{"start":{"line":5468,"column":4},"end":{"line":5468,"column":19}},"1423":{"start":{"line":5471,"column":2},"end":{"line":5482,"column":4}},"1424":{"start":{"line":5472,"column":4},"end":{"line":5474,"column":5}},"1425":{"start":{"line":5473,"column":6},"end":{"line":5473,"column":13}},"1426":{"start":{"line":5476,"column":4},"end":{"line":5479,"column":5}},"1427":{"start":{"line":5477,"column":6},"end":{"line":5477,"column":28}},"1428":{"start":{"line":5478,"column":6},"end":{"line":5478,"column":25}},"1429":{"start":{"line":5481,"column":4},"end":{"line":5481,"column":56}},"1430":{"start":{"line":5484,"column":2},"end":{"line":5495,"column":4}},"1431":{"start":{"line":5485,"column":4},"end":{"line":5487,"column":5}},"1432":{"start":{"line":5486,"column":6},"end":{"line":5486,"column":13}},"1433":{"start":{"line":5489,"column":4},"end":{"line":5492,"column":5}},"1434":{"start":{"line":5490,"column":6},"end":{"line":5490,"column":28}},"1435":{"start":{"line":5491,"column":6},"end":{"line":5491,"column":27}},"1436":{"start":{"line":5494,"column":4},"end":{"line":5494,"column":56}},"1437":{"start":{"line":5502,"column":2},"end":{"line":5508,"column":4}},"1438":{"start":{"line":5503,"column":4},"end":{"line":5507,"column":5}},"1439":{"start":{"line":5504,"column":6},"end":{"line":5504,"column":22}},"1440":{"start":{"line":5505,"column":6},"end":{"line":5505,"column":27}},"1441":{"start":{"line":5506,"column":6},"end":{"line":5506,"column":27}},"1442":{"start":{"line":5518,"column":2},"end":{"line":5521,"column":4}},"1443":{"start":{"line":5519,"column":4},"end":{"line":5519,"column":41}},"1444":{"start":{"line":5520,"column":4},"end":{"line":5520,"column":16}},"1445":{"start":{"line":5532,"column":2},"end":{"line":5535,"column":4}},"1446":{"start":{"line":5533,"column":4},"end":{"line":5533,"column":40}},"1447":{"start":{"line":5534,"column":4},"end":{"line":5534,"column":16}},"1448":{"start":{"line":5541,"column":2},"end":{"line":5595,"column":3}},"1449":{"start":{"line":5542,"column":4},"end":{"line":5545,"column":5}},"1450":{"start":{"line":5543,"column":6},"end":{"line":5543,"column":75}},"1451":{"start":{"line":5544,"column":6},"end":{"line":5544,"column":13}},"1452":{"start":{"line":5547,"column":4},"end":{"line":5553,"column":5}},"1453":{"start":{"line":5548,"column":6},"end":{"line":5551,"column":8}},"1454":{"start":{"line":5549,"column":26},"end":{"line":5549,"column":50}},"1455":{"start":{"line":5550,"column":27},"end":{"line":5550,"column":51}},"1456":{"start":{"line":5552,"column":6},"end":{"line":5552,"column":13}},"1457":{"start":{"line":5555,"column":4},"end":{"line":5555,"column":13}},"1458":{"start":{"line":5556,"column":4},"end":{"line":5561,"column":5}},"1459":{"start":{"line":5557,"column":6},"end":{"line":5557,"column":71}},"1460":{"start":{"line":5559,"column":6},"end":{"line":5559,"column":25}},"1461":{"start":{"line":5560,"column":6},"end":{"line":5560,"column":13}},"1462":{"start":{"line":5563,"column":4},"end":{"line":5563,"column":32}},"1463":{"start":{"line":5564,"column":4},"end":{"line":5592,"column":5}},"1464":{"start":{"line":5565,"column":6},"end":{"line":5589,"column":7}},"1465":{"start":{"line":5566,"column":8},"end":{"line":5582,"column":10}},"1466":{"start":{"line":5569,"column":12},"end":{"line":5571,"column":13}},"1467":{"start":{"line":5570,"column":14},"end":{"line":5570,"column":21}},"1468":{"start":{"line":5572,"column":12},"end":{"line":5572,"column":37}},"1469":{"start":{"line":5573,"column":12},"end":{"line":5573,"column":36}},"1470":{"start":{"line":5576,"column":12},"end":{"line":5578,"column":13}},"1471":{"start":{"line":5577,"column":14},"end":{"line":5577,"column":21}},"1472":{"start":{"line":5579,"column":12},"end":{"line":5579,"column":37}},"1473":{"start":{"line":5580,"column":12},"end":{"line":5580,"column":36}},"1474":{"start":{"line":5584,"column":8},"end":{"line":5586,"column":9}},"1475":{"start":{"line":5585,"column":10},"end":{"line":5585,"column":17}},"1476":{"start":{"line":5588,"column":8},"end":{"line":5588,"column":27}},"1477":{"start":{"line":5591,"column":6},"end":{"line":5591,"column":13}},"1478":{"start":{"line":5594,"column":4},"end":{"line":5594,"column":24}},"1479":{"start":{"line":5597,"column":2},"end":{"line":5606,"column":3}},"1480":{"start":{"line":5598,"column":4},"end":{"line":5598,"column":49}},"1481":{"start":{"line":5600,"column":4},"end":{"line":5605,"column":7}},"1482":{"start":{"line":5601,"column":6},"end":{"line":5604,"column":7}},"1483":{"start":{"line":5602,"column":8},"end":{"line":5602,"column":33}},"1484":{"start":{"line":5603,"column":8},"end":{"line":5603,"column":53}},"1485":{"start":{"line":5608,"column":2},"end":{"line":5619,"column":3}},"1486":{"start":{"line":5609,"column":4},"end":{"line":5613,"column":5}},"1487":{"start":{"line":5610,"column":6},"end":{"line":5612,"column":7}},"1488":{"start":{"line":5611,"column":8},"end":{"line":5611,"column":28}},"1489":{"start":{"line":5615,"column":4},"end":{"line":5615,"column":29}},"1490":{"start":{"line":5616,"column":4},"end":{"line":5618,"column":6}},"1491":{"start":{"line":5617,"column":6},"end":{"line":5617,"column":38}},"1492":{"start":{"line":5621,"column":2},"end":{"line":5629,"column":3}},"1493":{"start":{"line":5622,"column":4},"end":{"line":5626,"column":5}},"1494":{"start":{"line":5623,"column":6},"end":{"line":5625,"column":7}},"1495":{"start":{"line":5624,"column":8},"end":{"line":5624,"column":30}},"1496":{"start":{"line":5628,"column":4},"end":{"line":5628,"column":24}},"1497":{"start":{"line":5641,"column":2},"end":{"line":5646,"column":3}},"1498":{"start":{"line":5642,"column":4},"end":{"line":5644,"column":5}},"1499":{"start":{"line":5643,"column":6},"end":{"line":5643,"column":51}},"1500":{"start":{"line":5643,"column":37},"end":{"line":5643,"column":47}},"1501":{"start":{"line":5645,"column":4},"end":{"line":5645,"column":21}},"1502":{"start":{"line":5651,"column":2},"end":{"line":5653,"column":4}},"1503":{"start":{"line":5652,"column":4},"end":{"line":5652,"column":41}},"1504":{"start":{"line":5664,"column":2},"end":{"line":5675,"column":4}},"1505":{"start":{"line":5665,"column":4},"end":{"line":5665,"column":14}},"1506":{"start":{"line":5667,"column":4},"end":{"line":5672,"column":7}},"1507":{"start":{"line":5668,"column":6},"end":{"line":5671,"column":7}},"1508":{"start":{"line":5669,"column":8},"end":{"line":5669,"column":18}},"1509":{"start":{"line":5670,"column":8},"end":{"line":5670,"column":21}},"1510":{"start":{"line":5674,"column":4},"end":{"line":5674,"column":53}},"1511":{"start":{"line":5674,"column":36},"end":{"line":5674,"column":49}},"1512":{"start":{"line":5685,"column":2},"end":{"line":5698,"column":4}},"1513":{"start":{"line":5686,"column":4},"end":{"line":5686,"column":24}},"1514":{"start":{"line":5688,"column":4},"end":{"line":5693,"column":7}},"1515":{"start":{"line":5689,"column":6},"end":{"line":5692,"column":7}},"1516":{"start":{"line":5690,"column":8},"end":{"line":5690,"column":23}},"1517":{"start":{"line":5691,"column":8},"end":{"line":5691,"column":21}},"1518":{"start":{"line":5695,"column":4},"end":{"line":5697,"column":7}},"1519":{"start":{"line":5696,"column":6},"end":{"line":5696,"column":24}},"1520":{"start":{"line":5708,"column":2},"end":{"line":5721,"column":4}},"1521":{"start":{"line":5709,"column":4},"end":{"line":5709,"column":22}},"1522":{"start":{"line":5711,"column":4},"end":{"line":5716,"column":7}},"1523":{"start":{"line":5712,"column":6},"end":{"line":5715,"column":7}},"1524":{"start":{"line":5713,"column":8},"end":{"line":5713,"column":21}},"1525":{"start":{"line":5714,"column":8},"end":{"line":5714,"column":21}},"1526":{"start":{"line":5718,"column":4},"end":{"line":5720,"column":7}},"1527":{"start":{"line":5719,"column":6},"end":{"line":5719,"column":19}},"1528":{"start":{"line":5726,"column":2},"end":{"line":5728,"column":4}},"1529":{"start":{"line":5727,"column":4},"end":{"line":5727,"column":16}},"1530":{"start":{"line":5733,"column":2},"end":{"line":5735,"column":4}},"1531":{"start":{"line":5734,"column":4},"end":{"line":5734,"column":67}},"1532":{"start":{"line":5737,"column":2},"end":{"line":5768,"column":3}},"1533":{"start":{"line":5738,"column":4},"end":{"line":5738,"column":24}},"1534":{"start":{"line":5740,"column":4},"end":{"line":5744,"column":5}},"1535":{"start":{"line":5741,"column":6},"end":{"line":5741,"column":52}},"1536":{"start":{"line":5742,"column":11},"end":{"line":5744,"column":5}},"1537":{"start":{"line":5743,"column":6},"end":{"line":5743,"column":38}},"1538":{"start":{"line":5746,"column":4},"end":{"line":5747,"column":22}},"1539":{"start":{"line":5749,"column":4},"end":{"line":5767,"column":7}},"1540":{"start":{"line":5750,"column":6},"end":{"line":5750,"column":47}},"1541":{"start":{"line":5752,"column":6},"end":{"line":5766,"column":9}},"1542":{"start":{"line":5754,"column":10},"end":{"line":5754,"column":31}},"1543":{"start":{"line":5758,"column":10},"end":{"line":5762,"column":11}},"1544":{"start":{"line":5759,"column":12},"end":{"line":5761,"column":13}},"1545":{"start":{"line":5760,"column":14},"end":{"line":5760,"column":37}},"1546":{"start":{"line":5763,"column":10},"end":{"line":5763,"column":32}},"1547":{"start":{"line":5764,"column":10},"end":{"line":5764,"column":18}},"1548":{"start":{"line":5770,"column":2},"end":{"line":5770,"column":58}},"1549":{"start":{"line":5772,"column":2},"end":{"line":5774,"column":4}},"1550":{"start":{"line":5773,"column":4},"end":{"line":5773,"column":28}},"1551":{"start":{"line":5782,"column":2},"end":{"line":5782,"column":34}},"1552":{"start":{"line":5784,"column":2},"end":{"line":5784,"column":53}},"1553":{"start":{"line":5786,"column":2},"end":{"line":5788,"column":4}},"1554":{"start":{"line":5787,"column":4},"end":{"line":5787,"column":16}},"1555":{"start":{"line":5790,"column":2},"end":{"line":5792,"column":4}},"1556":{"start":{"line":5791,"column":4},"end":{"line":5791,"column":52}},"1557":{"start":{"line":5797,"column":2},"end":{"line":5801,"column":3}},"1558":{"start":{"line":5798,"column":4},"end":{"line":5798,"column":28}},"1559":{"start":{"line":5799,"column":4},"end":{"line":5799,"column":31}},"1560":{"start":{"line":5800,"column":4},"end":{"line":5800,"column":57}},"1561":{"start":{"line":5803,"column":2},"end":{"line":5803,"column":49}},"1562":{"start":{"line":5805,"column":2},"end":{"line":5811,"column":4}},"1563":{"start":{"line":5806,"column":4},"end":{"line":5808,"column":5}},"1564":{"start":{"line":5807,"column":6},"end":{"line":5807,"column":28}},"1565":{"start":{"line":5810,"column":4},"end":{"line":5810,"column":27}},"1566":{"start":{"line":5813,"column":2},"end":{"line":5842,"column":4}},"1567":{"start":{"line":5814,"column":4},"end":{"line":5817,"column":18}},"1568":{"start":{"line":5819,"column":4},"end":{"line":5833,"column":7}},"1569":{"start":{"line":5820,"column":6},"end":{"line":5820,"column":22}},"1570":{"start":{"line":5822,"column":6},"end":{"line":5822,"column":16}},"1571":{"start":{"line":5823,"column":6},"end":{"line":5829,"column":7}},"1572":{"start":{"line":5824,"column":8},"end":{"line":5824,"column":26}},"1573":{"start":{"line":5825,"column":8},"end":{"line":5827,"column":9}},"1574":{"start":{"line":5826,"column":10},"end":{"line":5826,"column":23}},"1575":{"start":{"line":5828,"column":8},"end":{"line":5828,"column":38}},"1576":{"start":{"line":5831,"column":6},"end":{"line":5831,"column":39}},"1577":{"start":{"line":5832,"column":6},"end":{"line":5832,"column":16}},"1578":{"start":{"line":5835,"column":4},"end":{"line":5839,"column":7}},"1579":{"start":{"line":5836,"column":6},"end":{"line":5838,"column":7}},"1580":{"start":{"line":5837,"column":8},"end":{"line":5837,"column":28}},"1581":{"start":{"line":5841,"column":4},"end":{"line":5841,"column":18}},"1582":{"start":{"line":5844,"column":2},"end":{"line":5868,"column":4}},"1583":{"start":{"line":5845,"column":4},"end":{"line":5848,"column":24}},"1584":{"start":{"line":5850,"column":4},"end":{"line":5861,"column":7}},"1585":{"start":{"line":5851,"column":6},"end":{"line":5851,"column":22}},"1586":{"start":{"line":5852,"column":6},"end":{"line":5852,"column":25}},"1587":{"start":{"line":5853,"column":6},"end":{"line":5859,"column":7}},"1588":{"start":{"line":5854,"column":8},"end":{"line":5854,"column":52}},"1589":{"start":{"line":5855,"column":8},"end":{"line":5855,"column":64}},"1590":{"start":{"line":5856,"column":8},"end":{"line":5858,"column":9}},"1591":{"start":{"line":5857,"column":10},"end":{"line":5857,"column":23}},"1592":{"start":{"line":5860,"column":6},"end":{"line":5860,"column":18}},"1593":{"start":{"line":5863,"column":4},"end":{"line":5865,"column":7}},"1594":{"start":{"line":5864,"column":6},"end":{"line":5864,"column":31}},"1595":{"start":{"line":5867,"column":4},"end":{"line":5867,"column":18}},"1596":{"start":{"line":5870,"column":2},"end":{"line":5872,"column":4}},"1597":{"start":{"line":5871,"column":4},"end":{"line":5871,"column":28}},"1598":{"start":{"line":5874,"column":2},"end":{"line":5876,"column":4}},"1599":{"start":{"line":5875,"column":4},"end":{"line":5875,"column":52}},"1600":{"start":{"line":5881,"column":2},"end":{"line":5884,"column":3}},"1601":{"start":{"line":5882,"column":4},"end":{"line":5882,"column":26}},"1602":{"start":{"line":5883,"column":4},"end":{"line":5883,"column":39}},"1603":{"start":{"line":5886,"column":2},"end":{"line":5886,"column":56}},"1604":{"start":{"line":5888,"column":2},"end":{"line":5903,"column":4}},"1605":{"start":{"line":5889,"column":4},"end":{"line":5891,"column":22}},"1606":{"start":{"line":5893,"column":4},"end":{"line":5902,"column":7}},"1607":{"start":{"line":5894,"column":6},"end":{"line":5899,"column":9}},"1608":{"start":{"line":5895,"column":8},"end":{"line":5898,"column":9}},"1609":{"start":{"line":5896,"column":10},"end":{"line":5896,"column":22}},"1610":{"start":{"line":5897,"column":10},"end":{"line":5897,"column":23}},"1611":{"start":{"line":5901,"column":6},"end":{"line":5901,"column":19}},"1612":{"start":{"line":5953,"column":2},"end":{"line":5979,"column":4}},"1613":{"start":{"line":5954,"column":4},"end":{"line":5956,"column":6}},"1614":{"start":{"line":5955,"column":6},"end":{"line":5955,"column":26}},"1615":{"start":{"line":5958,"column":4},"end":{"line":5958,"column":46}},"1616":{"start":{"line":5960,"column":4},"end":{"line":5962,"column":6}},"1617":{"start":{"line":5961,"column":6},"end":{"line":5961,"column":36}},"1618":{"start":{"line":5964,"column":4},"end":{"line":5972,"column":6}},"1619":{"start":{"line":5965,"column":6},"end":{"line":5965,"column":37}},"1620":{"start":{"line":5967,"column":6},"end":{"line":5971,"column":7}},"1621":{"start":{"line":5968,"column":8},"end":{"line":5970,"column":9}},"1622":{"start":{"line":5969,"column":10},"end":{"line":5969,"column":33}},"1623":{"start":{"line":5974,"column":4},"end":{"line":5978,"column":6}},"1624":{"start":{"line":5975,"column":6},"end":{"line":5975,"column":32}},"1625":{"start":{"line":5976,"column":6},"end":{"line":5976,"column":45}},"1626":{"start":{"line":5977,"column":6},"end":{"line":5977,"column":22}},"1627":{"start":{"line":6002,"column":2},"end":{"line":6004,"column":4}},"1628":{"start":{"line":6003,"column":4},"end":{"line":6003,"column":54}},"1629":{"start":{"line":6025,"column":2},"end":{"line":6040,"column":4}},"1630":{"start":{"line":6026,"column":4},"end":{"line":6028,"column":53}},"1631":{"start":{"line":6030,"column":4},"end":{"line":6032,"column":5}},"1632":{"start":{"line":6031,"column":6},"end":{"line":6031,"column":35}},"1633":{"start":{"line":6034,"column":4},"end":{"line":6036,"column":5}},"1634":{"start":{"line":6035,"column":6},"end":{"line":6035,"column":22}},"1635":{"start":{"line":6038,"column":4},"end":{"line":6039,"column":46}},"1636":{"start":{"line":6038,"column":39},"end":{"line":6038,"column":65}},"1637":{"start":{"line":6058,"column":2},"end":{"line":6060,"column":4}},"1638":{"start":{"line":6059,"column":4},"end":{"line":6059,"column":62}},"1639":{"start":{"line":6059,"column":38},"end":{"line":6059,"column":51}},"1640":{"start":{"line":6062,"column":2},"end":{"line":6062,"column":37}},"1641":{"start":{"line":6063,"column":2},"end":{"line":6063,"column":46}},"1642":{"start":{"line":6064,"column":2},"end":{"line":6064,"column":47}},"1643":{"start":{"line":6065,"column":2},"end":{"line":6065,"column":47}},"1644":{"start":{"line":6066,"column":2},"end":{"line":6066,"column":47}},"1645":{"start":{"line":6067,"column":2},"end":{"line":6067,"column":46}},"1646":{"start":{"line":6068,"column":2},"end":{"line":6068,"column":42}},"1647":{"start":{"line":6069,"column":2},"end":{"line":6069,"column":40}},"1648":{"start":{"line":6088,"column":2},"end":{"line":6090,"column":4}},"1649":{"start":{"line":6089,"column":4},"end":{"line":6089,"column":32}},"1650":{"start":{"line":6095,"column":2},"end":{"line":6100,"column":4}},"1651":{"start":{"line":6096,"column":4},"end":{"line":6099,"column":6}},"1652":{"start":{"line":6097,"column":6},"end":{"line":6097,"column":28}},"1653":{"start":{"line":6098,"column":6},"end":{"line":6098,"column":39}},"1654":{"start":{"line":6102,"column":2},"end":{"line":6104,"column":41}},"1655":{"start":{"line":6102,"column":50},"end":{"line":6102,"column":76}},"1656":{"start":{"line":6127,"column":2},"end":{"line":6152,"column":3}},"1657":{"start":{"line":6128,"column":4},"end":{"line":6151,"column":5}},"1658":{"start":{"line":6130,"column":8},"end":{"line":6130,"column":24}},"1659":{"start":{"line":6133,"column":8},"end":{"line":6135,"column":10}},"1660":{"start":{"line":6134,"column":10},"end":{"line":6134,"column":29}},"1661":{"start":{"line":6138,"column":8},"end":{"line":6142,"column":10}},"1662":{"start":{"line":6139,"column":10},"end":{"line":6141,"column":13}},"1663":{"start":{"line":6140,"column":12},"end":{"line":6140,"column":36}},"1664":{"start":{"line":6145,"column":8},"end":{"line":6147,"column":24}},"1665":{"start":{"line":6146,"column":23},"end":{"line":6146,"column":43}},"1666":{"start":{"line":6150,"column":8},"end":{"line":6150,"column":93}},"1667":{"start":{"line":6173,"column":2},"end":{"line":6181,"column":3}},"1668":{"start":{"line":6174,"column":4},"end":{"line":6174,"column":38}},"1669":{"start":{"line":6174,"column":21},"end":{"line":6174,"column":36}},"1670":{"start":{"line":6176,"column":4},"end":{"line":6176,"column":40}},"1671":{"start":{"line":6178,"column":4},"end":{"line":6180,"column":6}},"1672":{"start":{"line":6179,"column":6},"end":{"line":6179,"column":47}},"1673":{"start":{"line":6195,"column":2},"end":{"line":6197,"column":3}},"1674":{"start":{"line":6196,"column":4},"end":{"line":6196,"column":47}},"1675":{"start":{"line":6196,"column":28},"end":{"line":6196,"column":44}},"1676":{"start":{"line":6206,"column":2},"end":{"line":6212,"column":3}},"1677":{"start":{"line":6207,"column":4},"end":{"line":6207,"column":24}},"1678":{"start":{"line":6208,"column":4},"end":{"line":6210,"column":7}},"1679":{"start":{"line":6209,"column":6},"end":{"line":6209,"column":17}},"1680":{"start":{"line":6211,"column":4},"end":{"line":6211,"column":15}},"1681":{"start":{"line":6228,"column":2},"end":{"line":6234,"column":3}},"1682":{"start":{"line":6229,"column":4},"end":{"line":6231,"column":5}},"1683":{"start":{"line":6230,"column":6},"end":{"line":6230,"column":15}},"1684":{"start":{"line":6233,"column":4},"end":{"line":6233,"column":26}},"1685":{"start":{"line":6245,"column":2},"end":{"line":6256,"column":3}},"1686":{"start":{"line":6246,"column":4},"end":{"line":6247,"column":27}},"1687":{"start":{"line":6249,"column":4},"end":{"line":6253,"column":5}},"1688":{"start":{"line":6250,"column":6},"end":{"line":6252,"column":7}},"1689":{"start":{"line":6251,"column":8},"end":{"line":6251,"column":21}},"1690":{"start":{"line":6255,"column":4},"end":{"line":6255,"column":16}},"1691":{"start":{"line":6258,"column":2},"end":{"line":6265,"column":3}},"1692":{"start":{"line":6259,"column":4},"end":{"line":6259,"column":15}},"1693":{"start":{"line":6260,"column":4},"end":{"line":6263,"column":7}},"1694":{"start":{"line":6261,"column":6},"end":{"line":6261,"column":17}},"1695":{"start":{"line":6262,"column":6},"end":{"line":6262,"column":19}},"1696":{"start":{"line":6264,"column":4},"end":{"line":6264,"column":18}},"1697":{"start":{"line":6281,"column":2},"end":{"line":6301,"column":3}},"1698":{"start":{"line":6282,"column":4},"end":{"line":6283,"column":30}},"1699":{"start":{"line":6286,"column":4},"end":{"line":6293,"column":5}},"1700":{"start":{"line":6287,"column":6},"end":{"line":6291,"column":7}},"1701":{"start":{"line":6288,"column":8},"end":{"line":6290,"column":9}},"1702":{"start":{"line":6289,"column":10},"end":{"line":6289,"column":22}},"1703":{"start":{"line":6292,"column":6},"end":{"line":6292,"column":19}},"1704":{"start":{"line":6295,"column":4},"end":{"line":6299,"column":5}},"1705":{"start":{"line":6296,"column":6},"end":{"line":6298,"column":7}},"1706":{"start":{"line":6297,"column":8},"end":{"line":6297,"column":20}},"1707":{"start":{"line":6300,"column":4},"end":{"line":6300,"column":17}},"1708":{"start":{"line":6317,"column":2},"end":{"line":6337,"column":3}},"1709":{"start":{"line":6318,"column":4},"end":{"line":6318,"column":15}},"1710":{"start":{"line":6320,"column":4},"end":{"line":6334,"column":5}},"1711":{"start":{"line":6321,"column":6},"end":{"line":6321,"column":36}},"1712":{"start":{"line":6322,"column":6},"end":{"line":6326,"column":7}},"1713":{"start":{"line":6323,"column":8},"end":{"line":6325,"column":9}},"1714":{"start":{"line":6324,"column":10},"end":{"line":6324,"column":22}},"1715":{"start":{"line":6329,"column":6},"end":{"line":6333,"column":7}},"1716":{"start":{"line":6330,"column":8},"end":{"line":6332,"column":9}},"1717":{"start":{"line":6331,"column":10},"end":{"line":6331,"column":22}},"1718":{"start":{"line":6336,"column":4},"end":{"line":6336,"column":17}},"1719":{"start":{"line":6352,"column":2},"end":{"line":6356,"column":3}},"1720":{"start":{"line":6353,"column":4},"end":{"line":6353,"column":24}},"1721":{"start":{"line":6354,"column":4},"end":{"line":6354,"column":24}},"1722":{"start":{"line":6355,"column":4},"end":{"line":6355,"column":20}},"1723":{"start":{"line":6365,"column":2},"end":{"line":6367,"column":3}},"1724":{"start":{"line":6366,"column":4},"end":{"line":6366,"column":61}},"1725":{"start":{"line":6416,"column":2},"end":{"line":6419,"column":3}},"1726":{"start":{"line":6417,"column":4},"end":{"line":6417,"column":22}},"1727":{"start":{"line":6418,"column":4},"end":{"line":6418,"column":22}},"1728":{"start":{"line":6428,"column":2},"end":{"line":6489,"column":4}},"1729":{"start":{"line":6429,"column":4},"end":{"line":6436,"column":16}},"1730":{"start":{"line":6438,"column":4},"end":{"line":6488,"column":5}},"1731":{"start":{"line":6442,"column":8},"end":{"line":6445,"column":9}},"1732":{"start":{"line":6443,"column":10},"end":{"line":6443,"column":30}},"1733":{"start":{"line":6444,"column":10},"end":{"line":6444,"column":22}},"1734":{"start":{"line":6446,"column":8},"end":{"line":6446,"column":21}},"1735":{"start":{"line":6453,"column":8},"end":{"line":6472,"column":9}},"1736":{"start":{"line":6471,"column":12},"end":{"line":6471,"column":32}},"1737":{"start":{"line":6473,"column":8},"end":{"line":6476,"column":9}},"1738":{"start":{"line":6474,"column":10},"end":{"line":6474,"column":30}},"1739":{"start":{"line":6475,"column":10},"end":{"line":6475,"column":22}},"1740":{"start":{"line":6477,"column":8},"end":{"line":6477,"column":21}},"1741":{"start":{"line":6482,"column":8},"end":{"line":6482,"column":31}},"1742":{"start":{"line":6483,"column":8},"end":{"line":6486,"column":9}},"1743":{"start":{"line":6484,"column":10},"end":{"line":6484,"column":30}},"1744":{"start":{"line":6485,"column":10},"end":{"line":6485,"column":22}},"1745":{"start":{"line":6487,"column":8},"end":{"line":6487,"column":21}},"1746":{"start":{"line":6497,"column":2},"end":{"line":6541,"column":4}},"1747":{"start":{"line":6498,"column":4},"end":{"line":6501,"column":18}},"1748":{"start":{"line":6503,"column":4},"end":{"line":6540,"column":5}},"1749":{"start":{"line":6507,"column":8},"end":{"line":6507,"column":35}},"1750":{"start":{"line":6514,"column":8},"end":{"line":6533,"column":9}},"1751":{"start":{"line":6532,"column":12},"end":{"line":6532,"column":32}},"1752":{"start":{"line":6534,"column":8},"end":{"line":6534,"column":35}},"1753":{"start":{"line":6539,"column":8},"end":{"line":6539,"column":50}},"1754":{"start":{"line":6584,"column":2},"end":{"line":6588,"column":3}},"1755":{"start":{"line":6585,"column":4},"end":{"line":6585,"column":40}},"1756":{"start":{"line":6586,"column":4},"end":{"line":6586,"column":22}},"1757":{"start":{"line":6587,"column":4},"end":{"line":6587,"column":22}},"1758":{"start":{"line":6593,"column":2},"end":{"line":6607,"column":4}},"1759":{"start":{"line":6594,"column":4},"end":{"line":6596,"column":30}},"1760":{"start":{"line":6598,"column":4},"end":{"line":6604,"column":5}},"1761":{"start":{"line":6599,"column":6},"end":{"line":6599,"column":32}},"1762":{"start":{"line":6600,"column":6},"end":{"line":6600,"column":42}},"1763":{"start":{"line":6603,"column":6},"end":{"line":6603,"column":39}},"1764":{"start":{"line":6606,"column":4},"end":{"line":6606,"column":16}},"1765":{"start":{"line":6612,"column":2},"end":{"line":6623,"column":4}},"1766":{"start":{"line":6613,"column":4},"end":{"line":6615,"column":30}},"1767":{"start":{"line":6617,"column":4},"end":{"line":6617,"column":56}},"1768":{"start":{"line":6618,"column":4},"end":{"line":6620,"column":5}},"1769":{"start":{"line":6619,"column":6},"end":{"line":6619,"column":77}},"1770":{"start":{"line":6622,"column":4},"end":{"line":6622,"column":20}},"1771":{"start":{"line":6628,"column":2},"end":{"line":6664,"column":3}},"1772":{"start":{"line":6630,"column":4},"end":{"line":6630,"column":34}},"1773":{"start":{"line":6633,"column":4},"end":{"line":6633,"column":32}},"1774":{"start":{"line":6636,"column":4},"end":{"line":6638,"column":5}},"1775":{"start":{"line":6637,"column":6},"end":{"line":6637,"column":53}},"1776":{"start":{"line":6644,"column":4},"end":{"line":6656,"column":6}},"1777":{"start":{"line":6645,"column":6},"end":{"line":6645,"column":32}},"1778":{"start":{"line":6648,"column":6},"end":{"line":6648,"column":29}},"1779":{"start":{"line":6651,"column":6},"end":{"line":6653,"column":7}},"1780":{"start":{"line":6652,"column":8},"end":{"line":6652,"column":49}},"1781":{"start":{"line":6655,"column":6},"end":{"line":6655,"column":22}},"1782":{"start":{"line":6658,"column":4},"end":{"line":6658,"column":63}},"1783":{"start":{"line":6659,"column":4},"end":{"line":6661,"column":5}},"1784":{"start":{"line":6660,"column":6},"end":{"line":6660,"column":47}},"1785":{"start":{"line":6663,"column":4},"end":{"line":6663,"column":16}},"1786":{"start":{"line":6666,"column":2},"end":{"line":6666,"column":14}}},"branchMap":{"1":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"2":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":34}},{"start":{"line":63,"column":38},"end":{"line":63,"column":48}}]},"3":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":9},"end":{"line":65,"column":9}},{"start":{"line":65,"column":9},"end":{"line":65,"column":9}}]},"4":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"5":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":11},"end":{"line":110,"column":11}},{"start":{"line":110,"column":11},"end":{"line":110,"column":11}}]},"6":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":11},"end":{"line":113,"column":11}},{"start":{"line":113,"column":11},"end":{"line":113,"column":11}}]},"7":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":117,"column":4}},{"start":{"line":117,"column":4},"end":{"line":117,"column":4}}]},"8":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":13},"end":{"line":119,"column":20}},{"start":{"line":119,"column":24},"end":{"line":119,"column":32}}]},"9":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":6},"end":{"line":122,"column":6}},{"start":{"line":122,"column":6},"end":{"line":122,"column":6}}]},"10":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":6},"end":{"line":162,"column":6}},{"start":{"line":162,"column":6},"end":{"line":162,"column":6}}]},"11":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":6},"end":{"line":166,"column":6}},{"start":{"line":166,"column":6},"end":{"line":166,"column":6}}]},"12":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":10},"end":{"line":166,"column":36}},{"start":{"line":166,"column":40},"end":{"line":166,"column":67}}]},"13":{"line":290,"type":"if","locations":[{"start":{"line":290,"column":4},"end":{"line":290,"column":4}},{"start":{"line":290,"column":4},"end":{"line":290,"column":4}}]},"14":{"line":290,"type":"binary-expr","locations":[{"start":{"line":290,"column":8},"end":{"line":290,"column":18}},{"start":{"line":290,"column":23},"end":{"line":290,"column":45}},{"start":{"line":290,"column":49},"end":{"line":290,"column":64}}]},"15":{"line":362,"type":"cond-expr","locations":[{"start":{"line":362,"column":25},"end":{"line":362,"column":46}},{"start":{"line":362,"column":49},"end":{"line":362,"column":54}}]},"16":{"line":428,"type":"binary-expr","locations":[{"start":{"line":428,"column":11},"end":{"line":428,"column":27}},{"start":{"line":428,"column":31},"end":{"line":428,"column":63}}]},"17":{"line":441,"type":"if","locations":[{"start":{"line":441,"column":4},"end":{"line":441,"column":4}},{"start":{"line":441,"column":4},"end":{"line":441,"column":4}}]},"18":{"line":445,"type":"if","locations":[{"start":{"line":445,"column":4},"end":{"line":445,"column":4}},{"start":{"line":445,"column":4},"end":{"line":445,"column":4}}]},"19":{"line":504,"type":"if","locations":[{"start":{"line":504,"column":6},"end":{"line":504,"column":6}},{"start":{"line":504,"column":6},"end":{"line":504,"column":6}}]},"20":{"line":587,"type":"if","locations":[{"start":{"line":587,"column":6},"end":{"line":587,"column":6}},{"start":{"line":587,"column":6},"end":{"line":587,"column":6}}]},"21":{"line":671,"type":"if","locations":[{"start":{"line":671,"column":4},"end":{"line":671,"column":4}},{"start":{"line":671,"column":4},"end":{"line":671,"column":4}}]},"22":{"line":782,"type":"if","locations":[{"start":{"line":782,"column":6},"end":{"line":782,"column":6}},{"start":{"line":782,"column":6},"end":{"line":782,"column":6}}]},"23":{"line":812,"type":"if","locations":[{"start":{"line":812,"column":6},"end":{"line":812,"column":6}},{"start":{"line":812,"column":6},"end":{"line":812,"column":6}}]},"24":{"line":933,"type":"if","locations":[{"start":{"line":933,"column":4},"end":{"line":933,"column":4}},{"start":{"line":933,"column":4},"end":{"line":933,"column":4}}]},"25":{"line":941,"type":"if","locations":[{"start":{"line":941,"column":4},"end":{"line":941,"column":4}},{"start":{"line":941,"column":4},"end":{"line":941,"column":4}}]},"26":{"line":984,"type":"if","locations":[{"start":{"line":984,"column":6},"end":{"line":984,"column":6}},{"start":{"line":984,"column":6},"end":{"line":984,"column":6}}]},"27":{"line":990,"type":"if","locations":[{"start":{"line":990,"column":4},"end":{"line":990,"column":4}},{"start":{"line":990,"column":4},"end":{"line":990,"column":4}}]},"28":{"line":992,"type":"if","locations":[{"start":{"line":992,"column":8},"end":{"line":992,"column":8}},{"start":{"line":992,"column":8},"end":{"line":992,"column":8}}]},"29":{"line":1022,"type":"if","locations":[{"start":{"line":1022,"column":4},"end":{"line":1022,"column":4}},{"start":{"line":1022,"column":4},"end":{"line":1022,"column":4}}]},"30":{"line":1053,"type":"if","locations":[{"start":{"line":1053,"column":6},"end":{"line":1053,"column":6}},{"start":{"line":1053,"column":6},"end":{"line":1053,"column":6}}]},"31":{"line":1054,"type":"if","locations":[{"start":{"line":1054,"column":6},"end":{"line":1054,"column":6}},{"start":{"line":1054,"column":6},"end":{"line":1054,"column":6}}]},"32":{"line":1058,"type":"if","locations":[{"start":{"line":1058,"column":4},"end":{"line":1058,"column":4}},{"start":{"line":1058,"column":4},"end":{"line":1058,"column":4}}]},"33":{"line":1062,"type":"binary-expr","locations":[{"start":{"line":1062,"column":11},"end":{"line":1062,"column":22}},{"start":{"line":1062,"column":26},"end":{"line":1062,"column":42}}]},"34":{"line":1078,"type":"binary-expr","locations":[{"start":{"line":1078,"column":13},"end":{"line":1078,"column":30}},{"start":{"line":1078,"column":35},"end":{"line":1078,"column":59}}]},"35":{"line":1120,"type":"if","locations":[{"start":{"line":1120,"column":6},"end":{"line":1120,"column":6}},{"start":{"line":1120,"column":6},"end":{"line":1120,"column":6}}]},"36":{"line":1128,"type":"if","locations":[{"start":{"line":1128,"column":4},"end":{"line":1128,"column":4}},{"start":{"line":1128,"column":4},"end":{"line":1128,"column":4}}]},"37":{"line":1155,"type":"cond-expr","locations":[{"start":{"line":1155,"column":45},"end":{"line":1155,"column":50}},{"start":{"line":1155,"column":53},"end":{"line":1155,"column":54}}]},"38":{"line":1181,"type":"if","locations":[{"start":{"line":1181,"column":4},"end":{"line":1181,"column":4}},{"start":{"line":1181,"column":4},"end":{"line":1181,"column":4}}]},"39":{"line":1238,"type":"cond-expr","locations":[{"start":{"line":1238,"column":46},"end":{"line":1238,"column":51}},{"start":{"line":1238,"column":54},"end":{"line":1238,"column":55}}]},"40":{"line":1249,"type":"if","locations":[{"start":{"line":1249,"column":6},"end":{"line":1249,"column":6}},{"start":{"line":1249,"column":6},"end":{"line":1249,"column":6}}]},"41":{"line":1287,"type":"if","locations":[{"start":{"line":1287,"column":6},"end":{"line":1287,"column":6}},{"start":{"line":1287,"column":6},"end":{"line":1287,"column":6}}]},"42":{"line":1288,"type":"if","locations":[{"start":{"line":1288,"column":8},"end":{"line":1288,"column":8}},{"start":{"line":1288,"column":8},"end":{"line":1288,"column":8}}]},"43":{"line":1333,"type":"binary-expr","locations":[{"start":{"line":1333,"column":4},"end":{"line":1333,"column":10}},{"start":{"line":1333,"column":15},"end":{"line":1333,"column":31}}]},"44":{"line":1334,"type":"if","locations":[{"start":{"line":1334,"column":4},"end":{"line":1334,"column":4}},{"start":{"line":1334,"column":4},"end":{"line":1334,"column":4}}]},"45":{"line":1384,"type":"if","locations":[{"start":{"line":1384,"column":4},"end":{"line":1384,"column":4}},{"start":{"line":1384,"column":4},"end":{"line":1384,"column":4}}]},"46":{"line":1617,"type":"if","locations":[{"start":{"line":1617,"column":4},"end":{"line":1617,"column":4}},{"start":{"line":1617,"column":4},"end":{"line":1617,"column":4}}]},"47":{"line":1620,"type":"if","locations":[{"start":{"line":1620,"column":8},"end":{"line":1620,"column":8}},{"start":{"line":1620,"column":8},"end":{"line":1620,"column":8}}]},"48":{"line":1627,"type":"if","locations":[{"start":{"line":1627,"column":8},"end":{"line":1627,"column":8}},{"start":{"line":1627,"column":8},"end":{"line":1627,"column":8}}]},"49":{"line":1663,"type":"if","locations":[{"start":{"line":1663,"column":4},"end":{"line":1663,"column":4}},{"start":{"line":1663,"column":4},"end":{"line":1663,"column":4}}]},"50":{"line":1692,"type":"if","locations":[{"start":{"line":1692,"column":4},"end":{"line":1692,"column":4}},{"start":{"line":1692,"column":4},"end":{"line":1692,"column":4}}]},"51":{"line":1706,"type":"if","locations":[{"start":{"line":1706,"column":8},"end":{"line":1706,"column":8}},{"start":{"line":1706,"column":8},"end":{"line":1706,"column":8}}]},"52":{"line":1711,"type":"if","locations":[{"start":{"line":1711,"column":6},"end":{"line":1711,"column":6}},{"start":{"line":1711,"column":6},"end":{"line":1711,"column":6}}]},"53":{"line":1711,"type":"binary-expr","locations":[{"start":{"line":1711,"column":10},"end":{"line":1711,"column":19}},{"start":{"line":1711,"column":24},"end":{"line":1711,"column":48}}]},"54":{"line":1753,"type":"if","locations":[{"start":{"line":1753,"column":6},"end":{"line":1753,"column":6}},{"start":{"line":1753,"column":6},"end":{"line":1753,"column":6}}]},"55":{"line":1758,"type":"if","locations":[{"start":{"line":1758,"column":4},"end":{"line":1758,"column":4}},{"start":{"line":1758,"column":4},"end":{"line":1758,"column":4}}]},"56":{"line":1794,"type":"if","locations":[{"start":{"line":1794,"column":6},"end":{"line":1794,"column":6}},{"start":{"line":1794,"column":6},"end":{"line":1794,"column":6}}]},"57":{"line":1798,"type":"if","locations":[{"start":{"line":1798,"column":6},"end":{"line":1798,"column":6}},{"start":{"line":1798,"column":6},"end":{"line":1798,"column":6}}]},"58":{"line":1856,"type":"if","locations":[{"start":{"line":1856,"column":6},"end":{"line":1856,"column":6}},{"start":{"line":1856,"column":6},"end":{"line":1856,"column":6}}]},"59":{"line":1897,"type":"if","locations":[{"start":{"line":1897,"column":4},"end":{"line":1897,"column":4}},{"start":{"line":1897,"column":4},"end":{"line":1897,"column":4}}]},"60":{"line":1897,"type":"binary-expr","locations":[{"start":{"line":1897,"column":8},"end":{"line":1897,"column":30}},{"start":{"line":1897,"column":34},"end":{"line":1897,"column":55}}]},"61":{"line":1925,"type":"if","locations":[{"start":{"line":1925,"column":8},"end":{"line":1925,"column":8}},{"start":{"line":1925,"column":8},"end":{"line":1925,"column":8}}]},"62":{"line":1931,"type":"if","locations":[{"start":{"line":1931,"column":6},"end":{"line":1931,"column":6}},{"start":{"line":1931,"column":6},"end":{"line":1931,"column":6}}]},"63":{"line":1956,"type":"if","locations":[{"start":{"line":1956,"column":4},"end":{"line":1956,"column":4}},{"start":{"line":1956,"column":4},"end":{"line":1956,"column":4}}]},"64":{"line":1961,"type":"if","locations":[{"start":{"line":1961,"column":4},"end":{"line":1961,"column":4}},{"start":{"line":1961,"column":4},"end":{"line":1961,"column":4}}]},"65":{"line":1991,"type":"if","locations":[{"start":{"line":1991,"column":6},"end":{"line":1991,"column":6}},{"start":{"line":1991,"column":6},"end":{"line":1991,"column":6}}]},"66":{"line":2006,"type":"if","locations":[{"start":{"line":2006,"column":6},"end":{"line":2006,"column":6}},{"start":{"line":2006,"column":6},"end":{"line":2006,"column":6}}]},"67":{"line":2012,"type":"if","locations":[{"start":{"line":2012,"column":6},"end":{"line":2012,"column":6}},{"start":{"line":2012,"column":6},"end":{"line":2012,"column":6}}]},"68":{"line":2019,"type":"if","locations":[{"start":{"line":2019,"column":4},"end":{"line":2019,"column":4}},{"start":{"line":2019,"column":4},"end":{"line":2019,"column":4}}]},"69":{"line":2024,"type":"if","locations":[{"start":{"line":2024,"column":6},"end":{"line":2024,"column":6}},{"start":{"line":2024,"column":6},"end":{"line":2024,"column":6}}]},"70":{"line":2091,"type":"if","locations":[{"start":{"line":2091,"column":6},"end":{"line":2091,"column":6}},{"start":{"line":2091,"column":6},"end":{"line":2091,"column":6}}]},"71":{"line":2162,"type":"if","locations":[{"start":{"line":2162,"column":6},"end":{"line":2162,"column":6}},{"start":{"line":2162,"column":6},"end":{"line":2162,"column":6}}]},"72":{"line":2187,"type":"if","locations":[{"start":{"line":2187,"column":4},"end":{"line":2187,"column":4}},{"start":{"line":2187,"column":4},"end":{"line":2187,"column":4}}]},"73":{"line":2219,"type":"if","locations":[{"start":{"line":2219,"column":6},"end":{"line":2219,"column":6}},{"start":{"line":2219,"column":6},"end":{"line":2219,"column":6}}]},"74":{"line":2275,"type":"if","locations":[{"start":{"line":2275,"column":4},"end":{"line":2275,"column":4}},{"start":{"line":2275,"column":4},"end":{"line":2275,"column":4}}]},"75":{"line":2284,"type":"if","locations":[{"start":{"line":2284,"column":4},"end":{"line":2284,"column":4}},{"start":{"line":2284,"column":4},"end":{"line":2284,"column":4}}]},"76":{"line":2322,"type":"if","locations":[{"start":{"line":2322,"column":4},"end":{"line":2322,"column":4}},{"start":{"line":2322,"column":4},"end":{"line":2322,"column":4}}]},"77":{"line":2359,"type":"if","locations":[{"start":{"line":2359,"column":6},"end":{"line":2359,"column":6}},{"start":{"line":2359,"column":6},"end":{"line":2359,"column":6}}]},"78":{"line":2381,"type":"if","locations":[{"start":{"line":2381,"column":4},"end":{"line":2381,"column":4}},{"start":{"line":2381,"column":4},"end":{"line":2381,"column":4}}]},"79":{"line":2419,"type":"binary-expr","locations":[{"start":{"line":2419,"column":11},"end":{"line":2419,"column":35}},{"start":{"line":2419,"column":39},"end":{"line":2419,"column":58}}]},"80":{"line":2423,"type":"if","locations":[{"start":{"line":2423,"column":4},"end":{"line":2423,"column":4}},{"start":{"line":2423,"column":4},"end":{"line":2423,"column":4}}]},"81":{"line":2517,"type":"if","locations":[{"start":{"line":2517,"column":4},"end":{"line":2517,"column":4}},{"start":{"line":2517,"column":4},"end":{"line":2517,"column":4}}]},"82":{"line":2522,"type":"if","locations":[{"start":{"line":2522,"column":6},"end":{"line":2522,"column":6}},{"start":{"line":2522,"column":6},"end":{"line":2522,"column":6}}]},"83":{"line":2525,"type":"cond-expr","locations":[{"start":{"line":2525,"column":30},"end":{"line":2525,"column":37}},{"start":{"line":2525,"column":40},"end":{"line":2525,"column":44}}]},"84":{"line":2531,"type":"cond-expr","locations":[{"start":{"line":2531,"column":73},"end":{"line":2531,"column":74}},{"start":{"line":2531,"column":77},"end":{"line":2531,"column":78}}]},"85":{"line":2557,"type":"if","locations":[{"start":{"line":2557,"column":4},"end":{"line":2557,"column":4}},{"start":{"line":2557,"column":4},"end":{"line":2557,"column":4}}]},"86":{"line":2562,"type":"if","locations":[{"start":{"line":2562,"column":6},"end":{"line":2562,"column":6}},{"start":{"line":2562,"column":6},"end":{"line":2562,"column":6}}]},"87":{"line":2565,"type":"cond-expr","locations":[{"start":{"line":2565,"column":30},"end":{"line":2565,"column":37}},{"start":{"line":2565,"column":40},"end":{"line":2565,"column":44}}]},"88":{"line":2571,"type":"cond-expr","locations":[{"start":{"line":2571,"column":73},"end":{"line":2571,"column":74}},{"start":{"line":2571,"column":77},"end":{"line":2571,"column":78}}]},"89":{"line":2589,"type":"if","locations":[{"start":{"line":2589,"column":4},"end":{"line":2589,"column":4}},{"start":{"line":2589,"column":4},"end":{"line":2589,"column":4}}]},"90":{"line":2624,"type":"cond-expr","locations":[{"start":{"line":2624,"column":51},"end":{"line":2624,"column":54}},{"start":{"line":2624,"column":57},"end":{"line":2624,"column":74}}]},"91":{"line":2627,"type":"if","locations":[{"start":{"line":2627,"column":6},"end":{"line":2627,"column":6}},{"start":{"line":2627,"column":6},"end":{"line":2627,"column":6}}]},"92":{"line":2671,"type":"if","locations":[{"start":{"line":2671,"column":6},"end":{"line":2671,"column":6}},{"start":{"line":2671,"column":6},"end":{"line":2671,"column":6}}]},"93":{"line":2683,"type":"if","locations":[{"start":{"line":2683,"column":6},"end":{"line":2683,"column":6}},{"start":{"line":2683,"column":6},"end":{"line":2683,"column":6}}]},"94":{"line":2690,"type":"if","locations":[{"start":{"line":2690,"column":4},"end":{"line":2690,"column":4}},{"start":{"line":2690,"column":4},"end":{"line":2690,"column":4}}]},"95":{"line":2721,"type":"if","locations":[{"start":{"line":2721,"column":4},"end":{"line":2721,"column":4}},{"start":{"line":2721,"column":4},"end":{"line":2721,"column":4}}]},"96":{"line":2726,"type":"if","locations":[{"start":{"line":2726,"column":6},"end":{"line":2726,"column":6}},{"start":{"line":2726,"column":6},"end":{"line":2726,"column":6}}]},"97":{"line":2865,"type":"if","locations":[{"start":{"line":2865,"column":4},"end":{"line":2865,"column":4}},{"start":{"line":2865,"column":4},"end":{"line":2865,"column":4}}]},"98":{"line":2865,"type":"binary-expr","locations":[{"start":{"line":2865,"column":8},"end":{"line":2865,"column":18}},{"start":{"line":2865,"column":22},"end":{"line":2865,"column":57}}]},"99":{"line":2938,"type":"if","locations":[{"start":{"line":2938,"column":4},"end":{"line":2938,"column":4}},{"start":{"line":2938,"column":4},"end":{"line":2938,"column":4}}]},"100":{"line":2954,"type":"if","locations":[{"start":{"line":2954,"column":6},"end":{"line":2954,"column":6}},{"start":{"line":2954,"column":6},"end":{"line":2954,"column":6}}]},"101":{"line":3043,"type":"if","locations":[{"start":{"line":3043,"column":4},"end":{"line":3043,"column":4}},{"start":{"line":3043,"column":4},"end":{"line":3043,"column":4}}]},"102":{"line":3049,"type":"if","locations":[{"start":{"line":3049,"column":4},"end":{"line":3049,"column":4}},{"start":{"line":3049,"column":4},"end":{"line":3049,"column":4}}]},"103":{"line":3050,"type":"if","locations":[{"start":{"line":3050,"column":6},"end":{"line":3050,"column":6}},{"start":{"line":3050,"column":6},"end":{"line":3050,"column":6}}]},"104":{"line":3083,"type":"if","locations":[{"start":{"line":3083,"column":4},"end":{"line":3083,"column":4}},{"start":{"line":3083,"column":4},"end":{"line":3083,"column":4}}]},"105":{"line":3083,"type":"binary-expr","locations":[{"start":{"line":3083,"column":8},"end":{"line":3083,"column":13}},{"start":{"line":3083,"column":17},"end":{"line":3083,"column":42}}]},"106":{"line":3117,"type":"if","locations":[{"start":{"line":3117,"column":6},"end":{"line":3117,"column":6}},{"start":{"line":3117,"column":6},"end":{"line":3117,"column":6}}]},"107":{"line":3117,"type":"binary-expr","locations":[{"start":{"line":3117,"column":10},"end":{"line":3117,"column":24}},{"start":{"line":3117,"column":28},"end":{"line":3117,"column":48}}]},"108":{"line":3161,"type":"if","locations":[{"start":{"line":3161,"column":4},"end":{"line":3161,"column":4}},{"start":{"line":3161,"column":4},"end":{"line":3161,"column":4}}]},"109":{"line":3180,"type":"cond-expr","locations":[{"start":{"line":3180,"column":40},"end":{"line":3180,"column":50}},{"start":{"line":3180,"column":53},"end":{"line":3180,"column":65}}]},"110":{"line":3201,"type":"cond-expr","locations":[{"start":{"line":3201,"column":46},"end":{"line":3201,"column":51}},{"start":{"line":3201,"column":54},"end":{"line":3201,"column":55}}]},"111":{"line":3212,"type":"cond-expr","locations":[{"start":{"line":3212,"column":40},"end":{"line":3212,"column":65}},{"start":{"line":3212,"column":68},"end":{"line":3212,"column":69}}]},"112":{"line":3227,"type":"if","locations":[{"start":{"line":3227,"column":4},"end":{"line":3227,"column":4}},{"start":{"line":3227,"column":4},"end":{"line":3227,"column":4}}]},"113":{"line":3227,"type":"binary-expr","locations":[{"start":{"line":3227,"column":8},"end":{"line":3227,"column":30}},{"start":{"line":3227,"column":34},"end":{"line":3227,"column":55}}]},"114":{"line":3246,"type":"if","locations":[{"start":{"line":3246,"column":4},"end":{"line":3246,"column":4}},{"start":{"line":3246,"column":4},"end":{"line":3246,"column":4}}]},"115":{"line":3291,"type":"if","locations":[{"start":{"line":3291,"column":6},"end":{"line":3291,"column":6}},{"start":{"line":3291,"column":6},"end":{"line":3291,"column":6}}]},"116":{"line":3293,"type":"if","locations":[{"start":{"line":3293,"column":8},"end":{"line":3293,"column":8}},{"start":{"line":3293,"column":8},"end":{"line":3293,"column":8}}]},"117":{"line":3303,"type":"if","locations":[{"start":{"line":3303,"column":4},"end":{"line":3303,"column":4}},{"start":{"line":3303,"column":4},"end":{"line":3303,"column":4}}]},"118":{"line":3319,"type":"if","locations":[{"start":{"line":3319,"column":4},"end":{"line":3319,"column":4}},{"start":{"line":3319,"column":4},"end":{"line":3319,"column":4}}]},"119":{"line":3335,"type":"if","locations":[{"start":{"line":3335,"column":6},"end":{"line":3335,"column":6}},{"start":{"line":3335,"column":6},"end":{"line":3335,"column":6}}]},"120":{"line":3349,"type":"if","locations":[{"start":{"line":3349,"column":4},"end":{"line":3349,"column":4}},{"start":{"line":3349,"column":4},"end":{"line":3349,"column":4}}]},"121":{"line":3353,"type":"if","locations":[{"start":{"line":3353,"column":4},"end":{"line":3353,"column":4}},{"start":{"line":3353,"column":4},"end":{"line":3353,"column":4}}]},"122":{"line":3361,"type":"if","locations":[{"start":{"line":3361,"column":4},"end":{"line":3361,"column":4}},{"start":{"line":3361,"column":4},"end":{"line":3361,"column":4}}]},"123":{"line":3369,"type":"if","locations":[{"start":{"line":3369,"column":4},"end":{"line":3369,"column":4}},{"start":{"line":3369,"column":4},"end":{"line":3369,"column":4}}]},"124":{"line":3377,"type":"if","locations":[{"start":{"line":3377,"column":4},"end":{"line":3377,"column":4}},{"start":{"line":3377,"column":4},"end":{"line":3377,"column":4}}]},"125":{"line":3458,"type":"if","locations":[{"start":{"line":3458,"column":4},"end":{"line":3458,"column":4}},{"start":{"line":3458,"column":4},"end":{"line":3458,"column":4}}]},"126":{"line":3458,"type":"binary-expr","locations":[{"start":{"line":3458,"column":8},"end":{"line":3458,"column":30}},{"start":{"line":3458,"column":34},"end":{"line":3458,"column":55}}]},"127":{"line":3485,"type":"if","locations":[{"start":{"line":3485,"column":4},"end":{"line":3485,"column":4}},{"start":{"line":3485,"column":4},"end":{"line":3485,"column":4}}]},"128":{"line":3485,"type":"binary-expr","locations":[{"start":{"line":3485,"column":8},"end":{"line":3485,"column":13}},{"start":{"line":3485,"column":17},"end":{"line":3485,"column":35}}]},"129":{"line":3503,"type":"if","locations":[{"start":{"line":3503,"column":6},"end":{"line":3503,"column":6}},{"start":{"line":3503,"column":6},"end":{"line":3503,"column":6}}]},"130":{"line":3531,"type":"if","locations":[{"start":{"line":3531,"column":6},"end":{"line":3531,"column":6}},{"start":{"line":3531,"column":6},"end":{"line":3531,"column":6}}]},"131":{"line":3531,"type":"binary-expr","locations":[{"start":{"line":3531,"column":10},"end":{"line":3531,"column":24}},{"start":{"line":3531,"column":28},"end":{"line":3531,"column":48}}]},"132":{"line":3564,"type":"if","locations":[{"start":{"line":3564,"column":6},"end":{"line":3564,"column":6}},{"start":{"line":3564,"column":6},"end":{"line":3564,"column":6}}]},"133":{"line":3564,"type":"binary-expr","locations":[{"start":{"line":3564,"column":10},"end":{"line":3564,"column":40}},{"start":{"line":3564,"column":44},"end":{"line":3564,"column":68}}]},"134":{"line":3584,"type":"if","locations":[{"start":{"line":3584,"column":4},"end":{"line":3584,"column":4}},{"start":{"line":3584,"column":4},"end":{"line":3584,"column":4}}]},"135":{"line":3589,"type":"if","locations":[{"start":{"line":3589,"column":8},"end":{"line":3589,"column":8}},{"start":{"line":3589,"column":8},"end":{"line":3589,"column":8}}]},"136":{"line":3591,"type":"if","locations":[{"start":{"line":3591,"column":10},"end":{"line":3591,"column":10}},{"start":{"line":3591,"column":10},"end":{"line":3591,"column":10}}]},"137":{"line":3600,"type":"if","locations":[{"start":{"line":3600,"column":8},"end":{"line":3600,"column":8}},{"start":{"line":3600,"column":8},"end":{"line":3600,"column":8}}]},"138":{"line":3602,"type":"if","locations":[{"start":{"line":3602,"column":10},"end":{"line":3602,"column":10}},{"start":{"line":3602,"column":10},"end":{"line":3602,"column":10}}]},"139":{"line":3623,"type":"if","locations":[{"start":{"line":3623,"column":4},"end":{"line":3623,"column":4}},{"start":{"line":3623,"column":4},"end":{"line":3623,"column":4}}]},"140":{"line":3625,"type":"if","locations":[{"start":{"line":3625,"column":11},"end":{"line":3625,"column":11}},{"start":{"line":3625,"column":11},"end":{"line":3625,"column":11}}]},"141":{"line":3646,"type":"if","locations":[{"start":{"line":3646,"column":4},"end":{"line":3646,"column":4}},{"start":{"line":3646,"column":4},"end":{"line":3646,"column":4}}]},"142":{"line":3666,"type":"if","locations":[{"start":{"line":3666,"column":6},"end":{"line":3666,"column":6}},{"start":{"line":3666,"column":6},"end":{"line":3666,"column":6}}]},"143":{"line":3673,"type":"if","locations":[{"start":{"line":3673,"column":6},"end":{"line":3673,"column":6}},{"start":{"line":3673,"column":6},"end":{"line":3673,"column":6}}]},"144":{"line":3746,"type":"if","locations":[{"start":{"line":3746,"column":4},"end":{"line":3746,"column":4}},{"start":{"line":3746,"column":4},"end":{"line":3746,"column":4}}]},"145":{"line":3746,"type":"binary-expr","locations":[{"start":{"line":3746,"column":8},"end":{"line":3746,"column":18}},{"start":{"line":3746,"column":22},"end":{"line":3746,"column":58}}]},"146":{"line":3779,"type":"cond-expr","locations":[{"start":{"line":3779,"column":18},"end":{"line":3779,"column":25}},{"start":{"line":3779,"column":28},"end":{"line":3779,"column":37}}]},"147":{"line":3868,"type":"if","locations":[{"start":{"line":3868,"column":6},"end":{"line":3868,"column":6}},{"start":{"line":3868,"column":6},"end":{"line":3868,"column":6}}]},"148":{"line":3918,"type":"cond-expr","locations":[{"start":{"line":3918,"column":31},"end":{"line":3918,"column":46}},{"start":{"line":3918,"column":49},"end":{"line":3918,"column":69}}]},"149":{"line":3926,"type":"if","locations":[{"start":{"line":3926,"column":6},"end":{"line":3926,"column":6}},{"start":{"line":3926,"column":6},"end":{"line":3926,"column":6}}]},"150":{"line":3934,"type":"if","locations":[{"start":{"line":3934,"column":4},"end":{"line":3934,"column":4}},{"start":{"line":3934,"column":4},"end":{"line":3934,"column":4}}]},"151":{"line":3936,"type":"if","locations":[{"start":{"line":3936,"column":8},"end":{"line":3936,"column":8}},{"start":{"line":3936,"column":8},"end":{"line":3936,"column":8}}]},"152":{"line":3936,"type":"binary-expr","locations":[{"start":{"line":3936,"column":12},"end":{"line":3936,"column":33}},{"start":{"line":3936,"column":37},"end":{"line":3936,"column":61}}]},"153":{"line":3978,"type":"cond-expr","locations":[{"start":{"line":3978,"column":39},"end":{"line":3978,"column":50}},{"start":{"line":3978,"column":53},"end":{"line":3978,"column":76}}]},"154":{"line":3986,"type":"if","locations":[{"start":{"line":3986,"column":6},"end":{"line":3986,"column":6}},{"start":{"line":3986,"column":6},"end":{"line":3986,"column":6}}]},"155":{"line":3991,"type":"if","locations":[{"start":{"line":3991,"column":6},"end":{"line":3991,"column":6}},{"start":{"line":3991,"column":6},"end":{"line":3991,"column":6}}]},"156":{"line":3996,"type":"if","locations":[{"start":{"line":3996,"column":4},"end":{"line":3996,"column":4}},{"start":{"line":3996,"column":4},"end":{"line":3996,"column":4}}]},"157":{"line":3998,"type":"if","locations":[{"start":{"line":3998,"column":8},"end":{"line":3998,"column":8}},{"start":{"line":3998,"column":8},"end":{"line":3998,"column":8}}]},"158":{"line":3998,"type":"binary-expr","locations":[{"start":{"line":3998,"column":12},"end":{"line":3998,"column":33}},{"start":{"line":3998,"column":37},"end":{"line":3998,"column":61}}]},"159":{"line":4113,"type":"cond-expr","locations":[{"start":{"line":4114,"column":6},"end":{"line":4114,"column":30}},{"start":{"line":4114,"column":33},"end":{"line":4114,"column":37}}]},"160":{"line":4113,"type":"binary-expr","locations":[{"start":{"line":4113,"column":18},"end":{"line":4113,"column":38}},{"start":{"line":4113,"column":42},"end":{"line":4113,"column":95}}]},"161":{"line":4131,"type":"binary-expr","locations":[{"start":{"line":4131,"column":18},"end":{"line":4131,"column":30}},{"start":{"line":4131,"column":34},"end":{"line":4131,"column":46}}]},"162":{"line":4138,"type":"if","locations":[{"start":{"line":4138,"column":8},"end":{"line":4138,"column":8}},{"start":{"line":4138,"column":8},"end":{"line":4138,"column":8}}]},"163":{"line":4148,"type":"if","locations":[{"start":{"line":4148,"column":4},"end":{"line":4148,"column":4}},{"start":{"line":4148,"column":4},"end":{"line":4148,"column":4}}]},"164":{"line":4156,"type":"if","locations":[{"start":{"line":4156,"column":8},"end":{"line":4156,"column":8}},{"start":{"line":4156,"column":8},"end":{"line":4156,"column":8}}]},"165":{"line":4179,"type":"if","locations":[{"start":{"line":4179,"column":4},"end":{"line":4179,"column":4}},{"start":{"line":4179,"column":4},"end":{"line":4179,"column":4}}]},"166":{"line":4184,"type":"if","locations":[{"start":{"line":4184,"column":4},"end":{"line":4184,"column":4}},{"start":{"line":4184,"column":4},"end":{"line":4184,"column":4}}]},"167":{"line":4184,"type":"binary-expr","locations":[{"start":{"line":4184,"column":8},"end":{"line":4184,"column":26}},{"start":{"line":4184,"column":30},"end":{"line":4184,"column":48}}]},"168":{"line":4186,"type":"if","locations":[{"start":{"line":4186,"column":11},"end":{"line":4186,"column":11}},{"start":{"line":4186,"column":11},"end":{"line":4186,"column":11}}]},"169":{"line":4186,"type":"binary-expr","locations":[{"start":{"line":4186,"column":15},"end":{"line":4186,"column":25}},{"start":{"line":4186,"column":29},"end":{"line":4186,"column":39}}]},"170":{"line":4197,"type":"if","locations":[{"start":{"line":4197,"column":6},"end":{"line":4197,"column":6}},{"start":{"line":4197,"column":6},"end":{"line":4197,"column":6}}]},"171":{"line":4215,"type":"binary-expr","locations":[{"start":{"line":4215,"column":11},"end":{"line":4215,"column":17}},{"start":{"line":4215,"column":21},"end":{"line":4215,"column":50}}]},"172":{"line":4279,"type":"cond-expr","locations":[{"start":{"line":4279,"column":49},"end":{"line":4279,"column":69}},{"start":{"line":4279,"column":72},"end":{"line":4279,"column":81}}]},"173":{"line":4287,"type":"if","locations":[{"start":{"line":4287,"column":6},"end":{"line":4287,"column":6}},{"start":{"line":4287,"column":6},"end":{"line":4287,"column":6}}]},"174":{"line":4330,"type":"cond-expr","locations":[{"start":{"line":4330,"column":49},"end":{"line":4330,"column":58}},{"start":{"line":4330,"column":61},"end":{"line":4330,"column":81}}]},"175":{"line":4338,"type":"if","locations":[{"start":{"line":4338,"column":6},"end":{"line":4338,"column":6}},{"start":{"line":4338,"column":6},"end":{"line":4338,"column":6}}]},"176":{"line":4426,"type":"if","locations":[{"start":{"line":4426,"column":6},"end":{"line":4426,"column":6}},{"start":{"line":4426,"column":6},"end":{"line":4426,"column":6}}]},"177":{"line":4436,"type":"if","locations":[{"start":{"line":4436,"column":8},"end":{"line":4436,"column":8}},{"start":{"line":4436,"column":8},"end":{"line":4436,"column":8}}]},"178":{"line":4455,"type":"if","locations":[{"start":{"line":4455,"column":6},"end":{"line":4455,"column":6}},{"start":{"line":4455,"column":6},"end":{"line":4455,"column":6}}]},"179":{"line":4470,"type":"if","locations":[{"start":{"line":4470,"column":6},"end":{"line":4470,"column":6}},{"start":{"line":4470,"column":6},"end":{"line":4470,"column":6}}]},"180":{"line":4478,"type":"if","locations":[{"start":{"line":4478,"column":6},"end":{"line":4478,"column":6}},{"start":{"line":4478,"column":6},"end":{"line":4478,"column":6}}]},"181":{"line":4544,"type":"cond-expr","locations":[{"start":{"line":4544,"column":24},"end":{"line":4544,"column":43}},{"start":{"line":4544,"column":46},"end":{"line":4544,"column":48}}]},"182":{"line":4552,"type":"if","locations":[{"start":{"line":4552,"column":6},"end":{"line":4552,"column":6}},{"start":{"line":4552,"column":6},"end":{"line":4552,"column":6}}]},"183":{"line":4625,"type":"if","locations":[{"start":{"line":4625,"column":4},"end":{"line":4625,"column":4}},{"start":{"line":4625,"column":4},"end":{"line":4625,"column":4}}]},"184":{"line":4625,"type":"binary-expr","locations":[{"start":{"line":4625,"column":8},"end":{"line":4625,"column":18}},{"start":{"line":4625,"column":22},"end":{"line":4625,"column":57}}]},"185":{"line":4694,"type":"if","locations":[{"start":{"line":4694,"column":4},"end":{"line":4694,"column":4}},{"start":{"line":4694,"column":4},"end":{"line":4694,"column":4}}]},"186":{"line":4737,"type":"cond-expr","locations":[{"start":{"line":4737,"column":44},"end":{"line":4737,"column":53}},{"start":{"line":4737,"column":56},"end":{"line":4737,"column":76}}]},"187":{"line":4754,"type":"if","locations":[{"start":{"line":4754,"column":4},"end":{"line":4754,"column":4}},{"start":{"line":4754,"column":4},"end":{"line":4754,"column":4}}]},"188":{"line":4775,"type":"if","locations":[{"start":{"line":4775,"column":4},"end":{"line":4775,"column":4}},{"start":{"line":4775,"column":4},"end":{"line":4775,"column":4}}]},"189":{"line":5057,"type":"if","locations":[{"start":{"line":5057,"column":4},"end":{"line":5057,"column":4}},{"start":{"line":5057,"column":4},"end":{"line":5057,"column":4}}]},"190":{"line":5058,"type":"if","locations":[{"start":{"line":5058,"column":6},"end":{"line":5058,"column":6}},{"start":{"line":5058,"column":6},"end":{"line":5058,"column":6}}]},"191":{"line":5058,"type":"binary-expr","locations":[{"start":{"line":5058,"column":10},"end":{"line":5058,"column":36}},{"start":{"line":5058,"column":40},"end":{"line":5058,"column":70}}]},"192":{"line":5063,"type":"if","locations":[{"start":{"line":5063,"column":11},"end":{"line":5063,"column":11}},{"start":{"line":5063,"column":11},"end":{"line":5063,"column":11}}]},"193":{"line":5083,"type":"if","locations":[{"start":{"line":5083,"column":4},"end":{"line":5083,"column":4}},{"start":{"line":5083,"column":4},"end":{"line":5083,"column":4}}]},"194":{"line":5089,"type":"if","locations":[{"start":{"line":5089,"column":4},"end":{"line":5089,"column":4}},{"start":{"line":5089,"column":4},"end":{"line":5089,"column":4}}]},"195":{"line":5090,"type":"cond-expr","locations":[{"start":{"line":5090,"column":36},"end":{"line":5090,"column":50}},{"start":{"line":5090,"column":53},"end":{"line":5090,"column":54}}]},"196":{"line":5095,"type":"if","locations":[{"start":{"line":5095,"column":11},"end":{"line":5095,"column":11}},{"start":{"line":5095,"column":11},"end":{"line":5095,"column":11}}]},"197":{"line":5119,"type":"if","locations":[{"start":{"line":5119,"column":4},"end":{"line":5119,"column":4}},{"start":{"line":5119,"column":4},"end":{"line":5119,"column":4}}]},"198":{"line":5120,"type":"cond-expr","locations":[{"start":{"line":5121,"column":8},"end":{"line":5121,"column":47}},{"start":{"line":5122,"column":8},"end":{"line":5122,"column":9}}]},"199":{"line":5126,"type":"if","locations":[{"start":{"line":5126,"column":4},"end":{"line":5126,"column":4}},{"start":{"line":5126,"column":4},"end":{"line":5126,"column":4}}]},"200":{"line":5221,"type":"binary-expr","locations":[{"start":{"line":5221,"column":11},"end":{"line":5221,"column":40}},{"start":{"line":5221,"column":44},"end":{"line":5221,"column":54}}]},"201":{"line":5222,"type":"if","locations":[{"start":{"line":5222,"column":6},"end":{"line":5222,"column":6}},{"start":{"line":5222,"column":6},"end":{"line":5222,"column":6}}]},"202":{"line":5254,"type":"if","locations":[{"start":{"line":5254,"column":4},"end":{"line":5254,"column":4}},{"start":{"line":5254,"column":4},"end":{"line":5254,"column":4}}]},"203":{"line":5254,"type":"binary-expr","locations":[{"start":{"line":5254,"column":8},"end":{"line":5254,"column":48}},{"start":{"line":5254,"column":52},"end":{"line":5254,"column":86}}]},"204":{"line":5307,"type":"if","locations":[{"start":{"line":5307,"column":4},"end":{"line":5307,"column":4}},{"start":{"line":5307,"column":4},"end":{"line":5307,"column":4}}]},"205":{"line":5353,"type":"if","locations":[{"start":{"line":5353,"column":6},"end":{"line":5353,"column":6}},{"start":{"line":5353,"column":6},"end":{"line":5353,"column":6}}]},"206":{"line":5362,"type":"if","locations":[{"start":{"line":5362,"column":8},"end":{"line":5362,"column":8}},{"start":{"line":5362,"column":8},"end":{"line":5362,"column":8}}]},"207":{"line":5362,"type":"binary-expr","locations":[{"start":{"line":5362,"column":12},"end":{"line":5362,"column":31}},{"start":{"line":5362,"column":35},"end":{"line":5362,"column":72}}]},"208":{"line":5434,"type":"if","locations":[{"start":{"line":5434,"column":8},"end":{"line":5434,"column":8}},{"start":{"line":5434,"column":8},"end":{"line":5434,"column":8}}]},"209":{"line":5448,"type":"if","locations":[{"start":{"line":5448,"column":8},"end":{"line":5448,"column":8}},{"start":{"line":5448,"column":8},"end":{"line":5448,"column":8}}]},"210":{"line":5460,"type":"if","locations":[{"start":{"line":5460,"column":4},"end":{"line":5460,"column":4}},{"start":{"line":5460,"column":4},"end":{"line":5460,"column":4}}]},"211":{"line":5464,"type":"if","locations":[{"start":{"line":5464,"column":4},"end":{"line":5464,"column":4}},{"start":{"line":5464,"column":4},"end":{"line":5464,"column":4}}]},"212":{"line":5472,"type":"if","locations":[{"start":{"line":5472,"column":4},"end":{"line":5472,"column":4}},{"start":{"line":5472,"column":4},"end":{"line":5472,"column":4}}]},"213":{"line":5476,"type":"if","locations":[{"start":{"line":5476,"column":4},"end":{"line":5476,"column":4}},{"start":{"line":5476,"column":4},"end":{"line":5476,"column":4}}]},"214":{"line":5485,"type":"if","locations":[{"start":{"line":5485,"column":4},"end":{"line":5485,"column":4}},{"start":{"line":5485,"column":4},"end":{"line":5485,"column":4}}]},"215":{"line":5489,"type":"if","locations":[{"start":{"line":5489,"column":4},"end":{"line":5489,"column":4}},{"start":{"line":5489,"column":4},"end":{"line":5489,"column":4}}]},"216":{"line":5503,"type":"if","locations":[{"start":{"line":5503,"column":4},"end":{"line":5503,"column":4}},{"start":{"line":5503,"column":4},"end":{"line":5503,"column":4}}]},"217":{"line":5542,"type":"if","locations":[{"start":{"line":5542,"column":4},"end":{"line":5542,"column":4}},{"start":{"line":5542,"column":4},"end":{"line":5542,"column":4}}]},"218":{"line":5547,"type":"if","locations":[{"start":{"line":5547,"column":4},"end":{"line":5547,"column":4}},{"start":{"line":5547,"column":4},"end":{"line":5547,"column":4}}]},"219":{"line":5557,"type":"binary-expr","locations":[{"start":{"line":5557,"column":13},"end":{"line":5557,"column":47}},{"start":{"line":5557,"column":51},"end":{"line":5557,"column":60}},{"start":{"line":5557,"column":64},"end":{"line":5557,"column":70}}]},"220":{"line":5564,"type":"if","locations":[{"start":{"line":5564,"column":4},"end":{"line":5564,"column":4}},{"start":{"line":5564,"column":4},"end":{"line":5564,"column":4}}]},"221":{"line":5569,"type":"if","locations":[{"start":{"line":5569,"column":12},"end":{"line":5569,"column":12}},{"start":{"line":5569,"column":12},"end":{"line":5569,"column":12}}]},"222":{"line":5576,"type":"if","locations":[{"start":{"line":5576,"column":12},"end":{"line":5576,"column":12}},{"start":{"line":5576,"column":12},"end":{"line":5576,"column":12}}]},"223":{"line":5584,"type":"if","locations":[{"start":{"line":5584,"column":8},"end":{"line":5584,"column":8}},{"start":{"line":5584,"column":8},"end":{"line":5584,"column":8}}]},"224":{"line":5598,"type":"binary-expr","locations":[{"start":{"line":5598,"column":4},"end":{"line":5598,"column":12}},{"start":{"line":5598,"column":17},"end":{"line":5598,"column":47}}]},"225":{"line":5601,"type":"if","locations":[{"start":{"line":5601,"column":6},"end":{"line":5601,"column":6}},{"start":{"line":5601,"column":6},"end":{"line":5601,"column":6}}]},"226":{"line":5609,"type":"if","locations":[{"start":{"line":5609,"column":4},"end":{"line":5609,"column":4}},{"start":{"line":5609,"column":4},"end":{"line":5609,"column":4}}]},"227":{"line":5610,"type":"if","locations":[{"start":{"line":5610,"column":6},"end":{"line":5610,"column":6}},{"start":{"line":5610,"column":6},"end":{"line":5610,"column":6}}]},"228":{"line":5615,"type":"binary-expr","locations":[{"start":{"line":5615,"column":15},"end":{"line":5615,"column":23}},{"start":{"line":5615,"column":27},"end":{"line":5615,"column":28}}]},"229":{"line":5622,"type":"if","locations":[{"start":{"line":5622,"column":4},"end":{"line":5622,"column":4}},{"start":{"line":5622,"column":4},"end":{"line":5622,"column":4}}]},"230":{"line":5623,"type":"if","locations":[{"start":{"line":5623,"column":6},"end":{"line":5623,"column":6}},{"start":{"line":5623,"column":6},"end":{"line":5623,"column":6}}]},"231":{"line":5642,"type":"if","locations":[{"start":{"line":5642,"column":4},"end":{"line":5642,"column":4}},{"start":{"line":5642,"column":4},"end":{"line":5642,"column":4}}]},"232":{"line":5668,"type":"if","locations":[{"start":{"line":5668,"column":6},"end":{"line":5668,"column":6}},{"start":{"line":5668,"column":6},"end":{"line":5668,"column":6}}]},"233":{"line":5689,"type":"if","locations":[{"start":{"line":5689,"column":6},"end":{"line":5689,"column":6}},{"start":{"line":5689,"column":6},"end":{"line":5689,"column":6}}]},"234":{"line":5712,"type":"if","locations":[{"start":{"line":5712,"column":6},"end":{"line":5712,"column":6}},{"start":{"line":5712,"column":6},"end":{"line":5712,"column":6}}]},"235":{"line":5740,"type":"if","locations":[{"start":{"line":5740,"column":4},"end":{"line":5740,"column":4}},{"start":{"line":5740,"column":4},"end":{"line":5740,"column":4}}]},"236":{"line":5742,"type":"if","locations":[{"start":{"line":5742,"column":11},"end":{"line":5742,"column":11}},{"start":{"line":5742,"column":11},"end":{"line":5742,"column":11}}]},"237":{"line":5759,"type":"if","locations":[{"start":{"line":5759,"column":12},"end":{"line":5759,"column":12}},{"start":{"line":5759,"column":12},"end":{"line":5759,"column":12}}]},"238":{"line":5806,"type":"if","locations":[{"start":{"line":5806,"column":4},"end":{"line":5806,"column":4}},{"start":{"line":5806,"column":4},"end":{"line":5806,"column":4}}]},"239":{"line":5825,"type":"if","locations":[{"start":{"line":5825,"column":8},"end":{"line":5825,"column":8}},{"start":{"line":5825,"column":8},"end":{"line":5825,"column":8}}]},"240":{"line":5836,"type":"if","locations":[{"start":{"line":5836,"column":6},"end":{"line":5836,"column":6}},{"start":{"line":5836,"column":6},"end":{"line":5836,"column":6}}]},"241":{"line":5856,"type":"if","locations":[{"start":{"line":5856,"column":8},"end":{"line":5856,"column":8}},{"start":{"line":5856,"column":8},"end":{"line":5856,"column":8}}]},"242":{"line":5895,"type":"if","locations":[{"start":{"line":5895,"column":8},"end":{"line":5895,"column":8}},{"start":{"line":5895,"column":8},"end":{"line":5895,"column":8}}]},"243":{"line":5968,"type":"if","locations":[{"start":{"line":5968,"column":8},"end":{"line":5968,"column":8}},{"start":{"line":5968,"column":8},"end":{"line":5968,"column":8}}]},"244":{"line":6026,"type":"cond-expr","locations":[{"start":{"line":6026,"column":39},"end":{"line":6026,"column":51}},{"start":{"line":6026,"column":54},"end":{"line":6026,"column":55}}]},"245":{"line":6027,"type":"cond-expr","locations":[{"start":{"line":6027,"column":39},"end":{"line":6027,"column":51}},{"start":{"line":6027,"column":54},"end":{"line":6027,"column":66}}]},"246":{"line":6028,"type":"binary-expr","locations":[{"start":{"line":6028,"column":16},"end":{"line":6028,"column":36}},{"start":{"line":6028,"column":40},"end":{"line":6028,"column":52}}]},"247":{"line":6030,"type":"if","locations":[{"start":{"line":6030,"column":4},"end":{"line":6030,"column":4}},{"start":{"line":6030,"column":4},"end":{"line":6030,"column":4}}]},"248":{"line":6031,"type":"cond-expr","locations":[{"start":{"line":6031,"column":28},"end":{"line":6031,"column":29}},{"start":{"line":6031,"column":32},"end":{"line":6031,"column":34}}]},"249":{"line":6034,"type":"if","locations":[{"start":{"line":6034,"column":4},"end":{"line":6034,"column":4}},{"start":{"line":6034,"column":4},"end":{"line":6034,"column":4}}]},"250":{"line":6102,"type":"binary-expr","locations":[{"start":{"line":6102,"column":19},"end":{"line":6102,"column":32}},{"start":{"line":6102,"column":36},"end":{"line":6102,"column":78}}]},"251":{"line":6128,"type":"switch","locations":[{"start":{"line":6129,"column":6},"end":{"line":6130,"column":24}},{"start":{"line":6132,"column":6},"end":{"line":6135,"column":10}},{"start":{"line":6137,"column":6},"end":{"line":6142,"column":10}},{"start":{"line":6144,"column":6},"end":{"line":6147,"column":24}},{"start":{"line":6149,"column":6},"end":{"line":6150,"column":93}}]},"252":{"line":6145,"type":"cond-expr","locations":[{"start":{"line":6146,"column":10},"end":{"line":6146,"column":45}},{"start":{"line":6147,"column":10},"end":{"line":6147,"column":23}}]},"253":{"line":6174,"type":"if","locations":[{"start":{"line":6174,"column":4},"end":{"line":6174,"column":4}},{"start":{"line":6174,"column":4},"end":{"line":6174,"column":4}}]},"254":{"line":6208,"type":"binary-expr","locations":[{"start":{"line":6208,"column":9},"end":{"line":6208,"column":15}},{"start":{"line":6208,"column":19},"end":{"line":6208,"column":21}}]},"255":{"line":6229,"type":"if","locations":[{"start":{"line":6229,"column":4},"end":{"line":6229,"column":4}},{"start":{"line":6229,"column":4},"end":{"line":6229,"column":4}}]},"256":{"line":6233,"type":"cond-expr","locations":[{"start":{"line":6233,"column":19},"end":{"line":6233,"column":20}},{"start":{"line":6233,"column":23},"end":{"line":6233,"column":25}}]},"257":{"line":6250,"type":"if","locations":[{"start":{"line":6250,"column":6},"end":{"line":6250,"column":6}},{"start":{"line":6250,"column":6},"end":{"line":6250,"column":6}}]},"258":{"line":6286,"type":"if","locations":[{"start":{"line":6286,"column":4},"end":{"line":6286,"column":4}},{"start":{"line":6286,"column":4},"end":{"line":6286,"column":4}}]},"259":{"line":6288,"type":"if","locations":[{"start":{"line":6288,"column":8},"end":{"line":6288,"column":8}},{"start":{"line":6288,"column":8},"end":{"line":6288,"column":8}}]},"260":{"line":6296,"type":"if","locations":[{"start":{"line":6296,"column":6},"end":{"line":6296,"column":6}},{"start":{"line":6296,"column":6},"end":{"line":6296,"column":6}}]},"261":{"line":6320,"type":"if","locations":[{"start":{"line":6320,"column":4},"end":{"line":6320,"column":4}},{"start":{"line":6320,"column":4},"end":{"line":6320,"column":4}}]},"262":{"line":6323,"type":"if","locations":[{"start":{"line":6323,"column":8},"end":{"line":6323,"column":8}},{"start":{"line":6323,"column":8},"end":{"line":6323,"column":8}}]},"263":{"line":6330,"type":"if","locations":[{"start":{"line":6330,"column":8},"end":{"line":6330,"column":8}},{"start":{"line":6330,"column":8},"end":{"line":6330,"column":8}}]},"264":{"line":6366,"type":"cond-expr","locations":[{"start":{"line":6366,"column":50},"end":{"line":6366,"column":53}},{"start":{"line":6366,"column":56},"end":{"line":6366,"column":58}}]},"265":{"line":6438,"type":"switch","locations":[{"start":{"line":6439,"column":6},"end":{"line":6439,"column":20}},{"start":{"line":6440,"column":6},"end":{"line":6440,"column":21}},{"start":{"line":6441,"column":6},"end":{"line":6446,"column":21}},{"start":{"line":6448,"column":6},"end":{"line":6477,"column":21}},{"start":{"line":6479,"column":6},"end":{"line":6487,"column":21}}]},"266":{"line":6442,"type":"if","locations":[{"start":{"line":6442,"column":8},"end":{"line":6442,"column":8}},{"start":{"line":6442,"column":8},"end":{"line":6442,"column":8}}]},"267":{"line":6453,"type":"switch","locations":[{"start":{"line":6454,"column":10},"end":{"line":6454,"column":19}},{"start":{"line":6455,"column":10},"end":{"line":6455,"column":19}},{"start":{"line":6456,"column":10},"end":{"line":6456,"column":19}},{"start":{"line":6457,"column":10},"end":{"line":6457,"column":19}},{"start":{"line":6458,"column":10},"end":{"line":6458,"column":19}},{"start":{"line":6459,"column":10},"end":{"line":6459,"column":19}},{"start":{"line":6460,"column":10},"end":{"line":6460,"column":19}},{"start":{"line":6461,"column":10},"end":{"line":6461,"column":19}},{"start":{"line":6462,"column":10},"end":{"line":6462,"column":19}},{"start":{"line":6463,"column":10},"end":{"line":6463,"column":19}},{"start":{"line":6464,"column":10},"end":{"line":6464,"column":19}},{"start":{"line":6465,"column":10},"end":{"line":6465,"column":19}},{"start":{"line":6466,"column":10},"end":{"line":6466,"column":19}},{"start":{"line":6467,"column":10},"end":{"line":6467,"column":19}},{"start":{"line":6468,"column":10},"end":{"line":6468,"column":19}},{"start":{"line":6469,"column":10},"end":{"line":6469,"column":19}},{"start":{"line":6470,"column":10},"end":{"line":6471,"column":32}}]},"268":{"line":6473,"type":"if","locations":[{"start":{"line":6473,"column":8},"end":{"line":6473,"column":8}},{"start":{"line":6473,"column":8},"end":{"line":6473,"column":8}}]},"269":{"line":6483,"type":"if","locations":[{"start":{"line":6483,"column":8},"end":{"line":6483,"column":8}},{"start":{"line":6483,"column":8},"end":{"line":6483,"column":8}}]},"270":{"line":6503,"type":"switch","locations":[{"start":{"line":6504,"column":6},"end":{"line":6504,"column":20}},{"start":{"line":6505,"column":6},"end":{"line":6505,"column":21}},{"start":{"line":6506,"column":6},"end":{"line":6507,"column":35}},{"start":{"line":6509,"column":6},"end":{"line":6534,"column":35}},{"start":{"line":6536,"column":6},"end":{"line":6539,"column":50}}]},"271":{"line":6514,"type":"switch","locations":[{"start":{"line":6515,"column":10},"end":{"line":6515,"column":19}},{"start":{"line":6516,"column":10},"end":{"line":6516,"column":19}},{"start":{"line":6517,"column":10},"end":{"line":6517,"column":19}},{"start":{"line":6518,"column":10},"end":{"line":6518,"column":19}},{"start":{"line":6519,"column":10},"end":{"line":6519,"column":19}},{"start":{"line":6520,"column":10},"end":{"line":6520,"column":19}},{"start":{"line":6521,"column":10},"end":{"line":6521,"column":19}},{"start":{"line":6522,"column":10},"end":{"line":6522,"column":19}},{"start":{"line":6523,"column":10},"end":{"line":6523,"column":19}},{"start":{"line":6524,"column":10},"end":{"line":6524,"column":19}},{"start":{"line":6525,"column":10},"end":{"line":6525,"column":19}},{"start":{"line":6526,"column":10},"end":{"line":6526,"column":19}},{"start":{"line":6527,"column":10},"end":{"line":6527,"column":19}},{"start":{"line":6528,"column":10},"end":{"line":6528,"column":19}},{"start":{"line":6529,"column":10},"end":{"line":6529,"column":19}},{"start":{"line":6530,"column":10},"end":{"line":6530,"column":19}},{"start":{"line":6531,"column":10},"end":{"line":6532,"column":32}}]},"272":{"line":6598,"type":"if","locations":[{"start":{"line":6598,"column":4},"end":{"line":6598,"column":4}},{"start":{"line":6598,"column":4},"end":{"line":6598,"column":4}}]},"273":{"line":6618,"type":"if","locations":[{"start":{"line":6618,"column":4},"end":{"line":6618,"column":4}},{"start":{"line":6618,"column":4},"end":{"line":6618,"column":4}}]},"274":{"line":6651,"type":"if","locations":[{"start":{"line":6651,"column":6},"end":{"line":6651,"column":6}},{"start":{"line":6651,"column":6},"end":{"line":6651,"column":6}}]},"275":{"line":6658,"type":"cond-expr","locations":[{"start":{"line":6658,"column":49},"end":{"line":6658,"column":55}},{"start":{"line":6658,"column":58},"end":{"line":6658,"column":62}}]}},"code":["/*"," * @name Lazy.js"," *"," * @fileOverview"," * Lazy.js is a lazy evaluation library for JavaScript."," *"," * This has been done before. For examples see:"," *"," * - [wu.js](http://fitzgen.github.io/wu.js/)"," * - [Linq.js](http://linqjs.codeplex.com/)"," * - [from.js](https://github.com/suckgamoni/fromjs/)"," * - [IxJS](http://rx.codeplex.com/)"," * - [sloth.js](http://rfw.name/sloth.js/)"," *"," * However, at least at present, Lazy.js is faster (on average) than any of"," * those libraries. It is also more complete, with nearly all of the"," * functionality of [Underscore](http://underscorejs.org/) and"," * [Lo-Dash](http://lodash.com/)."," *"," * Finding your way around the code"," * --------------------------------"," *"," * At the heart of Lazy.js is the {@link Sequence} object. You create an initial"," * sequence using {@link Lazy}, which can accept an array, object, or string."," * You can then \"chain\" together methods from this sequence, creating a new"," * sequence with each call."," *"," * Here's an example:"," *"," *     var data = getReallyBigArray();"," *"," *     var statistics = Lazy(data)"," *       .map(transform)"," *       .filter(validate)"," *       .reduce(aggregate);"," *"," * {@link Sequence} is the foundation of other, more specific sequence types."," *"," * An {@link ArrayLikeSequence} provides indexed access to its elements."," *"," * An {@link ObjectLikeSequence} consists of key/value pairs."," *"," * A {@link StringLikeSequence} is like a string (duh): actually, it is an"," * {@link ArrayLikeSequence} whose elements happen to be characters."," *"," * An {@link AsyncSequence} is special: it iterates over its elements"," * asynchronously (so calling `each` generally begins an asynchronous loop and"," * returns immediately)."," *"," * For more information"," * --------------------"," *"," * I wrote a blog post that explains a little bit more about Lazy.js, which you"," * can read [here](http://philosopherdeveloper.com/posts/introducing-lazy-js.html)."," *"," * You can also [create an issue on GitHub](https://github.com/dtao/lazy.js/issues)"," * if you have any issues with the library. I work through them eventually."," *"," * [@dtao](https://github.com/dtao)"," */","","(function(root, factory) {","  if (typeof define === 'function' && define.amd) {","    define(factory);","  } else if (typeof exports === 'object') {","    module.exports = factory();","  } else {","    root.Lazy = factory();","  }","})(this, function(context) {","  /**","   * Wraps an object and returns a {@link Sequence}. For `null` or `undefined`,","   * simply returns an empty sequence (see {@link Lazy.strict} for a stricter","   * implementation).","   *","   * - For **arrays**, Lazy will create a sequence comprising the elements in","   *   the array (an {@link ArrayLikeSequence}).","   * - For **objects**, Lazy will create a sequence of key/value pairs","   *   (an {@link ObjectLikeSequence}).","   * - For **strings**, Lazy will create a sequence of characters (a","   *   {@link StringLikeSequence}).","   *","   * @public","   * @param {Array|Object|string} source An array, object, or string to wrap.","   * @returns {Sequence} The wrapped lazy object.","   *","   * @exampleHelpers","   * // Utility functions to provide to all examples","   * function increment(x) { return x + 1; }","   * function isEven(x) { return x % 2 === 0; }","   * function isPositive(x) { return x > 0; }","   * function isNegative(x) { return x < 0; }","   *","   * // HACK!","   * // autodoc tests for private methods don't pull in all variables defined","   * // within the current scope :(","   * var isArray = Array.isArray;","   *","   * @examples","   * Lazy([1, 2, 4])       // instanceof Lazy.ArrayLikeSequence","   * Lazy({ foo: \"bar\" })  // instanceof Lazy.ObjectLikeSequence","   * Lazy(\"hello, world!\") // instanceof Lazy.StringLikeSequence","   * Lazy()                // sequence: []","   * Lazy(null)            // sequence: []","   */","  function Lazy(source) {","    if (isArray(source)) {","      return new ArrayWrapper(source);","","    } else if (typeof source === \"string\") {","      return new StringWrapper(source);","","    } else if (source instanceof Sequence) {","      return source;","    }","","    if (Lazy.extensions) {","      var extensions = Lazy.extensions, length = extensions.length, result;","      while (!result && length--) {","        result = extensions[length](source);","      }","      if (result) {","        return result;","      }","    }","","    return new ObjectWrapper(source);","  }","","  Lazy.VERSION = '0.5.0';","","  /*** Utility methods of questionable value ***/","","  Lazy.noop = function noop() {};","  Lazy.identity = function identity(x) { return x; };","","  /**","   * Provides a stricter version of {@link Lazy} which throws an error when","   * attempting to wrap `null`, `undefined`, or numeric or boolean values as a","   * sequence.","   *","   * @public","   * @returns {Function} A stricter version of the {@link Lazy} helper function.","   *","   * @examples","   * var Strict = Lazy.strict();","   *","   * Strict()                  // throws","   * Strict(null)              // throws","   * Strict(true)              // throws","   * Strict(5)                 // throws","   * Strict([1, 2, 3])         // instanceof Lazy.ArrayLikeSequence","   * Strict({ foo: \"bar\" })    // instanceof Lazy.ObjectLikeSequence","   * Strict(\"hello, world!\")   // instanceof Lazy.StringLikeSequence","   *","   * // Let's also ensure the static functions are still there.","   * Strict.range(3)           // sequence: [0, 1, 2]","   * Strict.generate(Date.now) // instanceof Lazy.GeneratedSequence","   */","  Lazy.strict = function strict() {","    function StrictLazy(source) {","      if (source == null) {","        throw new Error(\"You cannot wrap null or undefined using Lazy.\");","      }","","      if (typeof source === \"number\" || typeof source === \"boolean\") {","        throw new Error(\"You cannot wrap primitive values using Lazy.\");","      }","","      return Lazy(source);","    };","","    Lazy(Lazy).each(function(property, name) {","      StrictLazy[name] = property;","    });","","    return StrictLazy;","  };","","  /**","   * The `Sequence` object provides a unified API encapsulating the notion of","   * zero or more consecutive elements in a collection, stream, etc.","   *","   * Lazy evaluation","   * ---------------","   *","   * Generally speaking, creating a sequence should not be an expensive operation,","   * and should not iterate over an underlying source or trigger any side effects.","   * This means that chaining together methods that return sequences incurs only","   * the cost of creating the `Sequence` objects themselves and not the cost of","   * iterating an underlying data source multiple times.","   *","   * The following code, for example, creates 4 sequences and does nothing with","   * `source`:","   *","   *     var seq = Lazy(source) // 1st sequence","   *       .map(func)           // 2nd","   *       .filter(pred)        // 3rd","   *       .reverse();          // 4th","   *","   * Lazy's convention is to hold off on iterating or otherwise *doing* anything","   * (aside from creating `Sequence` objects) until you call `each`:","   *","   *     seq.each(function(x) { console.log(x); });","   *","   * Defining custom sequences","   * -------------------------","   *","   * Defining your own type of sequence is relatively simple:","   *","   * 1. Pass a *method name* and an object containing *function overrides* to","   *    {@link Sequence.define}. If the object includes a function called `init`,","   *    this function will be called upon initialization.","   * 2. The object should include at least either a `getIterator` method or an","   *    `each` method. The former supports both asynchronous and synchronous","   *    iteration, but is slightly more cumbersome to implement. The latter","   *    supports synchronous iteration and can be automatically implemented in","   *    terms of the former. You can also implement both if you want, e.g. to","   *    optimize performance. For more info, see {@link Iterator} and","   *    {@link AsyncSequence}.","   *","   * As a trivial example, the following code defines a new method, `sample`,","   * which randomly may or may not include each element from its parent.","   *","   *     Lazy.Sequence.define(\"sample\", {","   *       each: function(fn) {","   *         return this.parent.each(function(e) {","   *           // 50/50 chance of including this element.","   *           if (Math.random() > 0.5) {","   *             return fn(e);","   *           }","   *         });","   *       }","   *     });","   *","   * (Of course, the above could also easily have been implemented using","   * {@link #filter} instead of creating a custom sequence. But I *did* say this","   * was a trivial example, to be fair.)","   *","   * Now it will be possible to create this type of sequence from any parent","   * sequence by calling the method name you specified. In other words, you can","   * now do this:","   *","   *     Lazy(arr).sample();","   *     Lazy(arr).map(func).sample();","   *     Lazy(arr).map(func).filter(pred).sample();","   *","   * Etc., etc.","   *","   * @public","   * @constructor","   */","  function Sequence() {}","","  /**","   * Create a new constructor function for a type inheriting from `Sequence`.","   *","   * @public","   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be","   *     used for constructing the new sequence. The method will be attached to","   *     the `Sequence` prototype so that it can be chained with any other","   *     sequence methods, like {@link #map}, {@link #filter}, etc.","   * @param {Object} overrides An object containing function overrides for this","   *     new sequence type. **Must** include either `getIterator` or `each` (or","   *     both). *May* include an `init` method as well. For these overrides,","   *     `this` will be the new sequence, and `this.parent` will be the base","   *     sequence from which the new sequence was constructed.","   * @returns {Function} A constructor for a new type inheriting from `Sequence`.","   *","   * @examples","   * // This sequence type logs every element to the specified logger as it","   * // iterates over it.","   * Lazy.Sequence.define(\"verbose\", {","   *   init: function(logger) {","   *     this.logger = logger;","   *   },","   *","   *   each: function(fn) {","   *     var logger = this.logger;","   *     return this.parent.each(function(e, i) {","   *       logger(e);","   *       return fn(e, i);","   *     });","   *   }","   * });","   *","   * Lazy([1, 2, 3]).verbose(logger).each(Lazy.noop) // calls logger 3 times","   */","  Sequence.define = function define(methodName, overrides) {","    if (!overrides || (!overrides.getIterator && !overrides.each)) {","      throw new Error(\"A custom sequence must implement *at least* getIterator or each!\");","    }","","    return defineSequenceType(Sequence, methodName, overrides);","  };","","  /**","   * Gets the number of elements in the sequence. In some cases, this may","   * require eagerly evaluating the sequence.","   *","   * @public","   * @returns {number} The number of elements in the sequence.","   *","   * @examples","   * Lazy([1, 2, 3]).size();                 // => 3","   * Lazy([1, 2]).map(Lazy.identity).size(); // => 2","   * Lazy([1, 2, 3]).reject(isEven).size();  // => 2","   * Lazy([1, 2, 3]).take(1).size();         // => 1","   * Lazy({ foo: 1, bar: 2 }).size();        // => 2","   * Lazy('hello').size();                   // => 5","   */","  Sequence.prototype.size = function size() {","    return this.getIndex().length();","  };","","  /**","   * Creates an {@link Iterator} object with two methods, `moveNext` -- returning","   * true or false -- and `current` -- returning the current value.","   *","   * This method is used when asynchronously iterating over sequences. Any type","   * inheriting from `Sequence` must implement this method or it can't support","   * asynchronous iteration.","   *","   * Note that **this method is not intended to be used directly by application","   * code.** Rather, it is intended as a means for implementors to potentially","   * define custom sequence types that support either synchronous or","   * asynchronous iteration.","   *","   * @public","   * @returns {Iterator} An iterator object.","   *","   * @examples","   * var iterator = Lazy([1, 2]).getIterator();","   *","   * iterator.moveNext(); // => true","   * iterator.current();  // => 1","   * iterator.moveNext(); // => true","   * iterator.current();  // => 2","   * iterator.moveNext(); // => false","   */","  Sequence.prototype.getIterator = function getIterator() {","    return new Iterator(this);","  };","","  /**","   * Gets the root sequence underlying the current chain of sequences.","   */","  Sequence.prototype.root = function root() {","    return this.parent.root();","  };","","  /**","   * Whether or not the current sequence is an asynchronous one. This is more","   * accurate than checking `instanceof {@link AsyncSequence}` because, for","   * example, `Lazy([1, 2, 3]).async().map(Lazy.identity)` returns a sequence","   * that iterates asynchronously even though it's not an instance of","   * `AsyncSequence`.","   *","   * @returns {boolean} Whether or not the current sequence is an asynchronous one.","   */","  Sequence.prototype.isAsync = function isAsync() {","    return this.parent ? this.parent.isAsync() : false;","  };","","  /**","   * Evaluates the sequence and produces the appropriate value (an array in most","   * cases, an object for {@link ObjectLikeSequence}s or a string for","   * {@link StringLikeSequence}s).","   *","   * @returns {Array|string|Object} The value resulting from fully evaluating","   *     the sequence.","   */","  Sequence.prototype.value = function value() {","    return this.toArray();","  };","","  /**","   * Applies the current transformation chain to a given source, returning the","   * resulting value.","   *","   * @examples","   * var sequence = Lazy([])","   *   .map(function(x) { return x * -1; })","   *   .filter(function(x) { return x % 2 === 0; });","   *","   * sequence.apply([1, 2, 3, 4]); // => [-2, -4]","   */","  Sequence.prototype.apply = function apply(source) {","    var root = this.root(),","        previousSource = root.source,","        result;","","    try {","      root.source = source;","      result = this.value();","    } finally {","      root.source = previousSource;","    }","","    return result;","  };","","  /**","   * The Iterator object provides an API for iterating over a sequence.","   *","   * The purpose of the `Iterator` type is mainly to offer an agnostic way of","   * iterating over a sequence -- either synchronous (i.e. with a `while` loop)","   * or asynchronously (with recursive calls to either `setTimeout` or --- if","   * available --- `setImmediate`). It is not intended to be used directly by","   * application code.","   *","   * @public","   * @constructor","   * @param {Sequence} sequence The sequence to iterate over.","   */","  function Iterator(sequence) {","    this.sequence = sequence;","    this.index    = -1;","  }","","  /**","   * Gets the current item this iterator is pointing to.","   *","   * @public","   * @returns {*} The current item.","   */","  Iterator.prototype.current = function current() {","    return this.cachedIndex && this.cachedIndex.get(this.index);","  };","","  /**","   * Moves the iterator to the next item in a sequence, if possible.","   *","   * @public","   * @returns {boolean} True if the iterator is able to move to a new item, or else","   *     false.","   */","  Iterator.prototype.moveNext = function moveNext() {","    var cachedIndex = this.cachedIndex;","","    if (!cachedIndex) {","      cachedIndex = this.cachedIndex = this.sequence.getIndex();","    }","","    if (this.index >= cachedIndex.length() - 1) {","      return false;","    }","","    ++this.index;","    return true;","  };","","  /**","   * Creates an array snapshot of a sequence.","   *","   * Note that for indefinite sequences, this method may raise an exception or","   * (worse) cause the environment to hang.","   *","   * @public","   * @returns {Array} An array containing the current contents of the sequence.","   *","   * @examples","   * Lazy([1, 2, 3]).toArray() // => [1, 2, 3]","   */","  Sequence.prototype.toArray = function toArray() {","    return this.reduce(function(arr, element) {","      arr.push(element);","      return arr;","    }, []);","  };","","  /**","   * Provides an indexed view into the sequence.","   *","   * For sequences that are already indexed, this will simply return the","   * sequence. For non-indexed sequences, this will eagerly evaluate the","   * sequence.","   *","   * @returns {ArrayLikeSequence} A sequence containing the current contents of","   *     the sequence.","   *","   * @examples","   * Lazy([1, 2, 3]).filter(isEven)            // instanceof Lazy.Sequence","   * Lazy([1, 2, 3]).filter(isEven).getIndex() // instanceof Lazy.ArrayLikeSequence","   */","  Sequence.prototype.getIndex = function getIndex() {","    return new ArrayWrapper(this.toArray());","  };","","  /**","   * Returns the element at the specified index. Note that, for sequences that","   * are not {@link ArrayLikeSequence}s, this may require partially evaluating","   * the sequence, iterating to reach the result. (In other words for such","   * sequences this method is not O(1).)","   *","   * @public","   * @param {number} i The index to access.","   * @returns {*} The element.","   *","   */","  Sequence.prototype.get = function get(i) {","    var element;","    this.each(function(e, index) {","      if (index === i) {","        element = e;","        return false;","      }","    });","    return element;","  };","","  /**","   * Provides an indexed, memoized view into the sequence. This will cache the","   * result whenever the sequence is first iterated, so that subsequent","   * iterations will access the same element objects.","   *","   * @public","   * @returns {ArrayLikeSequence} An indexed, memoized sequence containing this","   *     sequence's elements, cached after the first iteration.","   *","   * @example","   * function createObject() { return new Object(); }","   *","   * var plain    = Lazy.generate(createObject, 10),","   *     memoized = Lazy.generate(createObject, 10).memoize();","   *","   * plain.toArray()[0] === plain.toArray()[0];       // => false","   * memoized.toArray()[0] === memoized.toArray()[0]; // => true","   */","  Sequence.prototype.memoize = function memoize() {","    return new MemoizedSequence(this);","  };","","  /**","   * @constructor","   */","  function MemoizedSequence(parent) {","    this.parent   = parent;","    this.memo     = [];","    this.iterator = undefined;","    this.complete = false;","  }","","  // MemoizedSequence needs to have its prototype set up after ArrayLikeSequence","","  /**","   * Creates an object from a sequence of key/value pairs.","   *","   * @public","   * @returns {Object} An object with keys and values corresponding to the pairs","   *     of elements in the sequence.","   *","   * @examples","   * var details = [","   *   [\"first\", \"Dan\"],","   *   [\"last\", \"Tao\"],","   *   [\"age\", 29]","   * ];","   *","   * Lazy(details).toObject() // => { first: \"Dan\", last: \"Tao\", age: 29 }","   */","  Sequence.prototype.toObject = function toObject() {","    return this.reduce(function(object, pair) {","      object[pair[0]] = pair[1];","      return object;","    }, {});","  };","","  /**","   * Iterates over this sequence and executes a function for every element.","   *","   * @public","   * @aka forEach","   * @param {Function} fn The function to call on each element in the sequence.","   *     Return false from the function to end the iteration.","   * @returns {boolean} `true` if the iteration evaluated the entire sequence,","   *     or `false` if iteration was ended early.","   *","   * @examples","   * Lazy([1, 2, 3, 4]).each(fn) // calls fn 4 times","   */","  Sequence.prototype.each = function each(fn) {","    var iterator = this.getIterator(),","        i = -1;","","    while (iterator.moveNext()) {","      if (fn(iterator.current(), ++i) === false) {","        return false;","      }","    }","","    return true;","  };","","  Sequence.prototype.forEach = function forEach(fn) {","    return this.each(fn);","  };","","  /**","   * Creates a new sequence whose values are calculated by passing this sequence's","   * elements through some mapping function.","   *","   * @public","   * @aka collect","   * @param {Function} mapFn The mapping function used to project this sequence's","   *     elements onto a new sequence. This function takes up to two arguments:","   *     the element, and the current index.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * function addIndexToValue(e, i) { return e + i; }","   *","   * Lazy([]).map(increment)              // sequence: []","   * Lazy([1, 2, 3]).map(increment)       // sequence: [2, 3, 4]","   * Lazy([1, 2, 3]).map(addIndexToValue) // sequence: [1, 3, 5]","   *","   * @benchmarks","   * function increment(x) { return x + 1; }","   *","   * var smArr = Lazy.range(10).toArray(),","   *     lgArr = Lazy.range(100).toArray();","   *","   * Lazy(smArr).map(increment).each(Lazy.noop) // lazy - 10 elements","   * Lazy(lgArr).map(increment).each(Lazy.noop) // lazy - 100 elements","   * _.each(_.map(smArr, increment), _.noop)    // lodash - 10 elements","   * _.each(_.map(lgArr, increment), _.noop)    // lodash - 100 elements","   */","  Sequence.prototype.map = function map(mapFn) {","    return new MappedSequence(this, createCallback(mapFn));","  };","","  Sequence.prototype.collect = function collect(mapFn) {","    return this.map(mapFn);","  };","","  /**","   * @constructor","   */","  function MappedSequence(parent, mapFn) {","    this.parent = parent;","    this.mapFn  = mapFn;","  }","","  MappedSequence.prototype = new Sequence();","","  MappedSequence.prototype.getIterator = function getIterator() {","    return new MappingIterator(this.parent, this.mapFn);","  };","","  MappedSequence.prototype.each = function each(fn) {","    var mapFn = this.mapFn;","    return this.parent.each(function(e, i) {","      return fn(mapFn(e, i), i);","    });","  };","","  /**","   * @constructor","   */","  function MappingIterator(sequence, mapFn) {","    this.iterator = sequence.getIterator();","    this.mapFn    = mapFn;","    this.index    = -1;","  }","","  MappingIterator.prototype.current = function current() {","    return this.mapFn(this.iterator.current(), this.index);","  };","","  MappingIterator.prototype.moveNext = function moveNext() {","    if (this.iterator.moveNext()) {","      ++this.index;","      return true;","    }","","    return false;","  };","","  /**","   * Creates a new sequence whose values are calculated by accessing the specified","   * property from each element in this sequence.","   *","   * @public","   * @param {string} propertyName The name of the property to access for every","   *     element in this sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * var people = [","   *   { first: \"Dan\", last: \"Tao\" },","   *   { first: \"Bob\", last: \"Smith\" }","   * ];","   *","   * Lazy(people).pluck(\"last\") // sequence: [\"Tao\", \"Smith\"]","   */","  Sequence.prototype.pluck = function pluck(property) {","    return this.map(property);","  };","","  /**","   * Creates a new sequence whose values are calculated by invoking the specified","   * function on each element in this sequence.","   *","   * @public","   * @param {string} methodName The name of the method to invoke for every element","   *     in this sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * function Person(first, last) {","   *   this.fullName = function fullName() {","   *     return first + \" \" + last;","   *   };","   * }","   *","   * var people = [","   *   new Person(\"Dan\", \"Tao\"),","   *   new Person(\"Bob\", \"Smith\")","   * ];","   *","   * Lazy(people).invoke(\"fullName\") // sequence: [\"Dan Tao\", \"Bob Smith\"]","   */","  Sequence.prototype.invoke = function invoke(methodName) {","    return this.map(function(e) {","      return e[methodName]();","    });","  };","","  /**","   * Creates a new sequence whose values are the elements of this sequence which","   * satisfy the specified predicate.","   *","   * @public","   * @aka select","   * @param {Function} filterFn The predicate to call on each element in this","   *     sequence, which returns true if the element should be included.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * var numbers = [1, 2, 3, 4, 5, 6];","   *","   * Lazy(numbers).filter(isEven) // sequence: [2, 4, 6]","   *","   * @benchmarks","   * function isEven(x) { return x % 2 === 0; }","   *","   * var smArr = Lazy.range(10).toArray(),","   *     lgArr = Lazy.range(100).toArray();","   *","   * Lazy(smArr).filter(isEven).each(Lazy.noop) // lazy - 10 elements","   * Lazy(lgArr).filter(isEven).each(Lazy.noop) // lazy - 100 elements","   * _.each(_.filter(smArr, isEven), _.noop)    // lodash - 10 elements","   * _.each(_.filter(lgArr, isEven), _.noop)    // lodash - 100 elements","   */","  Sequence.prototype.filter = function filter(filterFn) {","    return new FilteredSequence(this, createCallback(filterFn));","  };","","  Sequence.prototype.select = function select(filterFn) {","    return this.filter(filterFn);","  };","","  /**","   * @constructor","   */","  function FilteredSequence(parent, filterFn) {","    this.parent   = parent;","    this.filterFn = filterFn;","  }","","  FilteredSequence.prototype = new Sequence();","","  FilteredSequence.prototype.getIterator = function getIterator() {","    return new FilteringIterator(this.parent, this.filterFn);","  };","","  FilteredSequence.prototype.each = function each(fn) {","    var filterFn = this.filterFn,","        j = 0;","","    return this.parent.each(function(e, i) {","      if (filterFn(e, i)) {","        return fn(e, j++);","      }","    });","  };","","  FilteredSequence.prototype.reverse = function reverse() {","    return this.parent.reverse().filter(this.filterFn);","  };","","  /**","   * @constructor","   */","  function FilteringIterator(sequence, filterFn) {","    this.iterator = sequence.getIterator();","    this.filterFn = filterFn;","    this.index    = 0;","  }","","  FilteringIterator.prototype.current = function current() {","    return this.value;","  };","","  FilteringIterator.prototype.moveNext = function moveNext() {","    var iterator = this.iterator,","        filterFn = this.filterFn,","        value;","","    while (iterator.moveNext()) {","      value = iterator.current();","      if (filterFn(value, this.index++)) {","        this.value = value;","        return true;","      }","    }","","    this.value = undefined;","    return false;","  };","","  /**","   * Creates a new sequence whose values exclude the elements of this sequence","   * identified by the specified predicate.","   *","   * @public","   * @param {Function} rejectFn The predicate to call on each element in this","   *     sequence, which returns true if the element should be omitted.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2, 3, 4, 5]).reject(isEven)              // sequence: [1, 3, 5]","   * Lazy([{ foo: 1 }, { bar: 2 }]).reject('foo')      // sequence: [{ bar: 2 }]","   * Lazy([{ foo: 1 }, { foo: 2 }]).reject({ foo: 2 }) // sequence: [{ foo: 1 }]","   */","  Sequence.prototype.reject = function reject(rejectFn) {","    rejectFn = createCallback(rejectFn);","    return this.filter(function(e) { return !rejectFn(e); });","  };","","  /**","   * Creates a new sequence whose values have the specified type, as determined","   * by the `typeof` operator.","   *","   * @public","   * @param {string} type The type of elements to include from the underlying","   *     sequence, i.e. where `typeof [element] === [type]`.","   * @returns {Sequence} The new sequence, comprising elements of the specified","   *     type.","   *","   * @examples","   * Lazy([1, 2, 'foo', 'bar']).ofType('number')  // sequence: [1, 2]","   * Lazy([1, 2, 'foo', 'bar']).ofType('string')  // sequence: ['foo', 'bar']","   * Lazy([1, 2, 'foo', 'bar']).ofType('boolean') // sequence: []","   */","  Sequence.prototype.ofType = function ofType(type) {","    return this.filter(function(e) { return typeof e === type; });","  };","","  /**","   * Creates a new sequence whose values are the elements of this sequence with","   * property names and values matching those of the specified object.","   *","   * @public","   * @param {Object} properties The properties that should be found on every","   *     element that is to be included in this sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * var people = [","   *   { first: \"Dan\", last: \"Tao\" },","   *   { first: \"Bob\", last: \"Smith\" }","   * ];","   *","   * Lazy(people).where({ first: \"Dan\" }) // sequence: [{ first: \"Dan\", last: \"Tao\" }]","   *","   * @benchmarks","   * var animals = [\"dog\", \"cat\", \"mouse\", \"horse\", \"pig\", \"snake\"];","   *","   * Lazy(animals).where({ length: 3 }).each(Lazy.noop) // lazy","   * _.each(_.where(animals, { length: 3 }), _.noop)    // lodash","   */","  Sequence.prototype.where = function where(properties) {","    return this.filter(properties);","  };","","  /**","   * Creates a new sequence with the same elements as this one, but to be iterated","   * in the opposite order.","   *","   * Note that in some (but not all) cases, the only way to create such a sequence","   * may require iterating the entire underlying source when `each` is called.","   *","   * @public","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2, 3]).reverse() // sequence: [3, 2, 1]","   * Lazy([]).reverse()        // sequence: []","   */","  Sequence.prototype.reverse = function reverse() {","    return new ReversedSequence(this);","  };","","  /**","   * @constructor","   */","  function ReversedSequence(parent) {","    this.parent = parent;","  }","","  ReversedSequence.prototype = new Sequence();","","  ReversedSequence.prototype.getIterator = function getIterator() {","    return new ReversedIterator(this.parent);","  };","","  /**","   * @constuctor","   */","  function ReversedIterator(sequence) {","    this.sequence = sequence;","  }","","  ReversedIterator.prototype.current = function current() {","    return this.getIndex().get(this.index);","  };","","  ReversedIterator.prototype.moveNext = function moveNext() {","    var index  = this.getIndex(),","        length = index.length();","","    if (typeof this.index === \"undefined\") {","      this.index = length;","    }","","    return (--this.index >= 0);","  };","","  ReversedIterator.prototype.getIndex = function getIndex() {","    if (!this.cachedIndex) {","      this.cachedIndex = this.sequence.getIndex();","    }","","    return this.cachedIndex;","  };","","  /**","   * Creates a new sequence with all of the elements of this one, plus those of","   * the given array(s).","   *","   * @public","   * @param {...*} var_args One or more values (or arrays of values) to use for","   *     additional items after this sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * var left  = [1, 2, 3];","   * var right = [4, 5, 6];","   *","   * Lazy(left).concat(right)         // sequence: [1, 2, 3, 4, 5, 6]","   * Lazy(left).concat(Lazy(right))   // sequence: [1, 2, 3, 4, 5, 6]","   * Lazy(left).concat(right, [7, 8]) // sequence: [1, 2, 3, 4, 5, 6, 7, 8]","   */","  Sequence.prototype.concat = function concat(var_args) {","    return new ConcatenatedSequence(this, arraySlice.call(arguments, 0));","  };","","  /**","   * @constructor","   */","  function ConcatenatedSequence(parent, arrays) {","    this.parent = parent;","    this.arrays = arrays;","  }","","  ConcatenatedSequence.prototype = new Sequence();","","  ConcatenatedSequence.prototype.each = function each(fn) {","    var done = false,","        i = 0;","","    this.parent.each(function(e) {","      if (fn(e, i++) === false) {","        done = true;","        return false;","      }","    });","","    if (!done) {","      Lazy(this.arrays).flatten().each(function(e) {","        if (fn(e, i++) === false) {","          return false;","        }","      });","    }","  };","","  /**","   * Creates a new sequence comprising the first N elements from this sequence, OR","   * (if N is `undefined`) simply returns the first element of this sequence.","   *","   * @public","   * @aka head, take","   * @param {number=} count The number of elements to take from this sequence. If","   *     this value exceeds the length of the sequence, the resulting sequence","   *     will be essentially the same as this one.","   * @returns {*} The new sequence (or the first element from this sequence if","   *     no count was given).","   *","   * @examples","   * function powerOfTwo(exp) {","   *   return Math.pow(2, exp);","   * }","   *","   * Lazy.generate(powerOfTwo).first()          // => 1","   * Lazy.generate(powerOfTwo).first(5)         // sequence: [1, 2, 4, 8, 16]","   * Lazy.generate(powerOfTwo).skip(2).first()  // => 4","   * Lazy.generate(powerOfTwo).skip(2).first(2) // sequence: [4, 8]","   */","  Sequence.prototype.first = function first(count) {","    if (typeof count === \"undefined\") {","      return getFirst(this);","    }","    return new TakeSequence(this, count);","  };","","  Sequence.prototype.head =","  Sequence.prototype.take = function (count) {","    return this.first(count);","  };","","  /**","   * @constructor","   */","  function TakeSequence(parent, count) {","    this.parent = parent;","    this.count  = count;","  }","","  TakeSequence.prototype = new Sequence();","","  TakeSequence.prototype.getIterator = function getIterator() {","    return new TakeIterator(this.parent, this.count);","  };","","  TakeSequence.prototype.each = function each(fn) {","    var count = this.count,","        i     = 0;","","    var result;","    var handle = this.parent.each(function(e) {","      if (i < count) { result = fn(e, i++); }","      if (i >= count) { return false; }","      return result;","    });","","    if (handle instanceof AsyncHandle) {","      return handle;","    }","","    return i === count && result !== false;","  };","","  /**","   * @constructor","   */","  function TakeIterator(sequence, count) {","    this.iterator = sequence.getIterator();","    this.count    = count;","  }","","  TakeIterator.prototype.current = function current() {","    return this.iterator.current();","  };","","  TakeIterator.prototype.moveNext = function moveNext() {","    return ((--this.count >= 0) && this.iterator.moveNext());","  };","","  /**","   * Creates a new sequence comprising the elements from the head of this sequence","   * that satisfy some predicate. Once an element is encountered that doesn't","   * satisfy the predicate, iteration will stop.","   *","   * @public","   * @param {Function} predicate","   * @returns {Sequence} The new sequence","   *","   * @examples","   * function lessThan(x) {","   *   return function(y) {","   *     return y < x;","   *   };","   * }","   *","   * Lazy([1, 2, 3, 4]).takeWhile(lessThan(3)) // sequence: [1, 2]","   * Lazy([1, 2, 3, 4]).takeWhile(lessThan(0)) // sequence: []","   */","  Sequence.prototype.takeWhile = function takeWhile(predicate) {","    return new TakeWhileSequence(this, predicate);","  };","","  /**","   * @constructor","   */","  function TakeWhileSequence(parent, predicate) {","    this.parent    = parent;","    this.predicate = predicate;","  }","","  TakeWhileSequence.prototype = new Sequence();","","  TakeWhileSequence.prototype.each = function each(fn) {","    var predicate = this.predicate,","        finished = false,","        j = 0;","","    var result = this.parent.each(function(e, i) {","      if (!predicate(e, i)) {","        finished = true;","        return false;","      }","","      return fn(e, j++);","    });","","    if (result instanceof AsyncHandle) {","      return result;","    }","","    return finished;","  };","","  /**","   * Creates a new sequence comprising all but the last N elements of this","   * sequence.","   *","   * @public","   * @param {number=} count The number of items to omit from the end of the","   *     sequence (defaults to 1).","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2, 3, 4]).initial()                    // sequence: [1, 2, 3]","   * Lazy([1, 2, 3, 4]).initial(2)                   // sequence: [1, 2]","   * Lazy([1, 2, 3]).filter(Lazy.identity).initial() // sequence: [1, 2]","   */","  Sequence.prototype.initial = function initial(count) {","    return new InitialSequence(this, count);","  };","","  function InitialSequence(parent, count) {","    this.parent = parent;","    this.count = typeof count === \"number\" ? count : 1;","  }","","  InitialSequence.prototype = new Sequence();","","  InitialSequence.prototype.each = function each(fn) {","    var index = this.parent.getIndex();","    return index.take(index.length() - this.count).each(fn);","  };","","  /**","   * Creates a new sequence comprising the last N elements of this sequence, OR","   * (if N is `undefined`) simply returns the last element of this sequence.","   *","   * @public","   * @param {number=} count The number of items to take from the end of the","   *     sequence.","   * @returns {*} The new sequence (or the last element from this sequence","   *     if no count was given).","   *","   * @examples","   * Lazy([1, 2, 3]).last()                 // => 3","   * Lazy([1, 2, 3]).last(2)                // sequence: [2, 3]","   * Lazy([1, 2, 3]).filter(isEven).last(2) // sequence: [2]","   */","  Sequence.prototype.last = function last(count) {","    if (typeof count === \"undefined\") {","      return this.reverse().first();","    }","    return this.reverse().take(count).reverse();","  };","","  /**","   * Returns the first element in this sequence with property names and values","   * matching those of the specified object.","   *","   * @public","   * @param {Object} properties The properties that should be found on some","   *     element in this sequence.","   * @returns {*} The found element, or `undefined` if none exists in this","   *     sequence.","   *","   * @examples","   * var words = [\"foo\", \"bar\"];","   *","   * Lazy(words).findWhere({ 0: \"f\" }); // => \"foo\"","   * Lazy(words).findWhere({ 0: \"z\" }); // => undefined","   */","  Sequence.prototype.findWhere = function findWhere(properties) {","    return this.where(properties).first();","  };","","  /**","   * Creates a new sequence comprising all but the first N elements of this","   * sequence.","   *","   * @public","   * @aka skip, tail, rest","   * @param {number=} count The number of items to omit from the beginning of the","   *     sequence (defaults to 1).","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2, 3, 4]).rest()  // sequence: [2, 3, 4]","   * Lazy([1, 2, 3, 4]).rest(0) // sequence: [1, 2, 3, 4]","   * Lazy([1, 2, 3, 4]).rest(2) // sequence: [3, 4]","   * Lazy([1, 2, 3, 4]).rest(5) // sequence: []","   */","  Sequence.prototype.rest = function rest(count) {","    return new DropSequence(this, count);","  };","","  Sequence.prototype.skip =","  Sequence.prototype.tail =","  Sequence.prototype.drop = function drop(count) {","    return this.rest(count);","  };","","  /**","   * @constructor","   */","  function DropSequence(parent, count) {","    this.parent = parent;","    this.count  = typeof count === \"number\" ? count : 1;","  }","","  DropSequence.prototype = new Sequence();","","  DropSequence.prototype.each = function each(fn) {","    var count   = this.count,","        dropped = 0,","        i       = 0;","","    return this.parent.each(function(e) {","      if (dropped++ < count) { return; }","      return fn(e, i++);","    });","  };","","  /**","   * Creates a new sequence comprising the elements from this sequence *after*","   * those that satisfy some predicate. The sequence starts with the first","   * element that does not match the predicate.","   *","   * @public","   * @aka skipWhile","   * @param {Function} predicate","   * @returns {Sequence} The new sequence","   */","  Sequence.prototype.dropWhile = function dropWhile(predicate) {","    return new DropWhileSequence(this, predicate);","  };","","  Sequence.prototype.skipWhile = function skipWhile(predicate) {","    return this.dropWhile(predicate);","  };","","  /**","   * @constructor","   */","  function DropWhileSequence(parent, predicate) {","    this.parent    = parent;","    this.predicate = predicate;","  }","","  DropWhileSequence.prototype = new Sequence();","","  DropWhileSequence.prototype.each = function each(fn) {","    var predicate = this.predicate,","        done      = false;","","    return this.parent.each(function(e) {","      if (!done) {","        if (predicate(e)) {","          return;","        }","","        done = true;","      }","","      return fn(e);","    });","  };","","  /**","   * Creates a new sequence with the same elements as this one, but ordered","   * using the specified comparison function.","   *","   * This has essentially the same behavior as calling","   * [`Array#sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort),","   * but obviously instead of modifying the collection it returns a new","   * {@link Sequence} object.","   *","   * @public","   * @param {Function=} sortFn The function used to compare elements in the","   *     sequence. The function will be passed two elements and should return:","   *     - 1 if the first is greater","   *     - -1 if the second is greater","   *     - 0 if the two values are the same","   * @param {boolean} descending Whether or not the resulting sequence should be","   *     in descending order (defaults to `false`).","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([5, 10, 1]).sort()                // sequence: [1, 5, 10]","   * Lazy(['foo', 'bar']).sort()            // sequence: ['bar', 'foo']","   * Lazy(['b', 'c', 'a']).sort(null, true) // sequence: ['c', 'b', 'a']","   * Lazy([5, 10, 1]).sort(null, true)      // sequence: [10, 5, 1]","   *","   * // Sorting w/ custom comparison function","   * Lazy(['a', 'ab', 'aa', 'ba', 'b', 'abc']).sort(function compare(x, y) {","   *   if (x.length && (x.length !== y.length)) { return compare(x.length, y.length); }","   *   if (x === y) { return 0; }","   *   return x > y ? 1 : -1;","   * });","   * // => sequence: ['a', 'b', 'aa', 'ab', 'ba', 'abc']","   */","  Sequence.prototype.sort = function sort(sortFn, descending) {","    sortFn || (sortFn = compare);","    if (descending) { sortFn = reverseArguments(sortFn); }","    return new SortedSequence(this, sortFn);","  };","","  /**","   * Creates a new sequence with the same elements as this one, but ordered by","   * the results of the given function.","   *","   * You can pass:","   *","   * - a *string*, to sort by the named property","   * - a function, to sort by the result of calling the function on each element","   *","   * @public","   * @param {Function} sortFn The function to call on the elements in this","   *     sequence, in order to sort them.","   * @param {boolean} descending Whether or not the resulting sequence should be","   *     in descending order (defaults to `false`).","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * function population(country) {","   *   return country.pop;","   * }","   *","   * function area(country) {","   *   return country.sqkm;","   * }","   *","   * var countries = [","   *   { name: \"USA\", pop: 320000000, sqkm: 9600000 },","   *   { name: \"Brazil\", pop: 194000000, sqkm: 8500000 },","   *   { name: \"Nigeria\", pop: 174000000, sqkm: 924000 },","   *   { name: \"China\", pop: 1350000000, sqkm: 9700000 },","   *   { name: \"Russia\", pop: 143000000, sqkm: 17000000 },","   *   { name: \"Australia\", pop: 23000000, sqkm: 7700000 }","   * ];","   *","   * Lazy(countries).sortBy(population).last(3).pluck('name') // sequence: [\"Brazil\", \"USA\", \"China\"]","   * Lazy(countries).sortBy(area).last(3).pluck('name')       // sequence: [\"USA\", \"China\", \"Russia\"]","   * Lazy(countries).sortBy(area, true).first(3).pluck('name') // sequence: [\"Russia\", \"China\", \"USA\"]","   *","   * @benchmarks","   * var randoms = Lazy.generate(Math.random).take(100).toArray();","   *","   * Lazy(randoms).sortBy(Lazy.identity).each(Lazy.noop) // lazy","   * _.each(_.sortBy(randoms, Lazy.identity), _.noop)    // lodash","   */","  Sequence.prototype.sortBy = function sortBy(sortFn, descending) {","    sortFn = createComparator(sortFn);","    if (descending) { sortFn = reverseArguments(sortFn); }","    return new SortedSequence(this, sortFn);","  };","","  /**","   * @constructor","   */","  function SortedSequence(parent, sortFn) {","    this.parent = parent;","    this.sortFn = sortFn;","  }","","  SortedSequence.prototype = new Sequence();","","  SortedSequence.prototype.each = function each(fn) {","    var sortFn = this.sortFn,","        result = this.parent.toArray();","","    result.sort(sortFn);","","    return forEach(result, fn);","  };","","  /**","   * @examples","   * var items = [{ a: 4 }, { a: 3 }, { a: 5 }];","   *","   * Lazy(items).sortBy('a').reverse();","   * // => sequence: [{ a: 5 }, { a: 4 }, { a: 3 }]","   *","   * Lazy(items).sortBy('a').reverse().reverse();","   * // => sequence: [{ a: 3 }, { a: 4 }, { a: 5 }]","   */","  SortedSequence.prototype.reverse = function reverse() {","    return new SortedSequence(this.parent, reverseArguments(this.sortFn));","  };","","  /**","   * Creates a new {@link ObjectLikeSequence} comprising the elements in this","   * one, grouped together according to some key. The value associated with each","   * key in the resulting object-like sequence is an array containing all of","   * the elements in this sequence with that key.","   *","   * @public","   * @param {Function|string} keyFn The function to call on the elements in this","   *     sequence to obtain a key by which to group them, or a string representing","   *     a parameter to read from all the elements in this sequence.","   * @param {Function|string} valFn (Optional) The function to call on the elements","   *     in this sequence to assign to the value for each instance to appear in the","   *     group, or a string representing a parameter to read from all the elements","   *     in this sequence.","   * @returns {ObjectLikeSequence} The new sequence.","   *","   * @examples","   * function oddOrEven(x) {","   *   return x % 2 === 0 ? 'even' : 'odd';","   * }","   * function square(x) {","   *   return x*x;","   * }","   *","   * var numbers = [1, 2, 3, 4, 5];","   *","   * Lazy(numbers).groupBy(oddOrEven)                     // sequence: { odd: [1, 3, 5], even: [2, 4] }","   * Lazy(numbers).groupBy(oddOrEven).get(\"odd\")          // => [1, 3, 5]","   * Lazy(numbers).groupBy(oddOrEven).get(\"foo\")          // => undefined","   * Lazy(numbers).groupBy(oddOrEven, square).get(\"even\") // => [4, 16]","   *","   * Lazy([","   *   { name: 'toString' },","   *   { name: 'toString' }","   * ]).groupBy('name');","   * // => sequence: {","   *   'toString': [","   *     { name: 'toString' },","   *     { name: 'toString' }","   *   ]","   * }","   */","  Sequence.prototype.groupBy = function groupBy(keyFn, valFn) {","    return new GroupedSequence(this, keyFn, valFn);","  };","","  /**","   * @constructor","   */","  function GroupedSequence(parent, keyFn, valFn) {","    this.parent = parent;","    this.keyFn  = keyFn;","    this.valFn  = valFn;","  }","","  // GroupedSequence must have its prototype set after ObjectLikeSequence has","  // been fully initialized.","","  /**","   * Creates a new {@link ObjectLikeSequence} comprising the elements in this","   * one, indexed according to some key.","   *","   * @public","   * @param {Function|string} keyFn The function to call on the elements in this","   *     sequence to obtain a key by which to index them, or a string","   *     representing a property to read from all the elements in this sequence.","   * @param {Function|string} valFn (Optional) The function to call on the elements","   *     in this sequence to assign to the value of the indexed object, or a string","   *     representing a parameter to read from all the elements in this sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * var people = [","   *   { name: 'Bob', age: 25 },","   *   { name: 'Fred', age: 34 }","   * ];","   *","   * var bob  = people[0],","   *     fred = people[1];","   *","   * Lazy(people).indexBy('name')        // sequence: { 'Bob': bob, 'Fred': fred }","   * Lazy(people).indexBy('name', 'age') // sequence: { 'Bob': 25, 'Fred': 34 }","   */","  Sequence.prototype.indexBy = function(keyFn, valFn) {","    return new IndexedSequence(this, keyFn, valFn);","  };","","  /**","   * @constructor","   */","  function IndexedSequence(parent, keyFn, valFn) {","    this.parent = parent;","    this.keyFn  = keyFn;","    this.valFn  = valFn;","  }","","  // IndexedSequence must have its prototype set after ObjectLikeSequence has","  // been fully initialized.","","  /**","   * Creates a new {@link ObjectLikeSequence} containing the unique keys of all","   * the elements in this sequence, each paired with the number of elements","   * in this sequence having that key.","   *","   * @public","   * @param {Function|string} keyFn The function to call on the elements in this","   *     sequence to obtain a key by which to count them, or a string representing","   *     a parameter to read from all the elements in this sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * function oddOrEven(x) {","   *   return x % 2 === 0 ? 'even' : 'odd';","   * }","   *","   * var numbers = [1, 2, 3, 4, 5];","   *","   * Lazy(numbers).countBy(oddOrEven)            // sequence: { odd: 3, even: 2 }","   * Lazy(numbers).countBy(oddOrEven).get(\"odd\") // => 3","   * Lazy(numbers).countBy(oddOrEven).get(\"foo\") // => undefined","   */","  Sequence.prototype.countBy = function countBy(keyFn) {","    return new CountedSequence(this, keyFn);","  };","","  /**","   * @constructor","   */","  function CountedSequence(parent, keyFn) {","    this.parent = parent;","    this.keyFn  = keyFn;","  }","","  // CountedSequence, like GroupedSequence, must have its prototype set after","  // ObjectLikeSequence has been fully initialized.","","  /**","   * Creates a new sequence with every unique element from this one appearing","   * exactly once (i.e., with duplicates removed).","   *","   * @public","   * @aka unique","   * @param {Function} keyFn An optional function to produce the key for each","   *     object. This key is then tested for uniqueness as  opposed to the","   *     object reference.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2, 2, 3, 3, 3]).uniq() // sequence: [1, 2, 3]","   * Lazy([{ name: 'mike' }, ","   * \t{ name: 'sarah' }, ","   * \t{ name: 'mike' }","   * ]).uniq('name')","   * // sequence: [{ name: 'mike' }, { name: 'sarah' }]","   *","   * @benchmarks","   * function randomOf(array) {","   *   return function() {","   *     return array[Math.floor(Math.random() * array.length)];","   *   };","   * }","   *","   * var mostUnique = Lazy.generate(randomOf(_.range(100)), 100).toArray(),","   *     someUnique = Lazy.generate(randomOf(_.range(50)), 100).toArray(),","   *     mostDupes  = Lazy.generate(randomOf(_.range(5)), 100).toArray();","   *","   * Lazy(mostUnique).uniq().each(Lazy.noop) // lazy - mostly unique elements","   * Lazy(someUnique).uniq().each(Lazy.noop) // lazy - some unique elements","   * Lazy(mostDupes).uniq().each(Lazy.noop)  // lazy - mostly duplicate elements","   * _.each(_.uniq(mostUnique), _.noop)      // lodash - mostly unique elements","   * _.each(_.uniq(someUnique), _.noop)      // lodash - some unique elements","   * _.each(_.uniq(mostDupes), _.noop)       // lodash - mostly duplicate elements","   */","  Sequence.prototype.uniq = function uniq(keyFn) {","    return new UniqueSequence(this, keyFn);","  };","","  Sequence.prototype.unique = function unique(keyFn) {","    return this.uniq(keyFn);","  };","","  /**","   * @constructor","   */","  function UniqueSequence(parent, keyFn) {","    this.parent = parent;","    this.keyFn  = keyFn;","  }","","  UniqueSequence.prototype = new Sequence();","","  UniqueSequence.prototype.each = function each(fn) {","    var cache = new Set(),","        keyFn = this.keyFn,","        i     = 0;","","    if (keyFn) {","      keyFn = createCallback(keyFn);","      return this.parent.each(function(e) {","        if (cache.add(keyFn(e))) {","          return fn(e, i++);","        }","      });","","    } else {","      return this.parent.each(function(e) {","        if (cache.add(e)) {","          return fn(e, i++);","        }","      });","    }","  };","","  /**","   * Creates a new sequence by combining the elements from this sequence with","   * corresponding elements from the specified array(s).","   *","   * @public","   * @param {...Array} var_args One or more arrays of elements to combine with","   *     those of this sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2]).zip([3, 4])     // sequence: [[1, 3], [2, 4]]","   * Lazy([]).zip([0])            // sequence: [[undefined, 0]]","   * Lazy([0]).zip([])            // sequence: [[0, undefined]]","   * Lazy([]).zip([1, 2], [3, 4]) // sequence: [[undefined, 1, 3], [undefined, 2, 4]]","   * Lazy([]).zip([1], [2, 3])    // sequence: [[undefined, 1, 2], [undefined, undefined, 3]]","   * Lazy([1, 2]).zip([3], [4])   // sequence: [[1, 3, 4], [2, undefined, undefined]]","   *","   * @benchmarks","   * var smArrL = Lazy.range(10).toArray(),","   *     smArrR = Lazy.range(10, 20).toArray(),","   *     lgArrL = Lazy.range(100).toArray(),","   *     lgArrR = Lazy.range(100, 200).toArray();","   *","   * Lazy(smArrL).zip(smArrR).each(Lazy.noop) // lazy - zipping 10-element arrays","   * Lazy(lgArrL).zip(lgArrR).each(Lazy.noop) // lazy - zipping 100-element arrays","   * _.each(_.zip(smArrL, smArrR), _.noop)    // lodash - zipping 10-element arrays","   * _.each(_.zip(lgArrL, lgArrR), _.noop)    // lodash - zipping 100-element arrays","   */","  Sequence.prototype.zip = function zip(var_args) {","    if (arguments.length === 1) {","      return new SimpleZippedSequence(this, (/** @type {Array} */ var_args));","    } else {","      return new ZippedSequence(this, arraySlice.call(arguments, 0));","    }","  };","","  /**","   * @constructor","   */","  function ZippedSequence(parent, arrays) {","    this.parent = parent;","    this.arrays = arrays;","  }","","  ZippedSequence.prototype = new Sequence();","","  ZippedSequence.prototype.each = function each(fn) {","    var arrays = this.arrays,","        i = 0;","","    var iteratedLeft = this.parent.each(function(e) {","      var group = [e];","      for (var j = 0; j < arrays.length; ++j) {","        group.push(arrays[j][i]);","      }","      return fn(group, i++);","    });","","    if (!iteratedLeft) {","      return false;","    }","","    var group,","        keepGoing = true;","","    while (keepGoing) {","      keepGoing = false;","      group = [undefined];","      for (var j = 0; j < arrays.length; ++j) {","        group.push(arrays[j][i]);","","        // Check if *any* of the arrays have more elements to iterate.","        if (arrays[j].length > i) {","          keepGoing = true;","        }","      }","","      if (keepGoing && (fn(group, i++) === false)) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * Creates a new sequence with the same elements as this one, in a randomized","   * order.","   *","   * @public","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2, 3, 4, 5]).shuffle().value() // =~ [1, 2, 3, 4, 5]","   * Lazy([]).shuffle().value()              // => []","   * Lazy([1]).shuffle().each(Lazy.noop)     // => true","   * Lazy([]).shuffle().each(Lazy.noop)      // => true","   */","  Sequence.prototype.shuffle = function shuffle() {","    return new ShuffledSequence(this);","  };","","  /**","   * @constructor","   */","  function ShuffledSequence(parent) {","    this.parent = parent;","  }","","  ShuffledSequence.prototype = new Sequence();","","  ShuffledSequence.prototype.each = function each(fn) {","    var shuffled = this.parent.toArray(),","        floor = Math.floor,","        random = Math.random,","        j = 0;","","    for (var i = shuffled.length - 1; i > 0; --i) {","      swap(shuffled, i, floor(random() * (i + 1)));","      if (fn(shuffled[i], j++) === false) {","        return false;","      }","    }","","    if (shuffled.length) {","      fn(shuffled[0], j);","    }","","    return true;","  };","","  /**","   * Creates a new sequence with every element from this sequence, and with arrays","   * exploded so that a sequence of arrays (of arrays) becomes a flat sequence of","   * values.","   *","   * @public","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, [2, 3], [4, [5]]]).flatten() // sequence: [1, 2, 3, 4, 5]","   * Lazy([1, Lazy([2, 3])]).flatten()     // sequence: [1, 2, 3]","   */","  Sequence.prototype.flatten = function flatten() {","    return new FlattenedSequence(this);","  };","","  /**","   * @constructor","   */","  function FlattenedSequence(parent) {","    this.parent = parent;","  }","","  FlattenedSequence.prototype = new Sequence();","","  FlattenedSequence.prototype.each = function each(fn) {","    var index = 0;","","    return this.parent.each(function recurseVisitor(e) {","      if (isArray(e)) {","        return forEach(e, recurseVisitor);","      }","","      if (e instanceof Sequence) {","        return e.each(recurseVisitor);","      }","","      return fn(e, index++);","    });","  };","","  /**","   * Creates a new sequence with the same elements as this one, except for all","   * falsy values (`false`, `0`, `\"\"`, `null`, and `undefined`).","   *","   * @public","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([\"foo\", null, \"bar\", undefined]).compact() // sequence: [\"foo\", \"bar\"]","   */","  Sequence.prototype.compact = function compact() {","    return this.filter(function(e) { return !!e; });","  };","","  /**","   * Creates a new sequence with all the elements of this sequence that are not","   * also among the specified arguments.","   *","   * @public","   * @aka difference","   * @param {...*} var_args The values, or array(s) of values, to be excluded from the","   *     resulting sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([1, 2, 3, 4, 5]).without(2, 3)   // sequence: [1, 4, 5]","   * Lazy([1, 2, 3, 4, 5]).without([4, 5]) // sequence: [1, 2, 3]","   */","  Sequence.prototype.without = function without(var_args) {","    return new WithoutSequence(this, arraySlice.call(arguments, 0));","  };","","  Sequence.prototype.difference = function difference(var_args) {","    return this.without.apply(this, arguments);","  };","","  /**","   * @constructor","   */","  function WithoutSequence(parent, values) {","    this.parent = parent;","    this.values = values;","  }","","  WithoutSequence.prototype = new Sequence();","","  WithoutSequence.prototype.each = function each(fn) {","    var set = createSet(this.values),","        i = 0;","    return this.parent.each(function(e) {","      if (!set.contains(e)) {","        return fn(e, i++);","      }","    });","  };","","  /**","   * Creates a new sequence with all the unique elements either in this sequence","   * or among the specified arguments.","   *","   * @public","   * @param {...*} var_args The values, or array(s) of values, to be additionally","   *     included in the resulting sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([\"foo\", \"bar\"]).union([])             // sequence: [\"foo\", \"bar\"]","   * Lazy([\"foo\", \"bar\"]).union([\"bar\", \"baz\"]) // sequence: [\"foo\", \"bar\", \"baz\"]","   */","  Sequence.prototype.union = function union(var_args) {","    return this.concat(var_args).uniq();","  };","","  /**","   * Creates a new sequence with all the elements of this sequence that also","   * appear among the specified arguments.","   *","   * @public","   * @param {...*} var_args The values, or array(s) of values, in which elements","   *     from this sequence must also be included to end up in the resulting sequence.","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * Lazy([\"foo\", \"bar\"]).intersection([])             // sequence: []","   * Lazy([\"foo\", \"bar\"]).intersection([\"bar\", \"baz\"]) // sequence: [\"bar\"]","   * Lazy([\"a\", \"a\"]).intersection([\"a\"])              // sequence: [\"a\"]","   * Lazy([\"a\"]).intersection([\"a\", \"a\"])              // sequence: [\"a\"]","   * Lazy([\"a\", \"a\"]).intersection([\"a\", \"a\"])         // sequence: [\"a\"]","   * Lazy([\"a\", \"a\"]).intersection([\"a\"], [\"a\"])       // sequence: [\"a\"]","   */","  Sequence.prototype.intersection = function intersection(var_args) {","    if (arguments.length === 1 && isArray(arguments[0])) {","      return new SimpleIntersectionSequence(this, (/** @type {Array} */ var_args));","    } else {","      return new IntersectionSequence(this, arraySlice.call(arguments, 0));","    }","  };","","  /**","   * @constructor","   */","  function IntersectionSequence(parent, arrays) {","    this.parent = parent;","    this.arrays = arrays;","  }","","  IntersectionSequence.prototype = new Sequence();","","  IntersectionSequence.prototype.each = function each(fn) {","    var sets = Lazy(this.arrays).map(function(values) {","      return new UniqueMemoizer(Lazy(values).getIterator());","    });","","    var setIterator = new UniqueMemoizer(sets.getIterator()),","        i = 0;","","    return this.parent.uniq().each(function(e) {","      var includedInAll = true;","      setIterator.each(function(set) {","        if (!set.contains(e)) {","          includedInAll = false;","          return false;","        }","      });","","      if (includedInAll) {","        return fn(e, i++);","      }","    });","  };","","  /**","   * @constructor","   */","  function Memoizer(memo, iterator) {","    this.iterator     = iterator;","    this.memo         = memo;","    this.currentIndex = 0;","    this.currentValue = undefined;","  }","","  Memoizer.prototype.current = function current() {","    return this.currentValue;","  };","","  Memoizer.prototype.moveNext = function moveNext() {","    var iterator = this.iterator,","        memo = this.memo,","        current;","","    if (this.currentIndex < memo.length) {","      this.currentValue = memo[this.currentIndex++];","      return true;","    }","","    if (iterator.moveNext()) {","      this.currentValue = memo[this.currentIndex++] = iterator.current();","      return true;","    }","","    return false;","  };","","  /**","   * @constructor","   */","  function UniqueMemoizer(iterator) {","    this.iterator     = iterator;","    this.set          = new Set();","    this.memo         = [];","    this.currentValue = undefined;","  }","","  UniqueMemoizer.prototype.current = function current() {","    return this.currentValue;","  };","","  UniqueMemoizer.prototype.moveNext = function moveNext() {","    var iterator = this.iterator,","        set = this.set,","        memo = this.memo,","        current;","","    while (iterator.moveNext()) {","      current = iterator.current();","      if (set.add(current)) {","        memo.push(current);","        this.currentValue = current;","        return true;","      }","    }","    return false;","  };","","  UniqueMemoizer.prototype.each = function each(fn) {","    var memo = this.memo,","        length = memo.length,","        i = -1;","","    while (++i < length) {","      if (fn(memo[i], i) === false) {","        return false;","      }","    }","","    while (this.moveNext()) {","      if (fn(this.currentValue, i++) === false) {","        break;","      }","    }","  };","","  UniqueMemoizer.prototype.contains = function contains(e) {","    if (this.set.contains(e)) {","      return true;","    }","","    while (this.moveNext()) {","      if (this.currentValue === e) {","        return true;","      }","    }","","    return false;","  };","","  /**","   * Checks whether every element in this sequence satisfies a given predicate.","   *","   * @public","   * @aka all","   * @param {Function} predicate A function to call on (potentially) every element","   *     in this sequence.","   * @returns {boolean} True if `predicate` returns true for every element in the","   *     sequence (or the sequence is empty). False if `predicate` returns false","   *     for at least one element.","   *","   * @examples","   * var numbers = [1, 2, 3, 4, 5];","   *","   * var objects = [{ foo: true }, { foo: false, bar: true }];","   *","   * Lazy(numbers).every(isEven)     // => false","   * Lazy(numbers).every(isPositive) // => true","   * Lazy(objects).all('foo')        // => false","   * Lazy(objects).all('bar')        // => false","   */","  Sequence.prototype.every = function every(predicate) {","    predicate = createCallback(predicate);","","    return this.each(function(e, i) {","      return !!predicate(e, i);","    });","  };","","  Sequence.prototype.all = function all(predicate) {","    return this.every(predicate);","  };","","  /**","   * Checks whether at least one element in this sequence satisfies a given","   * predicate (or, if no predicate is specified, whether the sequence contains at","   * least one element).","   *","   * @public","   * @aka any","   * @param {Function=} predicate A function to call on (potentially) every element","   *     in this sequence.","   * @returns {boolean} True if `predicate` returns true for at least one element","   *     in the sequence. False if `predicate` returns false for every element (or","   *     the sequence is empty).","   *","   * @examples","   * var numbers = [1, 2, 3, 4, 5];","   *","   * Lazy(numbers).some()           // => true","   * Lazy(numbers).some(isEven)     // => true","   * Lazy(numbers).some(isNegative) // => false","   * Lazy([]).some()                // => false","   */","  Sequence.prototype.some = function some(predicate) {","    predicate = createCallback(predicate, true);","","    var success = false;","    this.each(function(e) {","      if (predicate(e)) {","        success = true;","        return false;","      }","    });","    return success;","  };","","  Sequence.prototype.any = function any(predicate) {","    return this.some(predicate);","  };","","  /**","   * Checks whether NO elements in this sequence satisfy the given predicate","   * (the opposite of {@link Sequence#all}, basically).","   *","   * @public","   * @param {Function=} predicate A function to call on (potentially) every element","   *     in this sequence.","   * @returns {boolean} True if `predicate` does not return true for any element","   *     in the sequence. False if `predicate` returns true for at least one","   *     element.","   *","   * @examples","   * var numbers = [1, 2, 3, 4, 5];","   *","   * Lazy(numbers).none()           // => false","   * Lazy(numbers).none(isEven)     // => false","   * Lazy(numbers).none(isNegative) // => true","   * Lazy([]).none(isEven)          // => true","   * Lazy([]).none(isNegative)      // => true","   * Lazy([]).none()                // => true","   */","  Sequence.prototype.none = function none(predicate) {","    return !this.any(predicate);","  };","","  /**","   * Checks whether the sequence has no elements.","   *","   * @public","   * @returns {boolean} True if the sequence is empty, false if it contains at","   *     least one element.","   *","   * @examples","   * Lazy([]).isEmpty()        // => true","   * Lazy([1, 2, 3]).isEmpty() // => false","   */","  Sequence.prototype.isEmpty = function isEmpty() {","    return !this.any();","  };","","  /**","   * Performs (at worst) a linear search from the head of this sequence,","   * returning the first index at which the specified value is found.","   *","   * @public","   * @param {*} value The element to search for in the sequence.","   * @returns {number} The index within this sequence where the given value is","   *     located, or -1 if the sequence doesn't contain the value.","   *","   * @examples","   * function reciprocal(x) { return 1 / x; }","   *","   * Lazy([\"foo\", \"bar\", \"baz\"]).indexOf(\"bar\")   // => 1","   * Lazy([1, 2, 3]).indexOf(4)                   // => -1","   * Lazy([1, 2, 3]).map(reciprocal).indexOf(0.5) // => 1","   */","  Sequence.prototype.indexOf = function indexOf(value) {","    var foundIndex = -1;","    this.each(function(e, i) {","      if (e === value) {","        foundIndex = i;","        return false;","      }","    });","    return foundIndex;","  };","","  /**","   * Performs (at worst) a linear search from the tail of this sequence,","   * returning the last index at which the specified value is found.","   *","   * @public","   * @param {*} value The element to search for in the sequence.","   * @returns {number} The last index within this sequence where the given value","   *     is located, or -1 if the sequence doesn't contain the value.","   *","   * @examples","   * Lazy([\"a\", \"b\", \"c\", \"b\", \"a\"]).lastIndexOf(\"b\")    // => 3","   * Lazy([1, 2, 3]).lastIndexOf(0)                      // => -1","   * Lazy([2, 2, 1, 2, 4]).filter(isEven).lastIndexOf(2) // 2","   */","  Sequence.prototype.lastIndexOf = function lastIndexOf(value) {","    var reversed = this.getIndex().reverse(),","        index    = reversed.indexOf(value);","    if (index !== -1) {","      index = reversed.length() - index - 1;","    }","    return index;","  };","","  /**","   * Performs a binary search of this sequence, returning the lowest index where","   * the given value is either found, or where it belongs (if it is not already","   * in the sequence).","   *","   * This method assumes the sequence is in sorted order and will fail otherwise.","   *","   * @public","   * @param {*} value The element to search for in the sequence.","   * @returns {number} An index within this sequence where the given value is","   *     located, or where it belongs in sorted order.","   *","   * @examples","   * Lazy([1, 3, 6, 9]).sortedIndex(3)                    // => 1","   * Lazy([1, 3, 6, 9]).sortedIndex(7)                    // => 3","   * Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(10) // => 0","   * Lazy([5, 10, 15, 20]).filter(isEven).sortedIndex(12) // => 1","   */","  Sequence.prototype.sortedIndex = function sortedIndex(value) {","    var indexed = this.getIndex(),","        lower   = 0,","        upper   = indexed.length(),","        i;","","    while (lower < upper) {","      i = (lower + upper) >>> 1;","      if (compare(indexed.get(i), value) === -1) {","        lower = i + 1;","      } else {","        upper = i;","      }","    }","    return lower;","  };","","  /**","   * Checks whether the given value is in this sequence.","   *","   * @public","   * @param {*} value The element to search for in the sequence.","   * @returns {boolean} True if the sequence contains the value, false if not.","   *","   * @examples","   * var numbers = [5, 10, 15, 20];","   *","   * Lazy(numbers).contains(15) // => true","   * Lazy(numbers).contains(13) // => false","   */","  Sequence.prototype.contains = function contains(value) {","    return this.indexOf(value) !== -1;","  };","","  /**","   * Aggregates a sequence into a single value according to some accumulator","   * function.","   *","   * For an asynchronous sequence, instead of immediately returning a result","   * (which it can't, obviously), this method returns an {@link AsyncHandle}","   * whose `onComplete` method can be called to supply a callback to handle the","   * final result once iteration has completed.","   *","   * @public","   * @aka inject, foldl","   * @param {Function} aggregator The function through which to pass every element","   *     in the sequence. For every element, the function will be passed the total","   *     aggregated result thus far and the element itself, and should return a","   *     new aggregated result.","   * @param {*=} memo The starting value to use for the aggregated result","   *     (defaults to the first element in the sequence).","   * @returns {*} The result of the aggregation, or, for asynchronous sequences,","   *     an {@link AsyncHandle} whose `onComplete` method accepts a callback to","   *     handle the final result.","   *","   * @examples","   * function multiply(x, y) { return x * y; }","   *","   * var numbers = [1, 2, 3, 4];","   *","   * Lazy(numbers).reduce(multiply)    // => 24","   * Lazy(numbers).reduce(multiply, 5) // => 120","   */","  Sequence.prototype.reduce = function reduce(aggregator, memo) {","    if (arguments.length < 2) {","      return this.tail().reduce(aggregator, this.head());","    }","","    var eachResult = this.each(function(e, i) {","      memo = aggregator(memo, e, i);","    });","","    // TODO: Think of a way more efficient solution to this problem.","    if (eachResult instanceof AsyncHandle) {","      return eachResult.then(function() { return memo; });","    }","","    return memo;","  };","","  Sequence.prototype.inject =","  Sequence.prototype.foldl = function foldl(aggregator, memo) {","    return this.reduce(aggregator, memo);","  };","","  /**","   * Aggregates a sequence, from the tail, into a single value according to some","   * accumulator function.","   *","   * @public","   * @aka foldr","   * @param {Function} aggregator The function through which to pass every element","   *     in the sequence. For every element, the function will be passed the total","   *     aggregated result thus far and the element itself, and should return a","   *     new aggregated result.","   * @param {*} memo The starting value to use for the aggregated result.","   * @returns {*} The result of the aggregation.","   *","   * @examples","   * function append(s1, s2) {","   *   return s1 + s2;","   * }","   *","   * function isVowel(str) {","   *   return \"aeiou\".indexOf(str) !== -1;","   * }","   *","   * Lazy(\"abcde\").reduceRight(append)                 // => \"edcba\"","   * Lazy(\"abcde\").filter(isVowel).reduceRight(append) // => \"ea\"","   */","  Sequence.prototype.reduceRight = function reduceRight(aggregator, memo) {","    if (arguments.length < 2) {","      return this.initial(1).reduceRight(aggregator, this.last());","    }","","    // This bothers me... but frankly, calling reverse().reduce() is potentially","    // going to eagerly evaluate the sequence anyway; so it's really not an issue.","    var indexed = this.getIndex(),","        i = indexed.length() - 1;","    return indexed.reverse().reduce(function(m, e) {","      return aggregator(m, e, i--);","    }, memo);","  };","","  Sequence.prototype.foldr = function foldr(aggregator, memo) {","    return this.reduceRight(aggregator, memo);","  };","","  /**","   * Groups this sequence into consecutive (overlapping) segments of a specified","   * length. If the underlying sequence has fewer elements than the specified","   * length, then this sequence will be empty.","   *","   * @public","   * @param {number} length The length of each consecutive segment.","   * @returns {Sequence} The resulting sequence of consecutive segments.","   *","   * @examples","   * Lazy([]).consecutive(2)        // => sequence: []","   * Lazy([1]).consecutive(2)       // => sequence: []","   * Lazy([1, 2]).consecutive(2)    // => sequence: [[1, 2]]","   * Lazy([1, 2, 3]).consecutive(2) // => sequence: [[1, 2], [2, 3]]","   * Lazy([1, 2, 3]).consecutive(0) // => sequence: [[]]","   * Lazy([1, 2, 3]).consecutive(1) // => sequence: [[1], [2], [3]]","   */","  Sequence.prototype.consecutive = function consecutive(count) {","    var queue    = new Queue(count);","    var segments = this.map(function(element) {","      if (queue.add(element).count === count) {","        return queue.toArray();","      }","    });","    return segments.compact();","  };","","  /**","   * Breaks this sequence into chunks (arrays) of a specified length.","   *","   * @public","   * @param {number} size The size of each chunk.","   * @returns {Sequence} The resulting sequence of chunks.","   *","   * @examples","   * Lazy([]).chunk(2)        // sequence: []","   * Lazy([1, 2, 3]).chunk(2) // sequence: [[1, 2], [3]]","   * Lazy([1, 2, 3]).chunk(1) // sequence: [[1], [2], [3]]","   * Lazy([1, 2, 3]).chunk(4) // sequence: [[1, 2, 3]]","   * Lazy([1, 2, 3]).chunk(0) // throws","   */","  Sequence.prototype.chunk = function chunk(size) {","    if (size < 1) {","      throw new Error(\"You must specify a positive chunk size.\");","    }","","    return new ChunkedSequence(this, size);","  };","","  /**","   * @constructor","   */","  function ChunkedSequence(parent, size) {","    this.parent    = parent;","    this.chunkSize = size;","  }","","  ChunkedSequence.prototype = new Sequence();","","  ChunkedSequence.prototype.getIterator = function getIterator() {","    return new ChunkedIterator(this.parent, this.chunkSize);","  };","","  /**","   * @constructor","   */","  function ChunkedIterator(sequence, size) {","    this.iterator = sequence.getIterator();","    this.size     = size;","  }","","  ChunkedIterator.prototype.current = function current() {","    return this.currentChunk;","  };","","  ChunkedIterator.prototype.moveNext = function moveNext() {","    var iterator  = this.iterator,","        chunkSize = this.size,","        chunk     = [];","","    while (chunk.length < chunkSize && iterator.moveNext()) {","      chunk.push(iterator.current());","    }","","    if (chunk.length === 0) {","      return false;","    }","","    this.currentChunk = chunk;","    return true;","  };","","  /**","   * Passes each element in the sequence to the specified callback during","   * iteration. This is like {@link Sequence#each}, except that it can be","   * inserted anywhere in the middle of a chain of methods to \"intercept\" the","   * values in the sequence at that point.","   *","   * @public","   * @param {Function} callback A function to call on every element in the","   *     sequence during iteration. The return value of this function does not","   *     matter.","   * @returns {Sequence} A sequence comprising the same elements as this one.","   *","   * @examples","   * Lazy([1, 2, 3]).tap(fn).each(Lazy.noop); // calls fn 3 times","   */","  Sequence.prototype.tap = function tap(callback) {","    return new TappedSequence(this, callback);","  };","","  /**","   * @constructor","   */","  function TappedSequence(parent, callback) {","    this.parent = parent;","    this.callback = callback;","  }","","  TappedSequence.prototype = new Sequence();","","  TappedSequence.prototype.each = function each(fn) {","    var callback = this.callback;","    return this.parent.each(function(e, i) {","      callback(e, i);","      return fn(e, i);","    });","  };","","  /**","   * Seaches for the first element in the sequence satisfying a given predicate.","   *","   * @public","   * @aka detect","   * @param {Function} predicate A function to call on (potentially) every element","   *     in the sequence.","   * @returns {*} The first element in the sequence for which `predicate` returns","   *     `true`, or `undefined` if no such element is found.","   *","   * @examples","   * function divisibleBy3(x) {","   *   return x % 3 === 0;","   * }","   *","   * var numbers = [5, 6, 7, 8, 9, 10];","   *","   * Lazy(numbers).find(divisibleBy3) // => 6","   * Lazy(numbers).find(isNegative)   // => undefined","   */","  Sequence.prototype.find = function find(predicate) {","    return this.filter(predicate).first();","  };","","  Sequence.prototype.detect = function detect(predicate) {","    return this.find(predicate);","  };","","  /**","   * Gets the minimum value in the sequence.","   *","   * @public","   * @param {Function=} valueFn The function by which the value for comparison is","   *     calculated for each element in the sequence.","   * @returns {*} The element with the lowest value in the sequence, or","   *     undefined` if the sequence is empty.","   *","   * @examples","   * function negate(x) { return x * -1; }","   *","   * Lazy([]).min()                       // => undefined","   * Lazy([1]).min()                      // => 1","   * Lazy([1, 2]).min()                   // => 1","   * Lazy([2, 1]).min()                   // => 1","   * Lazy([6, 18, 2, 49, 34]).min()       // => 2","   * Lazy([6, 18, 2, 49, 34]).min(negate) // => 49","   * Lazy(['b', 'a', 'c']).min()          // => 'a'","   */","  Sequence.prototype.min = function min(valueFn) {","    if (typeof valueFn !== \"undefined\") {","      return this.minBy(valueFn);","    }","","    return this.reduce(function(prev, current, i) {","      if (typeof prev === \"undefined\") {","        return current;","      }","      return current < prev ? current : prev;","    });","  };","","  Sequence.prototype.minBy = function minBy(valueFn) {","    valueFn = createCallback(valueFn);","    return this.reduce(function(x, y) { return valueFn(y) < valueFn(x) ? y : x; });","  };","","  /**","   * Gets the maximum value in the sequence.","   *","   * @public","   * @param {Function=} valueFn The function by which the value for comparison is","   *     calculated for each element in the sequence.","   * @returns {*} The element with the highest value in the sequence, or","   *     undefined if the sequence is empty.","   *","   * @examples","   * function reverseDigits(x) {","   *   return Number(String(x).split('').reverse().join(''));","   * }","   *","   * Lazy([]).max()                              // => undefined","   * Lazy([1]).max()                             // => 1","   * Lazy([1, 2]).max()                          // => 2","   * Lazy([2, 1]).max()                          // => 2","   * Lazy([6, 18, 2, 48, 29]).max()              // => 48","   * Lazy([6, 18, 2, 48, 29]).max(reverseDigits) // => 29","   * Lazy(['b', 'c', 'a']).max()                 // => 'c'","   */","  Sequence.prototype.max = function max(valueFn) {","    if (typeof valueFn !== \"undefined\") {","      return this.maxBy(valueFn);","    }","","    return this.reduce(function(prev, current, i) {","      if (typeof prev === \"undefined\") {","        return current;","      }","      return current > prev ? current : prev;","    });","  };","","  Sequence.prototype.maxBy = function maxBy(valueFn) {","    valueFn = createCallback(valueFn);","    return this.reduce(function(x, y) { return valueFn(y) > valueFn(x) ? y : x; });","  };","","  /**","   * Gets the sum of the values in the sequence.","   *","   * @public","   * @param {Function=} valueFn The function used to select the values that will","   *     be summed up.","   * @returns {*} The sum.","   *","   * @examples","   * Lazy([]).sum()                     // => 0","   * Lazy([1, 2, 3, 4]).sum()           // => 10","   * Lazy([1.2, 3.4]).sum(Math.floor)   // => 4","   * Lazy(['foo', 'bar']).sum('length') // => 6","   */","  Sequence.prototype.sum = function sum(valueFn) {","    if (typeof valueFn !== \"undefined\") {","      return this.sumBy(valueFn);","    }","","    return this.reduce(function(x, y) { return x + y; }, 0);","  };","","  Sequence.prototype.sumBy = function sumBy(valueFn) {","    valueFn = createCallback(valueFn);","    return this.reduce(function(x, y) { return x + valueFn(y); }, 0);","  };","","  /**","   * Creates a string from joining together all of the elements in this sequence,","   * separated by the given delimiter.","   *","   * @public","   * @aka toString","   * @param {string=} delimiter The separator to insert between every element from","   *     this sequence in the resulting string (defaults to `\",\"`).","   * @returns {string} The delimited string.","   *","   * @examples","   * Lazy([6, 29, 1984]).join(\"/\")  // => \"6/29/1984\"","   * Lazy([\"a\", \"b\", \"c\"]).join()   // => \"a,b,c\"","   * Lazy([\"a\", \"b\", \"c\"]).join(\"\") // => \"abc\"","   * Lazy([1, 2, 3]).join()         // => \"1,2,3\"","   * Lazy([1, 2, 3]).join(\"\")       // => \"123\"","   * Lazy([\"\", \"\", \"\"]).join(\",\")   // => \",,\"","   * Lazy([1, 2]).join(0)           // => \"102\"","   * Lazy([\"cons\", \"d\"]).join(true) // => \"construed\"","   * Lazy({foo: 1, bar: 2}).values().join() // \"1,2\"","   * Lazy({foo: 1, bar: 2}).keys().join() // \"foo,bar\"","   */","  Sequence.prototype.join = function join(delimiter) {","    delimiter = typeof delimiter === \"undefined\" ? \",\" : String(delimiter);","","    return this.reduce(function(str, e, i) {","      if (i > 0) {","        str += delimiter;","      }","      return str + e;","    }, \"\");","  };","","  Sequence.prototype.toString = function toString(delimiter) {","    return this.join(delimiter);","  };","","  /**","   * Creates a sequence, with the same elements as this one, that will be iterated","   * over asynchronously when calling `each`.","   *","   * @public","   * @param {number=} interval The approximate period, in milliseconds, that","   *     should elapse between each element in the resulting sequence. Omitting","   *     this argument will result in the fastest possible asynchronous iteration.","   * @returns {AsyncSequence} The new asynchronous sequence.","   *","   * @examples","   * Lazy([1, 2, 3]).async(100).each(fn) // calls fn 3 times asynchronously","   */","  Sequence.prototype.async = function async(interval) {","    return new AsyncSequence(this, interval);","  };","","  /**","   * @constructor","   */","  function SimpleIntersectionSequence(parent, array) {","    this.parent = parent;","    this.array  = array;","    this.each   = getEachForIntersection(array);","  }","","  SimpleIntersectionSequence.prototype = new Sequence();","","  SimpleIntersectionSequence.prototype.eachMemoizerCache = function eachMemoizerCache(fn) {","    var iterator = new UniqueMemoizer(Lazy(this.array).getIterator()),","        i = 0;","","    return this.parent.uniq().each(function(e) {","      if (iterator.contains(e)) {","        return fn(e, i++);","      }","    });","  };","","  SimpleIntersectionSequence.prototype.eachArrayCache = function eachArrayCache(fn) {","    var array = this.array,","        find  = arrayContains,","        i = 0;","","    return this.parent.uniq().each(function(e) {","      if (find(array, e)) {","        return fn(e, i++);","      }","    });","  };","","  function getEachForIntersection(source) {","    if (source.length < 40) {","      return SimpleIntersectionSequence.prototype.eachArrayCache;","    } else {","      return SimpleIntersectionSequence.prototype.eachMemoizerCache;","    }","  }","","  /**","   * An optimized version of {@link ZippedSequence}, when zipping a sequence with","   * only one array.","   *","   * @param {Sequence} parent The underlying sequence.","   * @param {Array} array The array with which to zip the sequence.","   * @constructor","   */","  function SimpleZippedSequence(parent, array) {","    this.parent = parent;","    this.array  = array;","  }","","  SimpleZippedSequence.prototype = new Sequence();","","  SimpleZippedSequence.prototype.each = function each(fn) {","    var array = this.array,","        i = -1;","","    var iteratedLeft = this.parent.each(function(e) {","      ++i;","      return fn([e, array[i]], i);","    });","","    if (!iteratedLeft) {","      return false;","    }","","    while (++i < array.length) {","      if (fn([undefined, array[i]], i) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * An `ArrayLikeSequence` is a {@link Sequence} that provides random access to","   * its elements. This extends the API for iterating with the additional methods","   * {@link #get} and {@link #length}, allowing a sequence to act as a \"view\" into","   * a collection or other indexed data source.","   *","   * The initial sequence created by wrapping an array with `Lazy(array)` is an","   * `ArrayLikeSequence`.","   *","   * All methods of `ArrayLikeSequence` that conceptually should return","   * something like a array (with indexed access) return another","   * `ArrayLikeSequence`, for example:","   *","   * - {@link Sequence#map}","   * - {@link ArrayLikeSequence#slice}","   * - {@link Sequence#take} and {@link Sequence#drop}","   * - {@link Sequence#reverse}","   *","   * The above is not an exhaustive list. There are also certain other cases","   * where it might be possible to return an `ArrayLikeSequence` (e.g., calling","   * {@link Sequence#concat} with a single array argument), but this is not","   * guaranteed by the API.","   *","   * Note that in many cases, it is not possible to provide indexed access","   * without first performing at least a partial iteration of the underlying","   * sequence. In these cases an `ArrayLikeSequence` will not be returned:","   *","   * - {@link Sequence#filter}","   * - {@link Sequence#uniq}","   * - {@link Sequence#union}","   * - {@link Sequence#intersect}","   *","   * etc. The above methods only return ordinary {@link Sequence} objects.","   *","   * Defining custom array-like sequences","   * ------------------------------------","   *","   * Creating a custom `ArrayLikeSequence` is essentially the same as creating a","   * custom {@link Sequence}. You just have a couple more methods you need to","   * implement: `get` and (optionally) `length`.","   *","   * Here's an example. Let's define a sequence type called `OffsetSequence` that","   * offsets each of its parent's elements by a set distance, and circles back to","   * the beginning after reaching the end. **Remember**: the initialization","   * function you pass to {@link #define} should always accept a `parent` as its","   * first parameter.","   *","   *     ArrayLikeSequence.define(\"offset\", {","   *       init: function(parent, offset) {","   *         this.offset = offset;","   *       },","   *","   *       get: function(i) {","   *         return this.parent.get((i + this.offset) % this.parent.length());","   *       }","   *     });","   *","   * It's worth noting a couple of things here.","   *","   * First, Lazy's default implementation of `length` simply returns the parent's","   * length. In this case, since an `OffsetSequence` will always have the same","   * number of elements as its parent, that implementation is fine; so we don't","   * need to override it.","   *","   * Second, the default implementation of `each` uses `get` and `length` to","   * essentially create a `for` loop, which is fine here. If you want to implement","   * `each` your own way, you can do that; but in most cases (as here), you can","   * probably just stick with the default.","   *","   * So we're already done, after only implementing `get`! Pretty easy, huh?","   *","   * Now the `offset` method will be chainable from any `ArrayLikeSequence`. So","   * for example:","   *","   *     Lazy([1, 2, 3]).map(mapFn).offset(3);","   *","   * ...will work, but:","   *","   *     Lazy([1, 2, 3]).filter(mapFn).offset(3);","   *","   * ...will not (because `filter` does not return an `ArrayLikeSequence`).","   *","   * (Also, as with the example provided for defining custom {@link Sequence}","   * types, this example really could have been implemented using a function","   * already available as part of Lazy.js: in this case, {@link Sequence#map}.)","   *","   * @public","   * @constructor","   *","   * @examples","   * Lazy([1, 2, 3])                    // instanceof Lazy.ArrayLikeSequence","   * Lazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence","   * Lazy([1, 2, 3]).take(2)            // instanceof Lazy.ArrayLikeSequence","   * Lazy([1, 2, 3]).drop(2)            // instanceof Lazy.ArrayLikeSequence","   * Lazy([1, 2, 3]).reverse()          // instanceof Lazy.ArrayLikeSequence","   * Lazy([1, 2, 3]).slice(1, 2)        // instanceof Lazy.ArrayLikeSequence","   */","  function ArrayLikeSequence() {}","","  ArrayLikeSequence.prototype = new Sequence();","","  /**","   * Create a new constructor function for a type inheriting from","   * `ArrayLikeSequence`.","   *","   * @public","   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be","   *     used for constructing the new sequence. The method will be attached to","   *     the `ArrayLikeSequence` prototype so that it can be chained with any other","   *     methods that return array-like sequences.","   * @param {Object} overrides An object containing function overrides for this","   *     new sequence type. **Must** include `get`. *May* include `init`,","   *     `length`, `getIterator`, and `each`. For each function, `this` will be","   *     the new sequence and `this.parent` will be the source sequence.","   * @returns {Function} A constructor for a new type inheriting from","   *     `ArrayLikeSequence`.","   *","   * @examples","   * Lazy.ArrayLikeSequence.define(\"offset\", {","   *   init: function(offset) {","   *     this.offset = offset;","   *   },","   *","   *   get: function(i) {","   *     return this.parent.get((i + this.offset) % this.parent.length());","   *   }","   * });","   *","   * Lazy([1, 2, 3]).offset(1) // sequence: [2, 3, 1]","   */","  ArrayLikeSequence.define = function define(methodName, overrides) {","    if (!overrides || typeof overrides.get !== 'function') {","      throw new Error(\"A custom array-like sequence must implement *at least* get!\");","    }","","    return defineSequenceType(ArrayLikeSequence, methodName, overrides);","  };","","  /**","   * Returns the element at the specified index.","   *","   * @public","   * @param {number} i The index to access.","   * @returns {*} The element.","   *","   * @examples","   * function increment(x) { return x + 1; }","   *","   * Lazy([1, 2, 3]).get(1)                // => 2","   * Lazy([1, 2, 3]).get(-1)               // => undefined","   * Lazy([1, 2, 3]).map(increment).get(1) // => 3","   */","  ArrayLikeSequence.prototype.get = function get(i) {","    return this.parent.get(i);","  };","","  /**","   * Returns the length of the sequence.","   *","   * @public","   * @returns {number} The length.","   *","   * @examples","   * function increment(x) { return x + 1; }","   *","   * Lazy([]).length()                       // => 0","   * Lazy([1, 2, 3]).length()                // => 3","   * Lazy([1, 2, 3]).map(increment).length() // => 3","   */","  ArrayLikeSequence.prototype.length = function length() {","    return this.parent.length();","  };","","  /**","   * Returns the current sequence (since it is already indexed).","   */","  ArrayLikeSequence.prototype.getIndex = function getIndex() {","    return this;","  };","","  /**","   * An optimized version of {@link Sequence#getIterator}.","   */","  ArrayLikeSequence.prototype.getIterator = function getIterator() {","    return new IndexedIterator(this);","  };","","  /**","   * An optimized version of {@link Iterator} meant to work with already-indexed","   * sequences.","   *","   * @param {ArrayLikeSequence} sequence The sequence to iterate over.","   * @constructor","   */","  function IndexedIterator(sequence) {","    this.sequence = sequence;","    this.index    = -1;","  }","","  IndexedIterator.prototype.current = function current() {","    return this.sequence.get(this.index);","  };","","  IndexedIterator.prototype.moveNext = function moveNext() {","    if (this.index >= this.sequence.length() - 1) {","      return false;","    }","","    ++this.index;","    return true;","  };","","  /**","   * An optimized version of {@link Sequence#each}.","   */","  ArrayLikeSequence.prototype.each = function each(fn) {","    var length = this.length(),","        i = -1;","","    while (++i < length) {","      if (fn(this.get(i), i) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * Returns a new sequence with the same elements as this one, plus the","   * specified element at the end.","   *","   * @public","   * @returns {ArrayLikeSequence} The new array-like sequence.","   *","   * @examples","   * Lazy([1, 2]).push(3) // sequence: [1, 2, 3]","   * Lazy([]).push(1)     // sequence: [1]","   */","  ArrayLikeSequence.prototype.push = function push(value) {","    return this.concat([value]);","  };","","  /**","   * Returns a new sequence with the same elements as this one, minus the last","   * element.","   *","   * @public","   * @returns {ArrayLikeSequence} The new array-like sequence.","   *","   * @examples","   * Lazy([1, 2, 3]).pop() // sequence: [1, 2]","   * Lazy([]).pop()        // sequence: []","   */","  ArrayLikeSequence.prototype.pop = function pop() {","    return this.initial();","  };","","  /**","   * Returns a new sequence with the same elements as this one, plus the","   * specified element at the beginning.","   *","   * @public","   * @returns {ArrayLikeSequence} The new array-like sequence.","   *","   * @examples","   * Lazy([1, 2]).unshift(3) // sequence: [3, 1, 2]","   * Lazy([]).unshift(1)     // sequence: [1]","   */","  ArrayLikeSequence.prototype.unshift = function unshift(value) {","    return Lazy([value]).concat(this);","  };","","  /**","   * Returns a new sequence with the same elements as this one, minus the first","   * element.","   *","   * @public","   * @returns {ArrayLikeSequence} The new array-like sequence.","   *","   * @examples","   * Lazy([1, 2, 3]).shift() // sequence: [2, 3]","   * Lazy([]).shift()        // sequence: []","   */","  ArrayLikeSequence.prototype.shift = function shift() {","    return this.drop();","  };","","  /**","   * Returns a new sequence comprising the portion of this sequence starting","   * from the specified starting index and continuing until the specified ending","   * index or to the end of the sequence.","   *","   * @public","   * @param {number} begin The index at which the new sequence should start.","   * @param {number=} end The index at which the new sequence should end.","   * @returns {ArrayLikeSequence} The new array-like sequence.","   *","   * @examples","   * Lazy([1, 2, 3, 4, 5]).slice(0)     // sequence: [1, 2, 3, 4, 5]","   * Lazy([1, 2, 3, 4, 5]).slice(2)     // sequence: [3, 4, 5]","   * Lazy([1, 2, 3, 4, 5]).slice(2, 4)  // sequence: [3, 4]","   * Lazy([1, 2, 3, 4, 5]).slice(-1)    // sequence: [5]","   * Lazy([1, 2, 3, 4, 5]).slice(1, -1) // sequence: [2, 3, 4]","   * Lazy([1, 2, 3, 4, 5]).slice(0, 10) // sequence: [1, 2, 3, 4, 5]","   */","  ArrayLikeSequence.prototype.slice = function slice(begin, end) {","    var length = this.length();","","    if (begin < 0) {","      begin = length + begin;","    }","","    var result = this.drop(begin);","","    if (typeof end === \"number\") {","      if (end < 0) {","        end = length + end;","      }","      result = result.take(end - begin);","    }","","    return result;","  };","","  /**","   * An optimized version of {@link Sequence#map}, which creates an","   * {@link ArrayLikeSequence} so that the result still provides random access.","   *","   * @public","   *","   * @examples","   * Lazy([1, 2, 3]).map(Lazy.identity) // instanceof Lazy.ArrayLikeSequence","   */","  ArrayLikeSequence.prototype.map = function map(mapFn) {","    return new IndexedMappedSequence(this, createCallback(mapFn));","  };","","  /**","   * @constructor","   */","  function IndexedMappedSequence(parent, mapFn) {","    this.parent = parent;","    this.mapFn  = mapFn;","  }","","  IndexedMappedSequence.prototype = new ArrayLikeSequence();","","  IndexedMappedSequence.prototype.get = function get(i) {","    if (i < 0 || i >= this.parent.length()) {","      return undefined;","    }","","    return this.mapFn(this.parent.get(i), i);","  };","","  /**","   * An optimized version of {@link Sequence#filter}.","   */","  ArrayLikeSequence.prototype.filter = function filter(filterFn) {","    return new IndexedFilteredSequence(this, createCallback(filterFn));","  };","","  /**","   * @constructor","   */","  function IndexedFilteredSequence(parent, filterFn) {","    this.parent   = parent;","    this.filterFn = filterFn;","  }","","  IndexedFilteredSequence.prototype = new FilteredSequence();","","  IndexedFilteredSequence.prototype.each = function each(fn) {","    var parent = this.parent,","        filterFn = this.filterFn,","        length = this.parent.length(),","        i = -1,","        j = 0,","        e;","","    while (++i < length) {","      e = parent.get(i);","      if (filterFn(e, i) && fn(e, j++) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * An optimized version of {@link Sequence#reverse}, which creates an","   * {@link ArrayLikeSequence} so that the result still provides random access.","   *","   * @public","   *","   * @examples","   * Lazy([1, 2, 3]).reverse() // instanceof Lazy.ArrayLikeSequence","   */","  ArrayLikeSequence.prototype.reverse = function reverse() {","    return new IndexedReversedSequence(this);","  };","","  /**","   * @constructor","   */","  function IndexedReversedSequence(parent) {","    this.parent = parent;","  }","","  IndexedReversedSequence.prototype = new ArrayLikeSequence();","","  IndexedReversedSequence.prototype.get = function get(i) {","    return this.parent.get(this.length() - i - 1);","  };","","  /**","   * An optimized version of {@link Sequence#first}, which creates an","   * {@link ArrayLikeSequence} so that the result still provides random access.","   *","   * @public","   *","   * @examples","   * Lazy([1, 2, 3]).first(2) // instanceof Lazy.ArrayLikeSequence","   */","  ArrayLikeSequence.prototype.first = function first(count) {","    if (typeof count === \"undefined\") {","      return this.get(0);","    }","","    return new IndexedTakeSequence(this, count);","  };","","  /**","   * @constructor","   */","  function IndexedTakeSequence(parent, count) {","    this.parent = parent;","    this.count  = count;","  }","","  IndexedTakeSequence.prototype = new ArrayLikeSequence();","","  IndexedTakeSequence.prototype.length = function length() {","    var parentLength = this.parent.length();","    return this.count <= parentLength ? this.count : parentLength;","  };","","  /**","   * An optimized version of {@link Sequence#rest}, which creates an","   * {@link ArrayLikeSequence} so that the result still provides random access.","   *","   * @public","   *","   * @examples","   * Lazy([1, 2, 3]).rest() // instanceof Lazy.ArrayLikeSequence","   */","  ArrayLikeSequence.prototype.rest = function rest(count) {","    return new IndexedDropSequence(this, count);","  };","","  /**","   * @constructor","   */","  function IndexedDropSequence(parent, count) {","    this.parent = parent;","    this.count  = typeof count === \"number\" ? count : 1;","  }","","  IndexedDropSequence.prototype = new ArrayLikeSequence();","","  IndexedDropSequence.prototype.get = function get(i) {","    return this.parent.get(this.count + i);","  };","","  IndexedDropSequence.prototype.length = function length() {","    var parentLength = this.parent.length();","    return this.count <= parentLength ? parentLength - this.count : 0;","  };","","  /**","   * An optimized version of {@link Sequence#concat} that returns another","   * {@link ArrayLikeSequence} *if* the argument is an array.","   *","   * @public","   * @param {...*} var_args","   *","   * @examples","   * Lazy([1, 2]).concat([3, 4]) // instanceof Lazy.ArrayLikeSequence","   * Lazy([1, 2]).concat([3, 4]) // sequence: [1, 2, 3, 4]","   */","  ArrayLikeSequence.prototype.concat = function concat(var_args) {","    if (arguments.length === 1 && isArray(arguments[0])) {","      return new IndexedConcatenatedSequence(this, (/** @type {Array} */ var_args));","    } else {","      return Sequence.prototype.concat.apply(this, arguments);","    }","  };","","  /**","   * @constructor","   */","  function IndexedConcatenatedSequence(parent, other) {","    this.parent = parent;","    this.other  = other;","  }","","  IndexedConcatenatedSequence.prototype = new ArrayLikeSequence();","","  IndexedConcatenatedSequence.prototype.get = function get(i) {","    var parentLength = this.parent.length();","    if (i < parentLength) {","      return this.parent.get(i);","    } else {","      return this.other[i - parentLength];","    }","  };","","  IndexedConcatenatedSequence.prototype.length = function length() {","    return this.parent.length() + this.other.length;","  };","","  /**","   * An optimized version of {@link Sequence#uniq}.","   */","  ArrayLikeSequence.prototype.uniq = function uniq(keyFn) {","    return new IndexedUniqueSequence(this, createCallback(keyFn));","  };","","  /**","   * @param {ArrayLikeSequence} parent","   * @constructor","   */","  function IndexedUniqueSequence(parent, keyFn) {","    this.parent = parent;","    this.each   = getEachForParent(parent);","    this.keyFn  = keyFn;","  }","","  IndexedUniqueSequence.prototype = new Sequence();","","  IndexedUniqueSequence.prototype.eachArrayCache = function eachArrayCache(fn) {","    // Basically the same implementation as w/ the set, but using an array because","    // it's cheaper for smaller sequences.","    var parent = this.parent,","        keyFn  = this.keyFn,","        length = parent.length(),","        cache  = [],","        find   = arrayContains,","        key, value,","        i = -1,","        j = 0;","","    while (++i < length) {","      value = parent.get(i);","      key = keyFn(value);","      if (!find(cache, key)) {","        cache.push(key);","        if (fn(value, j++) === false) {","          return false;","        }","      }","    }","  };","","  IndexedUniqueSequence.prototype.eachSetCache = UniqueSequence.prototype.each;","","  function getEachForParent(parent) {","    if (parent.length() < 100) {","      return IndexedUniqueSequence.prototype.eachArrayCache;","    } else {","      return UniqueSequence.prototype.each;","    }","  }","","  // Now that we've fully initialized the ArrayLikeSequence prototype, we can","  // set the prototype for MemoizedSequence.","","  MemoizedSequence.prototype = new Sequence();","","  MemoizedSequence.prototype.getParentIterator = function getParentIterator() {","    // Since the premise of this sequence is that it only iterates over each","    // element of its parent a grand total of one (1) time, we should only ever","    // need to get the parent iterator once.","    if (!this.iterator) {","      this.iterator = this.parent.getIterator();","    }","","    return this.iterator;","  };","","  MemoizedSequence.prototype.getIterator = function getIterator() {","    return new Memoizer(this.memo, this.getParentIterator());","  };","","  MemoizedSequence.prototype.iterateTo = function iterateTo(i) {","    var memo = this.memo,","        iterator = this.getParentIterator();","","    while (i >= memo.length) {","      if (!iterator.moveNext()) {","        this.complete = true;","        return false;","      }","","      memo.push(iterator.current());","    }","","    return true;","  };","","  MemoizedSequence.prototype.get = function get(i) {","    var memo = this.memo;","","    if (i < memo.length) {","      return memo[i];","    }","","    if (!this.iterateTo(i)) {","      return undefined;","    }","","    return memo[i];","  };","","  MemoizedSequence.prototype.length = function length() {","    if (!this.complete) {","      this.iterateTo(Infinity);","    }","","    return this.memo.length;","  };","","  MemoizedSequence.prototype.slice = function slice(begin, end) {","    if (!this.complete) {","      this.iterateTo(end);","    }","","    return Lazy(this.memo.slice(begin, end));","  };","","  MemoizedSequence.prototype.toArray = function toArray() {","    if (!this.complete) {","      this.iterateTo(Infinity);","    }","","    return this.memo.slice(0);","  };","","  /**","   * ArrayWrapper is the most basic {@link Sequence}. It directly wraps an array","   * and implements the same methods as {@link ArrayLikeSequence}, but more","   * efficiently.","   *","   * @constructor","   */","  function ArrayWrapper(source) {","    this.source = source;","  }","","  ArrayWrapper.prototype = new ArrayLikeSequence();","","  ArrayWrapper.prototype.root = function root() {","    return this;","  };","","  ArrayWrapper.prototype.isAsync = function isAsync() {","    return false;","  };","","  /**","   * Returns the element at the specified index in the source array.","   *","   * @param {number} i The index to access.","   * @returns {*} The element.","   */","  ArrayWrapper.prototype.get = function get(i) {","    return this.source[i];","  };","","  /**","   * Returns the length of the source array.","   *","   * @returns {number} The length.","   */","  ArrayWrapper.prototype.length = function length() {","    return this.source.length;","  };","","  /**","   * An optimized version of {@link Sequence#each}.","   */","  ArrayWrapper.prototype.each = function each(fn) {","    return forEach(this.source, fn);","  };","","  /**","   * An optimized version of {@link Sequence#map}.","   */","  ArrayWrapper.prototype.map = function map(mapFn) {","    return new MappedArrayWrapper(this, createCallback(mapFn));","  };","","  /**","   * An optimized version of {@link Sequence#filter}.","   */","  ArrayWrapper.prototype.filter = function filter(filterFn) {","    return new FilteredArrayWrapper(this, createCallback(filterFn));","  };","","  /**","   * An optimized version of {@link Sequence#uniq}.","   */","  ArrayWrapper.prototype.uniq = function uniq(keyFn) {","    return new UniqueArrayWrapper(this, keyFn);","  };","","  /**","   * An optimized version of {@link ArrayLikeSequence#concat}.","   *","   * @param {...*} var_args","   */","  ArrayWrapper.prototype.concat = function concat(var_args) {","    if (arguments.length === 1 && isArray(arguments[0])) {","      return new ConcatArrayWrapper(this, (/** @type {Array} */ var_args));","    } else {","      return ArrayLikeSequence.prototype.concat.apply(this, arguments);","    }","  };","","  /**","   * An optimized version of {@link Sequence#toArray}.","   */","  ArrayWrapper.prototype.toArray = function toArray() {","    return this.source.slice(0);","  };","","  /**","   * @constructor","   */","  function MappedArrayWrapper(parent, mapFn) {","    this.parent = parent;","    this.mapFn  = mapFn;","  }","","  MappedArrayWrapper.prototype = new ArrayLikeSequence();","","  MappedArrayWrapper.prototype.get = function get(i) {","    var source = this.parent.source;","","    if (i < 0 || i >= source.length) {","      return undefined;","    }","","    return this.mapFn(source[i]);","  };","","  MappedArrayWrapper.prototype.length = function length() {","    return this.parent.source.length;","  };","","  MappedArrayWrapper.prototype.each = function each(fn) {","    var source = this.parent.source,","        length = source.length,","        mapFn  = this.mapFn,","        i = -1;","","    while (++i < length) {","      if (fn(mapFn(source[i], i), i) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * @constructor","   */","  function FilteredArrayWrapper(parent, filterFn) {","    this.parent   = parent;","    this.filterFn = filterFn;","  }","","  FilteredArrayWrapper.prototype = new FilteredSequence();","","  FilteredArrayWrapper.prototype.each = function each(fn) {","    var source = this.parent.source,","        filterFn = this.filterFn,","        length = source.length,","        i = -1,","        j = 0,","        e;","","    while (++i < length) {","      e = source[i];","      if (filterFn(e, i) && fn(e, j++) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * @constructor","   */","  function UniqueArrayWrapper(parent, keyFn) {","    this.parent = parent;","    this.each   = getEachForSource(parent.source);","    this.keyFn  = keyFn;","  }","","  UniqueArrayWrapper.prototype = new Sequence();","","  UniqueArrayWrapper.prototype.eachNoCache = function eachNoCache(fn) {","    var source = this.parent.source,","        keyFn  = this.keyFn,","        length = source.length,","        find   = arrayContainsBefore,","        value,","","        // Yes, this is hideous.","        // Trying to get performance first, will refactor next!","        i = -1,","        k = 0;","","    while (++i < length) {","      value = source[i];","      if (!find(source, value, i, keyFn) && fn(value, k++) === false) {","        return false;","      }","    }","","    return true;","  };","","  UniqueArrayWrapper.prototype.eachArrayCache = function eachArrayCache(fn) {","    // Basically the same implementation as w/ the set, but using an array because","    // it's cheaper for smaller sequences.","    var source = this.parent.source,","        keyFn  = this.keyFn,","        length = source.length,","        cache  = [],","        find   = arrayContains,","        key, value,","        i = -1,","        j = 0;","","    if (keyFn) {","      keyFn = createCallback(keyFn);","      while (++i < length) {","        value = source[i];","        key = keyFn(value);","        if (!find(cache, key)) {","          cache.push(key);","          if (fn(value, j++) === false) {","            return false;","          }","        }","      }","","    } else {","      while (++i < length) {","        value = source[i];","        if (!find(cache, value)) {","          cache.push(value);","          if (fn(value, j++) === false) {","            return false;","          }","        }","      }","    }","","    return true;","  };","","  UniqueArrayWrapper.prototype.eachSetCache = UniqueSequence.prototype.each;","","  /**","   * My latest findings here...","   *","   * So I hadn't really given the set-based approach enough credit. The main issue","   * was that my Set implementation was totally not optimized at all. After pretty","   * heavily optimizing it (just take a look; it's a monstrosity now!), it now","   * becomes the fastest option for much smaller values of N.","   */","  function getEachForSource(source) {","    if (source.length < 40) {","      return UniqueArrayWrapper.prototype.eachNoCache;","    } else if (source.length < 100) {","      return UniqueArrayWrapper.prototype.eachArrayCache;","    } else {","      return UniqueArrayWrapper.prototype.eachSetCache;","    }","  }","","  /**","   * @constructor","   */","  function ConcatArrayWrapper(parent, other) {","    this.parent = parent;","    this.other  = other;","  }","","  ConcatArrayWrapper.prototype = new ArrayLikeSequence();","","  ConcatArrayWrapper.prototype.get = function get(i) {","    var source = this.parent.source,","        sourceLength = source.length;","","    if (i < sourceLength) {","      return source[i];","    } else {","      return this.other[i - sourceLength];","    }","  };","","  ConcatArrayWrapper.prototype.length = function length() {","    return this.parent.source.length + this.other.length;","  };","","  ConcatArrayWrapper.prototype.each = function each(fn) {","    var source = this.parent.source,","        sourceLength = source.length,","        other = this.other,","        otherLength = other.length,","        i = 0,","        j = -1;","","    while (++j < sourceLength) {","      if (fn(source[j], i++) === false) {","        return false;","      }","    }","","    j = -1;","    while (++j < otherLength) {","      if (fn(other[j], i++) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * An `ObjectLikeSequence` object represents a sequence of key/value pairs.","   *","   * The initial sequence you get by wrapping an object with `Lazy(object)` is","   * an `ObjectLikeSequence`.","   *","   * All methods of `ObjectLikeSequence` that conceptually should return","   * something like an object return another `ObjectLikeSequence`.","   *","   * @public","   * @constructor","   *","   * @examples","   * var obj = { foo: 'bar' };","   *","   * Lazy(obj).assign({ bar: 'baz' })   // instanceof Lazy.ObjectLikeSequence","   * Lazy(obj).defaults({ bar: 'baz' }) // instanceof Lazy.ObjectLikeSequence","   * Lazy(obj).invert()                 // instanceof Lazy.ObjectLikeSequence","   */","  function ObjectLikeSequence() {}","","  ObjectLikeSequence.prototype = new Sequence();","","  /**","   * Create a new constructor function for a type inheriting from","   * `ObjectLikeSequence`.","   *","   * @public","   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be","   *     used for constructing the new sequence. The method will be attached to","   *     the `ObjectLikeSequence` prototype so that it can be chained with any other","   *     methods that return object-like sequences.","   * @param {Object} overrides An object containing function overrides for this","   *     new sequence type. **Must** include `each`. *May* include `init` and","   *     `get` (for looking up an element by key).","   * @returns {Function} A constructor for a new type inheriting from","   *     `ObjectLikeSequence`.","   *","   * @examples","   * function downcaseKey(value, key) {","   *   return [key.toLowerCase(), value];","   * }","   *","   * Lazy.ObjectLikeSequence.define(\"caseInsensitive\", {","   *   init: function() {","   *     var downcased = this.parent","   *       .map(downcaseKey)","   *       .toObject();","   *     this.downcased = Lazy(downcased);","   *   },","   *","   *   get: function(key) {","   *     return this.downcased.get(key.toLowerCase());","   *   },","   *","   *   each: function(fn) {","   *     return this.downcased.each(fn);","   *   }","   * });","   *","   * Lazy({ Foo: 'bar' }).caseInsensitive()            // sequence: { foo: 'bar' }","   * Lazy({ FOO: 'bar' }).caseInsensitive().get('foo') // => 'bar'","   * Lazy({ FOO: 'bar' }).caseInsensitive().get('FOO') // => 'bar'","   */","  ObjectLikeSequence.define = function define(methodName, overrides) {","    if (!overrides || typeof overrides.each !== 'function') {","      throw new Error(\"A custom object-like sequence must implement *at least* each!\");","    }","","    return defineSequenceType(ObjectLikeSequence, methodName, overrides);","  };","","  ObjectLikeSequence.prototype.value = function value() {","    return this.toObject();","  };","","  /**","   * Gets the element at the specified key in this sequence.","   *","   * @public","   * @param {string} key The key.","   * @returns {*} The element.","   *","   * @examples","   * Lazy({ foo: \"bar\" }).get(\"foo\")                          // => \"bar\"","   * Lazy({ foo: \"bar\" }).extend({ foo: \"baz\" }).get(\"foo\")   // => \"baz\"","   * Lazy({ foo: \"bar\" }).defaults({ bar: \"baz\" }).get(\"bar\") // => \"baz\"","   * Lazy({ foo: \"bar\" }).invert().get(\"bar\")                 // => \"foo\"","   * Lazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"foo\")        // => 1","   * Lazy({ foo: 1, bar: 2 }).pick([\"foo\"]).get(\"bar\")        // => undefined","   * Lazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"bar\")        // => 2","   * Lazy({ foo: 1, bar: 2 }).omit([\"foo\"]).get(\"foo\")        // => undefined","   */","  ObjectLikeSequence.prototype.get = function get(key) {","    var pair = this.pairs().find(function(pair) {","      return pair[0] === key;","    });","","    return pair ? pair[1] : undefined;","  };","","  /**","   * Returns a {@link Sequence} whose elements are the keys of this object-like","   * sequence.","   *","   * @public","   * @returns {Sequence} The sequence based on this sequence's keys.","   *","   * @examples","   * var obj = { hello: \"hola\", goodbye: \"hasta luego\" };","   *","   * Lazy(obj).keys() // sequence: [\"hello\", \"goodbye\"]","   * Lazy(obj).keys().map(function(v, i) { return [v, i]; }) // sequence: [[\"hello\", 0], [\"goodbye\", 1]]","   */","  ObjectLikeSequence.prototype.keys = function keys() {","    return new KeySequence(this);","  };","","  function KeySequence(parent) {","    this.parent = parent;","  }","","  KeySequence.prototype = new Sequence();","","  KeySequence.prototype.each = function each(fn) {","    var i = -1;","","    return this.parent.each(function(v, k) {","      return fn(k, ++i);","    });","  };","","  /**","   * Returns a {@link Sequence} whose elements are the values of this object-like","   * sequence.","   *","   * @public","   * @returns {Sequence} The sequence based on this sequence's values.","   *","   * @examples","   * Lazy({ hello: \"hola\", goodbye: \"hasta luego\" }).values() // sequence: [\"hola\", \"hasta luego\"]","   */","  ObjectLikeSequence.prototype.values = function values() {","    return new ValuesSequence(this);","  };","","  function ValuesSequence(parent) {","    this.parent = parent;","  }","","  ValuesSequence.prototype = new Sequence();","","  ValuesSequence.prototype.each = function each(fn) {","    var i = -1;","","    return this.parent.each(function(v, k) {","      return fn(v, ++i);","    });","  };","","  /**","   * Throws an exception. Asynchronous iteration over object-like sequences is","   * not supported.","   *","   * @public","   * @examples","   * Lazy({ foo: 'bar' }).async() // throws","   */","  ObjectLikeSequence.prototype.async = function async() {","    throw new Error('An ObjectLikeSequence does not support asynchronous iteration.');","  };","","  ObjectLikeSequence.prototype.filter = function filter(filterFn) {","    return new FilteredObjectLikeSequence(this, createCallback(filterFn));","  };","","  function FilteredObjectLikeSequence(parent, filterFn) {","    this.parent = parent;","    this.filterFn = filterFn;","  }","","  FilteredObjectLikeSequence.prototype = new ObjectLikeSequence();","","  FilteredObjectLikeSequence.prototype.each = function each(fn) {","    var filterFn = this.filterFn;","","    return this.parent.each(function(v, k) {","      if (filterFn(v, k)) {","        return fn(v, k);","      }","    });","  };","","  /**","   * Returns this same sequence. (Reversing an object-like sequence doesn't make","   * any sense.)","   */","  ObjectLikeSequence.prototype.reverse = function reverse() {","    return this;","  };","","  /**","   * Returns an {@link ObjectLikeSequence} whose elements are the combination of","   * this sequence and another object. In the case of a key appearing in both this","   * sequence and the given object, the other object's value will override the","   * one in this sequence.","   *","   * @public","   * @aka extend","   * @param {Object} other The other object to assign to this sequence.","   * @returns {ObjectLikeSequence} A new sequence comprising elements from this","   *     sequence plus the contents of `other`.","   *","   * @examples","   * Lazy({ \"uno\": 1, \"dos\": 2 }).assign({ \"tres\": 3 })     // sequence: { uno: 1, dos: 2, tres: 3 }","   * Lazy({ foo: \"bar\" }).assign({ foo: \"baz\" });           // sequence: { foo: \"baz\" }","   * Lazy({ foo: 'foo' }).assign({ foo: false }).get('foo') // false","   */","  ObjectLikeSequence.prototype.assign = function assign(other) {","    return new AssignSequence(this, other);","  };","","  ObjectLikeSequence.prototype.extend = function extend(other) {","    return this.assign(other);","  };","","  /**","   * @constructor","   */","  function AssignSequence(parent, other) {","    this.parent = parent;","    this.other  = other;","  }","","  AssignSequence.prototype = new ObjectLikeSequence();","","  AssignSequence.prototype.get = function get(key) {","    return key in this.other ? this.other[key] : this.parent.get(key);","  };","","  AssignSequence.prototype.each = function each(fn) {","    var merged = new Set(),","        done   = false;","","    Lazy(this.other).each(function(value, key) {","      if (fn(value, key) === false) {","        done = true;","        return false;","      }","","      merged.add(key);","    });","","    if (!done) {","      return this.parent.each(function(value, key) {","        if (!merged.contains(key) && fn(value, key) === false) {","          return false;","        }","      });","    }","  };","","  /**","   * Returns an {@link ObjectLikeSequence} whose elements are the combination of","   * this sequence and a 'default' object. In the case of a key appearing in both","   * this sequence and the given object, this sequence's value will override the","   * default object's.","   *","   * @public","   * @param {Object} defaults The 'default' object to use for missing keys in this","   *     sequence.","   * @returns {ObjectLikeSequence} A new sequence comprising elements from this","   *     sequence supplemented by the contents of `defaults`.","   *","   * @examples","   * Lazy({ name: \"Dan\" }).defaults({ name: \"User\", password: \"passw0rd\" }) // sequence: { name: \"Dan\", password: \"passw0rd\" }","   * Lazy({ foo: false }).defaults({ foo: 'foo' }).get('foo') // false","   * Lazy({ a: 1 }).defaults({ b: 2 }).defaults({ c: 3 }) // sequence: { a: 1, b: 2, c: 3 }","   * Lazy({ a: 1 }).defaults({ b: 2 }).defaults({ a: 3 }) // sequence: { a: 1, b: 2 }","   * Lazy({ a: 1, b: 2 }).defaults({ b: 5 }).defaults({ c: 3, d: 4 }) // sequence: { a: 1, b: 2, c: 3, d: 4 }","   */","  ObjectLikeSequence.prototype.defaults = function defaults(defaults) {","    return new DefaultsSequence(this, defaults);","  };","","  /**","   * @constructor","   */","  function DefaultsSequence(parent, defaults) {","    this.parent        = parent;","    this.defaultValues = defaults;","  }","","  DefaultsSequence.prototype = new ObjectLikeSequence();","","  DefaultsSequence.prototype.get = function get(key) {","    var parentValue = this.parent.get(key);","    return parentValue !== undefined ? parentValue : this.defaultValues[key];","  };","","  DefaultsSequence.prototype.each = function each(fn) {","    var merged = new Set(),","        done   = false;","","    this.parent.each(function(value, key) {","      if (fn(value, key) === false) {","        done = true;","        return false;","      }","","      if (typeof value !== \"undefined\") {","        merged.add(key);","      }","    });","","    if (!done) {","      Lazy(this.defaultValues).each(function(value, key) {","        if (!merged.contains(key) && fn(value, key) === false) {","          return false;","        }","      });","    }","  };","","  /**","   * Returns an {@link ObjectLikeSequence} whose values are this sequence's keys,","   * and whose keys are this sequence's values.","   *","   * @public","   * @returns {ObjectLikeSequence} A new sequence comprising the inverted keys and","   *     values from this sequence.","   *","   * @examples","   * Lazy({ first: \"Dan\", last: \"Tao\" }).invert() // sequence: { Dan: \"first\", Tao: \"last\" }","   */","  ObjectLikeSequence.prototype.invert = function invert() {","    return new InvertedSequence(this);","  };","","  /**","   * @constructor","   */","  function InvertedSequence(parent) {","    this.parent = parent;","  }","","  InvertedSequence.prototype = new ObjectLikeSequence();","","  InvertedSequence.prototype.each = function each(fn) {","    this.parent.each(function(value, key) {","      return fn(key, value);","    });","  };","","  /**","   * Produces an {@link ObjectLikeSequence} consisting of all the recursively","   * merged values from this and the given object(s) or sequence(s).","   *","   * Note that by default this method only merges \"vanilla\" objects (bags of","   * key/value pairs), not arrays or any other custom object types. To customize","   * how merging works, you can provide the mergeFn argument, e.g. to handling","   * merging arrays, strings, or other types of objects.","   *","   * @public","   * @param {...Object|ObjectLikeSequence} others The other object(s) or","   *     sequence(s) whose values will be merged into this one.","   * @param {Function=} mergeFn An optional function used to customize merging","   *     behavior. The function should take two values as parameters and return","   *     whatever the \"merged\" form of those values is. If the function returns","   *     undefined then the new value will simply replace the old one in the","   *     final result.","   * @returns {ObjectLikeSequence} The new sequence consisting of merged values.","   *","   * @examples","   * // These examples are completely stolen from Lo-Dash's documentation:","   * // lodash.com/docs#merge","   *","   * var names = {","   *   'characters': [","   *     { 'name': 'barney' },","   *     { 'name': 'fred' }","   *   ]","   * };","   *","   * var ages = {","   *   'characters': [","   *     { 'age': 36 },","   *     { 'age': 40 }","   *   ]","   * };","   *","   * var food = {","   *   'fruits': ['apple'],","   *   'vegetables': ['beet']","   * };","   *","   * var otherFood = {","   *   'fruits': ['banana'],","   *   'vegetables': ['carrot']","   * };","   *","   * function mergeArrays(a, b) {","   *   return Array.isArray(a) ? a.concat(b) : undefined;","   * }","   *","   * Lazy(names).merge(ages); // => sequence: { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }","   * Lazy(food).merge(otherFood, mergeArrays); // => sequence: { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }","   *","   * // ----- Now for my own tests: -----","   *","   * // merges objects","   * Lazy({ foo: 1 }).merge({ foo: 2 }); // => sequence: { foo: 2 }","   * Lazy({ foo: 1 }).merge({ bar: 2 }); // => sequence: { foo: 1, bar: 2 }","   *","   * // goes deep","   * Lazy({ foo: { bar: 1 } }).merge({ foo: { bar: 2 } }); // => sequence: { foo: { bar: 2 } }","   * Lazy({ foo: { bar: 1 } }).merge({ foo: { baz: 2 } }); // => sequence: { foo: { bar: 1, baz: 2 } }","   * Lazy({ foo: { bar: 1 } }).merge({ foo: { baz: 2 } }); // => sequence: { foo: { bar: 1, baz: 2 } }","   *","   * // gives precedence to later sources","   * Lazy({ foo: 1 }).merge({ bar: 2 }, { bar: 3 }); // => sequence: { foo: 1, bar: 3 }","   *","   * // undefined gets passed over","   * Lazy({ foo: 1 }).merge({ foo: undefined }); // => sequence: { foo: 1 }","   *","   * // null doesn't get passed over","   * Lazy({ foo: 1 }).merge({ foo: null }); // => sequence: { foo: null }","   *","   * // array contents get merged as well","   * Lazy({ foo: [{ bar: 1 }] }).merge({ foo: [{ baz: 2 }] }); // => sequence: { foo: [{ bar: 1, baz: 2}] }","   */","  ObjectLikeSequence.prototype.merge = function merge(var_args) {","    var mergeFn = arguments.length > 1 && typeof arguments[arguments.length - 1] === \"function\" ?","      arrayPop.call(arguments) : null;","    return new MergedSequence(this, arraySlice.call(arguments, 0), mergeFn);","  };","","  /**","   * @constructor","   */","  function MergedSequence(parent, others, mergeFn) {","    this.parent  = parent;","    this.others  = others;","    this.mergeFn = mergeFn;","  }","","  MergedSequence.prototype = new ObjectLikeSequence();","","  MergedSequence.prototype.each = function each(fn) {","    var others  = this.others,","        mergeFn = this.mergeFn || mergeObjects,","        keys    = {};","","    var iteratedFullSource = this.parent.each(function(value, key) {","      var merged = value;","","      forEach(others, function(other) {","        if (key in other) {","          merged = mergeFn(merged, other[key]);","        }","      });","","      keys[key] = true;","","      return fn(merged, key);","    });","","    if (iteratedFullSource === false) {","      return false;","    }","","    var remaining = {};","","    forEach(others, function(other) {","      for (var k in other) {","        if (!keys[k]) {","          remaining[k] = mergeFn(remaining[k], other[k]);","        }","      }","    });","","    return Lazy(remaining).each(fn);","  };","","  /**","   * @private","   * @examples","   * mergeObjects({ foo: 1 }, { bar: 2 }); // => { foo: 1, bar: 2 }","   * mergeObjects({ foo: { bar: 1 } }, { foo: { baz: 2 } }); // => { foo: { bar: 1, baz: 2 } }","   * mergeObjects({ foo: { bar: 1 } }, { foo: undefined }); // => { foo: { bar: 1 } }","   * mergeObjects({ foo: { bar: 1 } }, { foo: null }); // => { foo: null }","   * mergeObjects({ array: [0, 1, 2] }, { array: [3, 4, 5] }).array; // instanceof Array","   * mergeObjects({ date: new Date() }, { date: new Date() }).date; // instanceof Date","   * mergeObjects([{ foo: 1 }], [{ bar: 2 }]); // => [{ foo: 1, bar: 2 }]","   */","  function mergeObjects(a, b) {","    var merged, prop;","","    if (typeof b === 'undefined') {","      return a;","    }","","    // Check that we're dealing with two objects or two arrays.","    if (isVanillaObject(a) && isVanillaObject(b)) {","      merged = {};","    } else if (isArray(a) && isArray(b)) {","      merged = [];","    } else {","      // Otherwise there's no merging to do -- just replace a w/ b.","      return b;","    }","","    for (prop in a) {","      merged[prop] = mergeObjects(a[prop], b[prop]);","    }","    for (prop in b) {","      if (!merged[prop]) {","        merged[prop] = b[prop];","      }","    }","    return merged;","  }","","  /**","   * Checks whether an object is a \"vanilla\" object, i.e. {'foo': 'bar'} as","   * opposed to an array, date, etc.","   *","   * @private","   * @examples","   * isVanillaObject({foo: 'bar'}); // => true","   * isVanillaObject(new Date());   // => false","   * isVanillaObject([1, 2, 3]);    // => false","   */","  function isVanillaObject(object) {","    return object && object.constructor === Object;","  }","","  /**","   * Creates a {@link Sequence} consisting of the keys from this sequence whose","   *     values are functions.","   *","   * @public","   * @aka methods","   * @returns {Sequence} The new sequence.","   *","   * @examples","   * var dog = {","   *   name: \"Fido\",","   *   breed: \"Golden Retriever\",","   *   bark: function() { console.log(\"Woof!\"); },","   *   wagTail: function() { console.log(\"TODO: implement robotic dog interface\"); }","   * };","   *","   * Lazy(dog).functions() // sequence: [\"bark\", \"wagTail\"]","   */","  ObjectLikeSequence.prototype.functions = function functions() {","    return this","      .filter(function(v, k) { return typeof(v) === \"function\"; })","      .map(function(v, k) { return k; });","  };","","  ObjectLikeSequence.prototype.methods = function methods() {","    return this.functions();","  };","","  /**","   * Creates an {@link ObjectLikeSequence} consisting of the key/value pairs from","   * this sequence whose keys are included in the given array of property names.","   *","   * @public","   * @param {Array} properties An array of the properties to \"pick\" from this","   *     sequence.","   * @returns {ObjectLikeSequence} The new sequence.","   *","   * @examples","   * var players = {","   *   \"who\": \"first\",","   *   \"what\": \"second\",","   *   \"i don't know\": \"third\"","   * };","   *","   * Lazy(players).pick([\"who\", \"what\"]) // sequence: { who: \"first\", what: \"second\" }","   */","  ObjectLikeSequence.prototype.pick = function pick(properties) {","    return new PickSequence(this, properties);","  };","","  /**","   * @constructor","   */","  function PickSequence(parent, properties) {","    this.parent     = parent;","    this.properties = properties;","  }","","  PickSequence.prototype = new ObjectLikeSequence();","","  PickSequence.prototype.get = function get(key) {","    return arrayContains(this.properties, key) ? this.parent.get(key) : undefined;","  };","","  PickSequence.prototype.each = function each(fn) {","    var inArray    = arrayContains,","        properties = this.properties;","","    return this.parent.each(function(value, key) {","      if (inArray(properties, key)) {","        return fn(value, key);","      }","    });","  };","","  /**","   * Creates an {@link ObjectLikeSequence} consisting of the key/value pairs from","   * this sequence excluding those with the specified keys. Non-string keys are","   * effectively ignored.","   *","   * @public","   * @param {Array} properties An array of the properties to *omit* from this","   *     sequence.","   * @returns {ObjectLikeSequence} The new sequence.","   *","   * @examples","   * var players = {","   *   \"who\": \"first\",","   *   \"what\": \"second\",","   *   \"i don't know\": \"third\"","   * };","   *","   * Lazy(players).omit([\"who\", \"what\"]) // sequence: { \"i don't know\": \"third\" }","   *","   * // Example to show handling of non-string keys","   * Lazy({1: 2, true: false}).omit([1, true]) // sequence: { \"1\": 2, \"true\": false }","   */","  ObjectLikeSequence.prototype.omit = function omit(properties) {","    return new OmitSequence(this, properties);","  };","","  /**","   * @constructor","   */","  function OmitSequence(parent, properties) {","    this.parent     = parent;","    this.properties = properties;","  }","","  OmitSequence.prototype = new ObjectLikeSequence();","","  OmitSequence.prototype.get = function get(key) {","    return arrayContains(this.properties, key) ? undefined : this.parent.get(key);","  };","","  OmitSequence.prototype.each = function each(fn) {","    var inArray    = arrayContains,","        properties = this.properties;","","    return this.parent.each(function(value, key) {","      if (!inArray(properties, key)) {","        return fn(value, key);","      }","    });","  };","","  /**","   * Maps the key/value pairs in this sequence to arrays.","   *","   * @public","   * @aka toArray","   * @returns {Sequence} An sequence of `[key, value]` pairs.","   *","   * @examples","   * var colorCodes = {","   *   red: \"#f00\",","   *   green: \"#0f0\",","   *   blue: \"#00f\"","   * };","   *","   * Lazy(colorCodes).pairs() // sequence: [[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]]","   */","  ObjectLikeSequence.prototype.pairs = function pairs() {","    return this.map(function(v, k) { return [k, v]; });","  };","","  /**","   * Creates an array from the key/value pairs in this sequence.","   *","   * @public","   * @returns {Array} An array of `[key, value]` elements.","   *","   * @examples","   * var colorCodes = {","   *   red: \"#f00\",","   *   green: \"#0f0\",","   *   blue: \"#00f\"","   * };","   *","   * Lazy(colorCodes).toArray() // => [[\"red\", \"#f00\"], [\"green\", \"#0f0\"], [\"blue\", \"#00f\"]]","   */","  ObjectLikeSequence.prototype.toArray = function toArray() {","    return this.pairs().toArray();","  };","","  /**","   * Creates an object with the key/value pairs from this sequence.","   *","   * @public","   * @returns {Object} An object with the same key/value pairs as this sequence.","   *","   * @examples","   * var colorCodes = {","   *   red: \"#f00\",","   *   green: \"#0f0\",","   *   blue: \"#00f\"","   * };","   *","   * Lazy(colorCodes).toObject() // => { red: \"#f00\", green: \"#0f0\", blue: \"#00f\" }","   */","  ObjectLikeSequence.prototype.toObject = function toObject() {","    return this.reduce(function(object, value, key) {","      object[key] = value;","      return object;","    }, {});","  };","","  // Now that we've fully initialized the ObjectLikeSequence prototype, we can","  // actually set the prototypes for GroupedSequence, IndexedSequence, and","  // CountedSequence.","","  GroupedSequence.prototype = new ObjectLikeSequence();","","  /**","   * @examples","   * var objects = [{a: 'x'}, {a: 'x'}];","   *","   * Lazy(objects).groupBy('a') // sequence: {x: [{a: 'x'}, {a: 'x'}]}","   * Lazy(objects).groupBy('a').each(Lazy.noop) // true","   */","  GroupedSequence.prototype.each = function each(fn) {","    var keyFn   = createCallback(this.keyFn),","        valFn   = createCallback(this.valFn),","        result;","","    result = this.parent.reduce(function(grouped,e) {","      var key = keyFn(e),","          val = valFn(e);","      if (!isArray(grouped[key])) {","        grouped[key] = [val];","      } else {","        grouped[key].push(val);","      }","      return grouped;","    },{});","","    return transform(function(grouped) {","      for (var key in grouped) {","        if (fn(grouped[key], key) === false) {","          return false;","        }","      }","      return true;","    }, result);","  };","","  IndexedSequence.prototype = new ObjectLikeSequence();","","  IndexedSequence.prototype.each = function each(fn) {","    var keyFn   = createCallback(this.keyFn),","        valFn   = createCallback(this.valFn),","        indexed = {};","","    return this.parent.each(function(e) {","      var key = keyFn(e),","          val = valFn(e);","","      if (!indexed[key]) {","        indexed[key] = val;","        return fn(val, key);","      }","    });","  };","","  CountedSequence.prototype = new ObjectLikeSequence();","","  CountedSequence.prototype.each = function each(fn) {","    var keyFn   = createCallback(this.keyFn),","        counted = {};","","    this.parent.each(function(e) {","      var key = keyFn(e);","      if (!counted[key]) {","        counted[key] = 1;","      } else {","        counted[key] += 1;","      }","    });","","    for (var key in counted) {","      if (fn(counted[key], key) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * Watches for all changes to a specified property (or properties) of an","   * object and produces a sequence whose elements have the properties","   * `{ property, value }` indicating which property changed and what it was","   * changed to.","   *","   * Note that this method **only works on directly wrapped objects**; it will","   * *not* work on any arbitrary {@link ObjectLikeSequence}.","   *","   * @public","   * @param {(string|Array)=} propertyNames A property name or array of property","   *     names to watch. If this parameter is `undefined`, all of the object's","   *     current (enumerable) properties will be watched.","   * @returns {Sequence} A sequence comprising `{ property, value }` objects","   *     describing each change to the specified property/properties.","   *","   * @examples","   * var obj = {},","   *     changes = [];","   *","   * Lazy(obj).watch('foo').each(function(change) {","   *   changes.push(change);","   * });","   *","   * obj.foo = 1;","   * obj.bar = 2;","   * obj.foo = 3;","   *","   * obj.foo; // => 3","   * changes; // => [{ property: 'foo', value: 1 }, { property: 'foo', value: 3 }]","   */","  ObjectLikeSequence.prototype.watch = function watch(propertyNames) {","    throw new Error('You can only call #watch on a directly wrapped object.');","  };","","  /**","   * @constructor","   */","  function ObjectWrapper(source) {","    this.source = source;","  }","","  ObjectWrapper.prototype = new ObjectLikeSequence();","","  ObjectWrapper.prototype.root = function root() {","    return this;","  };","","  ObjectWrapper.prototype.isAsync = function isAsync() {","    return false;","  };","","  ObjectWrapper.prototype.get = function get(key) {","    return this.source[key];","  };","","  ObjectWrapper.prototype.each = function each(fn) {","    var source = this.source,","        keys = source ? Object.keys(source) : [],","        length = keys.length,","        key,","        index;","","    for (index = 0; index < length; ++index) {","      key = keys[index];","","      if (fn(source[key], key) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * A `StringLikeSequence` represents a sequence of characters.","   *","   * The initial sequence you get by wrapping a string with `Lazy(string)` is a","   * `StringLikeSequence`.","   *","   * All methods of `StringLikeSequence` that conceptually should return","   * something like a string return another `StringLikeSequence`.","   *","   * @public","   * @constructor","   *","   * @examples","   * function upcase(str) { return str.toUpperCase(); }","   *","   * Lazy('foo')               // instanceof Lazy.StringLikeSequence","   * Lazy('foo').toUpperCase() // instanceof Lazy.StringLikeSequence","   * Lazy('foo').reverse()     // instanceof Lazy.StringLikeSequence","   * Lazy('foo').take(2)       // instanceof Lazy.StringLikeSequence","   * Lazy('foo').drop(1)       // instanceof Lazy.StringLikeSequence","   * Lazy('foo').substring(1)  // instanceof Lazy.StringLikeSequence","   *","   * // Note that `map` does not create a `StringLikeSequence` because there's","   * // no guarantee the mapping function will return characters. In the event","   * // you do want to map a string onto a string-like sequence, use","   * // `mapString`:","   * Lazy('foo').map(Lazy.identity)       // instanceof Lazy.ArrayLikeSequence","   * Lazy('foo').mapString(Lazy.identity) // instanceof Lazy.StringLikeSequence","   */","  function StringLikeSequence() {}","","  StringLikeSequence.prototype = new ArrayLikeSequence();","","  /**","   * Create a new constructor function for a type inheriting from","   * `StringLikeSequence`.","   *","   * @public","   * @param {string|Array.<string>} methodName The name(s) of the method(s) to be","   *     used for constructing the new sequence. The method will be attached to","   *     the `StringLikeSequence` prototype so that it can be chained with any other","   *     methods that return string-like sequences.","   * @param {Object} overrides An object containing function overrides for this","   *     new sequence type. Has the same requirements as","   *     {@link ArrayLikeSequence.define}.","   * @returns {Function} A constructor for a new type inheriting from","   *     `StringLikeSequence`.","   *","   * @examples","   * Lazy.StringLikeSequence.define(\"zomg\", {","   *   length: function() {","   *     return this.parent.length() + \"!!ZOMG!!!1\".length;","   *   },","   *","   *   get: function(i) {","   *     if (i < this.parent.length()) {","   *       return this.parent.get(i);","   *     }","   *     return \"!!ZOMG!!!1\".charAt(i - this.parent.length());","   *   }","   * });","   *","   * Lazy('foo').zomg() // sequence: \"foo!!ZOMG!!!1\"","   */","  StringLikeSequence.define = function define(methodName, overrides) {","    if (!overrides || typeof overrides.get !== 'function') {","      throw new Error(\"A custom string-like sequence must implement *at least* get!\");","    }","","    return defineSequenceType(StringLikeSequence, methodName, overrides);","  };","","  StringLikeSequence.prototype.value = function value() {","    return this.toString();","  };","","  /**","   * Returns an {@link IndexedIterator} that will step over each character in this","   * sequence one by one.","   *","   * @returns {IndexedIterator} The iterator.","   */","  StringLikeSequence.prototype.getIterator = function getIterator() {","    return new CharIterator(this);","  };","","  /**","   * @constructor","   */","  function CharIterator(source) {","    this.source = Lazy(source);","    this.index = -1;","  }","","  CharIterator.prototype.current = function current() {","    return this.source.charAt(this.index);","  };","","  CharIterator.prototype.moveNext = function moveNext() {","    return (++this.index < this.source.length());","  };","","  /**","   * Returns the character at the given index of this sequence, or the empty","   * string if the specified index lies outside the bounds of the sequence.","   *","   * @public","   * @param {number} i The index of this sequence.","   * @returns {string} The character at the specified index.","   *","   * @examples","   * Lazy(\"foo\").charAt(0)  // => \"f\"","   * Lazy(\"foo\").charAt(-1) // => \"\"","   * Lazy(\"foo\").charAt(10) // => \"\"","   */","  StringLikeSequence.prototype.charAt = function charAt(i) {","    return this.get(i);","  };","","  /**","   * Returns the character code at the given index of this sequence, or `NaN` if","   * the index lies outside the bounds of the sequence.","   *","   * @public","   * @param {number} i The index of the character whose character code you want.","   * @returns {number} The character code.","   *","   * @examples","   * Lazy(\"abc\").charCodeAt(0)  // => 97","   * Lazy(\"abc\").charCodeAt(-1) // => NaN","   * Lazy(\"abc\").charCodeAt(10) // => NaN","   */","  StringLikeSequence.prototype.charCodeAt = function charCodeAt(i) {","    var char = this.charAt(i);","    if (!char) { return NaN; }","","    return char.charCodeAt(0);","  };","","  /**","   * Returns a {@link StringLikeSequence} comprising the characters from *this*","   * sequence starting at `start` and ending at `stop` (exclusive), or---if","   * `stop` is `undefined`, including the rest of the sequence.","   *","   * @public","   * @param {number} start The index where this sequence should begin.","   * @param {number=} stop The index (exclusive) where this sequence should end.","   * @returns {StringLikeSequence} The new sequence.","   *","   * @examples","   * Lazy(\"foo\").substring(1)      // sequence: \"oo\"","   * Lazy(\"foo\").substring(-1)     // sequence: \"foo\"","   * Lazy(\"hello\").substring(1, 3) // sequence: \"el\"","   * Lazy(\"hello\").substring(1, 9) // sequence: \"ello\"","   * Lazy(\"foo\").substring(0, 0)   // sequence: \"\"","   * Lazy(\"foo\").substring(3, 3)   // sequence: \"\"","   */","  StringLikeSequence.prototype.substring = function substring(start, stop) {","    return new StringSegment(this, start, stop);","  };","","  /**","   * @constructor","   */","  function StringSegment(parent, start, stop) {","    this.parent = parent;","    this.start  = Math.max(0, start);","    this.stop   = stop;","  }","","  StringSegment.prototype = new StringLikeSequence();","","  StringSegment.prototype.get = function get(i) {","    return this.parent.get(i + this.start);","  };","","  StringSegment.prototype.length = function length() {","    return (typeof this.stop === \"number\" ? this.stop : this.parent.length()) - this.start;","  };","","  /**","   * An optimized version of {@link Sequence#first} that returns another","   * {@link StringLikeSequence} (or just the first character, if `count` is","   * undefined).","   *","   * @public","   * @examples","   * Lazy('foo').first()                // => 'f'","   * Lazy('fo').first(2)                // sequence: 'fo'","   * Lazy('foo').first(10)              // sequence: 'foo'","   * Lazy('foo').toUpperCase().first()  // => 'F'","   * Lazy('foo').toUpperCase().first(2) // sequence: 'FO'","   */","  StringLikeSequence.prototype.first = function first(count) {","    if (typeof count === \"undefined\") {","      return this.charAt(0);","    }","","    return this.substring(0, count);","  };","","  /**","   * An optimized version of {@link Sequence#last} that returns another","   * {@link StringLikeSequence} (or just the last character, if `count` is","   * undefined).","   *","   * @public","   * @examples","   * Lazy('foo').last()                // => 'o'","   * Lazy('foo').last(2)               // sequence: 'oo'","   * Lazy('foo').last(10)              // sequence: 'foo'","   * Lazy('foo').toUpperCase().last()  // => 'O'","   * Lazy('foo').toUpperCase().last(2) // sequence: 'OO'","   */","  StringLikeSequence.prototype.last = function last(count) {","    if (typeof count === \"undefined\") {","      return this.charAt(this.length() - 1);","    }","","    return this.substring(this.length() - count);","  };","","  StringLikeSequence.prototype.drop = function drop(count) {","    return this.substring(count);","  };","","  /**","   * Finds the index of the first occurrence of the given substring within this","   * sequence, starting from the specified index (or the beginning of the","   * sequence).","   *","   * @public","   * @param {string} substring The substring to search for.","   * @param {number=} startIndex The index from which to start the search.","   * @returns {number} The first index where the given substring is found, or","   *     -1 if it isn't in the sequence.","   *","   * @examples","   * Lazy('canal').indexOf('a')    // => 1","   * Lazy('canal').indexOf('a', 2) // => 3","   * Lazy('canal').indexOf('ana')  // => 1","   * Lazy('canal').indexOf('andy') // => -1","   * Lazy('canal').indexOf('x')    // => -1","   */","  StringLikeSequence.prototype.indexOf = function indexOf(substring, startIndex) {","    return this.toString().indexOf(substring, startIndex);","  };","","  /**","   * Finds the index of the last occurrence of the given substring within this","   * sequence, starting from the specified index (or the end of the sequence)","   * and working backwards.","   *","   * @public","   * @param {string} substring The substring to search for.","   * @param {number=} startIndex The index from which to start the search.","   * @returns {number} The last index where the given substring is found, or","   *     -1 if it isn't in the sequence.","   *","   * @examples","   * Lazy('canal').lastIndexOf('a')    // => 3","   * Lazy('canal').lastIndexOf('a', 2) // => 1","   * Lazy('canal').lastIndexOf('ana')  // => 1","   * Lazy('canal').lastIndexOf('andy') // => -1","   * Lazy('canal').lastIndexOf('x')    // => -1","   */","  StringLikeSequence.prototype.lastIndexOf = function lastIndexOf(substring, startIndex) {","    return this.toString().lastIndexOf(substring, startIndex);","  };","","  /**","   * Checks if this sequence contains a given substring.","   *","   * @public","   * @param {string} substring The substring to check for.","   * @returns {boolean} Whether or not this sequence contains `substring`.","   *","   * @examples","   * Lazy('hello').contains('ell') // => true","   * Lazy('hello').contains('')    // => true","   * Lazy('hello').contains('abc') // => false","   */","  StringLikeSequence.prototype.contains = function contains(substring) {","    return this.indexOf(substring) !== -1;","  };","","  /**","   * Checks if this sequence ends with a given suffix.","   *","   * @public","   * @param {string} suffix The suffix to check for.","   * @returns {boolean} Whether or not this sequence ends with `suffix`.","   *","   * @examples","   * Lazy('foo').endsWith('oo')  // => true","   * Lazy('foo').endsWith('')    // => true","   * Lazy('foo').endsWith('abc') // => false","   */","  StringLikeSequence.prototype.endsWith = function endsWith(suffix) {","    return this.substring(this.length() - suffix.length).toString() === suffix;","  };","","  /**","   * Checks if this sequence starts with a given prefix.","   *","   * @public","   * @param {string} prefix The prefix to check for.","   * @returns {boolean} Whether or not this sequence starts with `prefix`.","   *","   * @examples","   * Lazy('foo').startsWith('fo')  // => true","   * Lazy('foo').startsWith('')    // => true","   * Lazy('foo').startsWith('abc') // => false","   */","  StringLikeSequence.prototype.startsWith = function startsWith(prefix) {","    return this.substring(0, prefix.length).toString() === prefix;","  };","","  /**","   * Converts all of the characters in this string to uppercase.","   *","   * @public","   * @returns {StringLikeSequence} A new sequence with the same characters as","   *     this sequence, all uppercase.","   *","   * @examples","   * function nextLetter(a) {","   *   return String.fromCharCode(a.charCodeAt(0) + 1);","   * }","   *","   * Lazy('foo').toUpperCase()                       // sequence: 'FOO'","   * Lazy('foo').substring(1).toUpperCase()          // sequence: 'OO'","   * Lazy('abc').mapString(nextLetter).toUpperCase() // sequence: 'BCD'","   */","  StringLikeSequence.prototype.toUpperCase = function toUpperCase() {","    return this.mapString(function(char) { return char.toUpperCase(); });","  };","","  /**","   * Converts all of the characters in this string to lowercase.","   *","   * @public","   * @returns {StringLikeSequence} A new sequence with the same characters as","   *     this sequence, all lowercase.","   *","   * @examples","   * function nextLetter(a) {","   *   return String.fromCharCode(a.charCodeAt(0) + 1);","   * }","   *","   * Lazy('FOO').toLowerCase()                       // sequence: 'foo'","   * Lazy('FOO').substring(1).toLowerCase()          // sequence: 'oo'","   * Lazy('ABC').mapString(nextLetter).toLowerCase() // sequence: 'bcd'","   */","  StringLikeSequence.prototype.toLowerCase = function toLowerCase() {","    return this.mapString(function(char) { return char.toLowerCase(); });","  };","","  /**","   * Maps the characters of this sequence onto a new {@link StringLikeSequence}.","   *","   * @public","   * @param {Function} mapFn The function used to map characters from this","   *     sequence onto the new sequence.","   * @returns {StringLikeSequence} The new sequence.","   *","   * @examples","   * function upcase(char) { return char.toUpperCase(); }","   *","   * Lazy(\"foo\").mapString(upcase)               // sequence: \"FOO\"","   * Lazy(\"foo\").mapString(upcase).charAt(0)     // => \"F\"","   * Lazy(\"foo\").mapString(upcase).charCodeAt(0) // => 70","   * Lazy(\"foo\").mapString(upcase).substring(1)  // sequence: \"OO\"","   */","  StringLikeSequence.prototype.mapString = function mapString(mapFn) {","    return new MappedStringLikeSequence(this, mapFn);","  };","","  /**","   * @constructor","   */","  function MappedStringLikeSequence(parent, mapFn) {","    this.parent = parent;","    this.mapFn  = mapFn;","  }","","  MappedStringLikeSequence.prototype = new StringLikeSequence();","  MappedStringLikeSequence.prototype.get = IndexedMappedSequence.prototype.get;","  MappedStringLikeSequence.prototype.length = IndexedMappedSequence.prototype.length;","","  /**","   * Returns a copy of this sequence that reads back to front.","   *","   * @public","   *","   * @examples","   * Lazy(\"abcdefg\").reverse() // sequence: \"gfedcba\"","   */","  StringLikeSequence.prototype.reverse = function reverse() {","    return new ReversedStringLikeSequence(this);","  };","","  /**","   * @constructor","   */","  function ReversedStringLikeSequence(parent) {","    this.parent = parent;","  }","","  ReversedStringLikeSequence.prototype = new StringLikeSequence();","  ReversedStringLikeSequence.prototype.get = IndexedReversedSequence.prototype.get;","  ReversedStringLikeSequence.prototype.length = IndexedReversedSequence.prototype.length;","","  StringLikeSequence.prototype.toString = function toString() {","    return this.join(\"\");","  };","","  /**","   * Creates a {@link Sequence} comprising all of the matches for the specified","   * pattern in the underlying string.","   *","   * @public","   * @param {RegExp} pattern The pattern to match.","   * @returns {Sequence} A sequence of all the matches.","   *","   * @examples","   * Lazy(\"abracadabra\").match(/a[bcd]/) // sequence: [\"ab\", \"ac\", \"ad\", \"ab\"]","   * Lazy(\"fee fi fo fum\").match(/\\w+/)  // sequence: [\"fee\", \"fi\", \"fo\", \"fum\"]","   * Lazy(\"hello\").match(/xyz/)          // sequence: []","   */","  StringLikeSequence.prototype.match = function match(pattern) {","    return new StringMatchSequence(this, pattern);","  };","","  /**","   * @constructor","   */","  function StringMatchSequence(parent, pattern) {","    this.parent = parent;","    this.pattern = pattern;","  }","","  StringMatchSequence.prototype = new Sequence();","","  StringMatchSequence.prototype.getIterator = function getIterator() {","    return new StringMatchIterator(this.parent.toString(), this.pattern);","  };","","  /**","   * @constructor","   */","  function StringMatchIterator(source, pattern) {","    this.source  = source;","    this.pattern = cloneRegex(pattern);","  }","","  StringMatchIterator.prototype.current = function current() {","    return this.match[0];","  };","","  StringMatchIterator.prototype.moveNext = function moveNext() {","    return !!(this.match = this.pattern.exec(this.source));","  };","","  /**","   * Creates a {@link Sequence} comprising all of the substrings of this string","   * separated by the given delimiter, which can be either a string or a regular","   * expression.","   *","   * @public","   * @param {string|RegExp} delimiter The delimiter to use for recognizing","   *     substrings.","   * @returns {Sequence} A sequence of all the substrings separated by the given","   *     delimiter.","   *","   * @examples","   * Lazy(\"foo\").split(\"\")                      // sequence: [\"f\", \"o\", \"o\"]","   * Lazy(\"yo dawg\").split(\" \")                 // sequence: [\"yo\", \"dawg\"]","   * Lazy(\"bah bah\\tblack  sheep\").split(/\\s+/) // sequence: [\"bah\", \"bah\", \"black\", \"sheep\"]","   */","  StringLikeSequence.prototype.split = function split(delimiter) {","    return new SplitStringSequence(this, delimiter);","  };","","  /**","   * @constructor","   */","  function SplitStringSequence(parent, pattern) {","    this.parent = parent;","    this.pattern = pattern;","  }","","  SplitStringSequence.prototype = new Sequence();","","  SplitStringSequence.prototype.getIterator = function getIterator() {","    var source = this.parent.toString();","","    if (this.pattern instanceof RegExp) {","      if (this.pattern.source === \"\" || this.pattern.source === \"(?:)\") {","        return new CharIterator(source);","      } else {","        return new SplitWithRegExpIterator(source, this.pattern);","      }","    } else if (this.pattern === \"\") {","      return new CharIterator(source);","    } else {","      return new SplitWithStringIterator(source, this.pattern);","    }","  };","","  /**","   * @constructor","   */","  function SplitWithRegExpIterator(source, pattern) {","    this.source  = source;","    this.pattern = cloneRegex(pattern);","  }","","  SplitWithRegExpIterator.prototype.current = function current() {","    return this.source.substring(this.start, this.end);","  };","","  SplitWithRegExpIterator.prototype.moveNext = function moveNext() {","    if (!this.pattern) {","      return false;","    }","","    var match = this.pattern.exec(this.source);","","    if (match) {","      this.start = this.nextStart ? this.nextStart : 0;","      this.end = match.index;","      this.nextStart = match.index + match[0].length;","      return true;","","    } else if (this.pattern) {","      this.start = this.nextStart;","      this.end = undefined;","      this.nextStart = undefined;","      this.pattern = undefined;","      return true;","    }","","    return false;","  };","","  /**","   * @constructor","   */","  function SplitWithStringIterator(source, delimiter) {","    this.source = source;","    this.delimiter = delimiter;","  }","","  SplitWithStringIterator.prototype.current = function current() {","    return this.source.substring(this.leftIndex, this.rightIndex);","  };","","  SplitWithStringIterator.prototype.moveNext = function moveNext() {","    if (!this.finished) {","      this.leftIndex = typeof this.leftIndex !== \"undefined\" ?","        this.rightIndex + this.delimiter.length :","        0;","      this.rightIndex = this.source.indexOf(this.delimiter, this.leftIndex);","    }","","    if (this.rightIndex === -1) {","      this.finished = true;","      this.rightIndex = undefined;","      return true;","    }","","    return !this.finished;","  };","","  /**","   * Wraps a string exposing {@link #match} and {@link #split} methods that return","   * {@link Sequence} objects instead of arrays, improving on the efficiency of","   * JavaScript's built-in `String#split` and `String.match` methods and","   * supporting asynchronous iteration.","   *","   * @param {string} source The string to wrap.","   * @constructor","   */","  function StringWrapper(source) {","    this.source = source;","  }","","  StringWrapper.prototype = new StringLikeSequence();","","  StringWrapper.prototype.root = function root() {","    return this;","  };","","  StringWrapper.prototype.isAsync = function isAsync() {","    return false;","  };","","  StringWrapper.prototype.get = function get(i) {","    return this.source.charAt(i);","  };","","  StringWrapper.prototype.length = function length() {","    return this.source.length;","  };","","  StringWrapper.prototype.toString = function toString() {","    return this.source;","  };","","  /**","   * A `GeneratedSequence` does not wrap an in-memory collection but rather","   * determines its elements on-the-fly during iteration according to a generator","   * function.","   *","   * You create a `GeneratedSequence` by calling {@link Lazy.generate}.","   *","   * @public","   * @constructor","   * @param {function(number):*} generatorFn A function which accepts an index","   *     and returns a value for the element at that position in the sequence.","   * @param {number=} length The length of the sequence. If this argument is","   *     omitted, the sequence will go on forever.","   */","  function GeneratedSequence(generatorFn, length) {","    this.get = generatorFn;","    this.fixedLength = length;","  }","","  GeneratedSequence.prototype = new Sequence();","","  GeneratedSequence.prototype.isAsync = function isAsync() {","    return false;","  };","","  /**","   * Returns the length of this sequence.","   *","   * @public","   * @returns {number} The length, or `undefined` if this is an indefinite","   *     sequence.","   */","  GeneratedSequence.prototype.length = function length() {","    return this.fixedLength;","  };","","  /**","   * Iterates over the sequence produced by invoking this sequence's generator","   * function up to its specified length, or, if length is `undefined`,","   * indefinitely (in which case the sequence will go on forever--you would need","   * to call, e.g., {@link Sequence#take} to limit iteration).","   *","   * @public","   * @param {Function} fn The function to call on each output from the generator","   *     function.","   */","  GeneratedSequence.prototype.each = function each(fn) {","    var generatorFn = this.get,","        length = this.fixedLength,","        i = 0;","","    while (typeof length === \"undefined\" || i < length) {","      if (fn(generatorFn(i), i++) === false) {","        return false;","      }","    }","","    return true;","  };","","  GeneratedSequence.prototype.getIterator = function getIterator() {","    return new GeneratedIterator(this);","  };","","  /**","   * Iterates over a generated sequence. (This allows generated sequences to be","   * iterated asynchronously.)","   *","   * @param {GeneratedSequence} sequence The generated sequence to iterate over.","   * @constructor","   */","  function GeneratedIterator(sequence) {","    this.sequence     = sequence;","    this.index        = 0;","    this.currentValue = null;","  }","","  GeneratedIterator.prototype.current = function current() {","    return this.currentValue;","  };","","  GeneratedIterator.prototype.moveNext = function moveNext() {","    var sequence = this.sequence;","","    if (typeof sequence.fixedLength === \"number\" && this.index >= sequence.fixedLength) {","      return false;","    }","","    this.currentValue = sequence.get(this.index++);","    return true;","  };","","  /**","   * An `AsyncSequence` iterates over its elements asynchronously when","   * {@link #each} is called.","   *","   * You get an `AsyncSequence` by calling {@link Sequence#async} on any","   * sequence. Note that some sequence types may not support asynchronous","   * iteration.","   *","   * Returning values","   * ----------------","   *","   * Because of its asynchronous nature, an `AsyncSequence` cannot be used in the","   * same way as other sequences for functions that return values directly (e.g.,","   * `reduce`, `max`, `any`, even `toArray`).","   *","   * Instead, these methods return an `AsyncHandle` whose `onComplete` method","   * accepts a callback that will be called with the final result once iteration","   * has finished.","   *","   * Defining custom asynchronous sequences","   * --------------------------------------","   *","   * There are plenty of ways to define an asynchronous sequence. Here's one.","   *","   * 1. First, implement an {@link Iterator}. This is an object whose prototype","   *    has the methods {@link Iterator#moveNext} (which returns a `boolean`) and","   *    {@link current} (which returns the current value).","   * 2. Next, create a simple wrapper that inherits from `AsyncSequence`, whose","   *    `getIterator` function returns an instance of the iterator type you just","   *    defined.","   *","   * The default implementation for {@link #each} on an `AsyncSequence` is to","   * create an iterator and then asynchronously call {@link Iterator#moveNext}","   * (using `setImmediate`, if available, otherwise `setTimeout`) until the iterator","   * can't move ahead any more.","   *","   * @public","   * @constructor","   * @param {Sequence} parent A {@link Sequence} to wrap, to expose asynchronous","   *     iteration.","   * @param {number=} interval How many milliseconds should elapse between each","   *     element when iterating over this sequence. If this argument is omitted,","   *     asynchronous iteration will be executed as fast as possible.","   */","  function AsyncSequence(parent, interval) {","    if (parent instanceof AsyncSequence) {","      throw new Error(\"Sequence is already asynchronous!\");","    }","","    this.parent         = parent;","    this.interval       = interval;","    this.onNextCallback = getOnNextCallback(interval);","    this.cancelCallback = getCancelCallback(interval);","  }","","  AsyncSequence.prototype = new Sequence();","","  AsyncSequence.prototype.isAsync = function isAsync() {","    return true;","  };","","  /**","   * Throws an exception. You cannot manually iterate over an asynchronous","   * sequence.","   *","   * @public","   * @example","   * Lazy([1, 2, 3]).async().getIterator() // throws","   */","  AsyncSequence.prototype.getIterator = function getIterator() {","    throw new Error('An AsyncSequence does not support synchronous iteration.');","  };","","  /**","   * An asynchronous version of {@link Sequence#each}.","   *","   * @public","   * @param {Function} fn The function to invoke asynchronously on each element in","   *     the sequence one by one.","   * @returns {AsyncHandle} An {@link AsyncHandle} providing the ability to","   *     cancel the asynchronous iteration (by calling `cancel()`) as well as","   *     supply callback(s) for when an error is encountered (`onError`) or when","   *     iteration is complete (`onComplete`).","   */","  AsyncSequence.prototype.each = function each(fn) {","    var iterator = this.parent.getIterator(),","        onNextCallback = this.onNextCallback,","        cancelCallback = this.cancelCallback,","        i = 0;","","    var handle = new AsyncHandle(function cancel() {","      if (cancellationId) {","        cancelCallback(cancellationId);","      }","    });","","    var cancellationId = onNextCallback(function iterate() {","      cancellationId = null;","","      try {","        if (iterator.moveNext() && fn(iterator.current(), i++) !== false) {","          cancellationId = onNextCallback(iterate);","","        } else {","          handle._resolve();","        }","","      } catch (e) {","        handle._reject(e);","      }","    });","","    return handle;","  };","","  /**","   * An `AsyncHandle` provides a [Promises/A+](http://promises-aplus.github.io/promises-spec/)","   * compliant interface for an {@link AsyncSequence} that is currently (or was)","   * iterating over its elements.","   *","   * In addition to behaving as a promise, an `AsyncHandle` provides the ability","   * to {@link AsyncHandle#cancel} iteration (if `cancelFn` is provided)","   * and also offers convenient {@link AsyncHandle#onComplete} and","   * {@link AsyncHandle#onError} methods to attach listeners for when iteration","   * is complete or an error is thrown during iteration.","   *","   * @public","   * @param {Function} cancelFn A function to cancel asynchronous iteration.","   *     This is passed in to support different cancellation mechanisms for","   *     different forms of asynchronous sequences (e.g., timeout-based","   *     sequences, sequences based on I/O, etc.).","   * @constructor","   *","   * @example","   * // Create a sequence of 100,000 random numbers, in chunks of 100.","   * var sequence = Lazy.generate(Math.random)","   *   .chunk(100)","   *   .async()","   *   .take(1000);","   *","   * // Reduce-style operations -- i.e., operations that return a *value* (as","   * // opposed to a *sequence*) -- return an AsyncHandle for async sequences.","   * var handle = sequence.toArray();","   *","   * handle.onComplete(function(array) {","   *   // Do something w/ 1,000-element array.","   * });","   *","   * // Since an AsyncHandle is a promise, you can also use it to create","   * // subsequent promises using `then` (see the Promises/A+ spec for more","   * // info).","   * var flattened = handle.then(function(array) {","   *   return Lazy(array).flatten();","   * });","   */","  function AsyncHandle(cancelFn) {","    this.resolveListeners = [];","    this.rejectListeners = [];","    this.state = PENDING;","    this.cancelFn = cancelFn;","  }","","  // Async handle states","  var PENDING  = 1,","      RESOLVED = 2,","      REJECTED = 3;","","  AsyncHandle.prototype.then = function then(onFulfilled, onRejected) {","    var promise = new AsyncHandle(this.cancelFn);","","    this.resolveListeners.push(function(value) {","      try {","        if (typeof onFulfilled !== 'function') {","          resolve(promise, value);","          return;","        }","","        resolve(promise, onFulfilled(value));","","      } catch (e) {","        promise._reject(e);","      }","    });","","    this.rejectListeners.push(function(reason) {","      try {","        if (typeof onRejected !== 'function') {","          promise._reject(reason);","          return;","        }","","        resolve(promise, onRejected(reason));","","      } catch (e) {","        promise._reject(e);","      }","    });","","    if (this.state === RESOLVED) {","      this._resolve(this.value);","    }","","    if (this.state === REJECTED) {","      this._reject(this.reason);","    }","","    return promise;","  };","","  AsyncHandle.prototype._resolve = function _resolve(value) {","    if (this.state === REJECTED) {","      return;","    }","","    if (this.state === PENDING) {","      this.state = RESOLVED;","      this.value = value;","    }","","    consumeListeners(this.resolveListeners, this.value);","  };","","  AsyncHandle.prototype._reject = function _reject(reason) {","    if (this.state === RESOLVED) {","      return;","    }","","    if (this.state === PENDING) {","      this.state = REJECTED;","      this.reason = reason;","    }","","    consumeListeners(this.rejectListeners, this.reason);","  };","","  /**","   * Cancels asynchronous iteration.","   *","   * @public","   */","  AsyncHandle.prototype.cancel = function cancel() {","    if (this.cancelFn) {","      this.cancelFn();","      this.cancelFn = null;","      this._resolve(false);","    }","  };","","  /**","   * Updates the handle with a callback to execute when iteration is completed.","   *","   * @public","   * @param {Function} callback The function to call when the asynchronous","   *     iteration is completed.","   * @return {AsyncHandle} A reference to the handle (for chaining).","   */","  AsyncHandle.prototype.onComplete = function onComplete(callback) {","    this.resolveListeners.push(callback);","    return this;","  };","","  /**","   * Updates the handle with a callback to execute if/when any error is","   * encountered during asynchronous iteration.","   *","   * @public","   * @param {Function} callback The function to call, with any associated error","   *     object, when an error occurs.","   * @return {AsyncHandle} A reference to the handle (for chaining).","   */","  AsyncHandle.prototype.onError = function onError(callback) {","    this.rejectListeners.push(callback);","    return this;","  };","","  /**","   * Promise resolution procedure:","   * http://promises-aplus.github.io/promises-spec/#the_promise_resolution_procedure","   */","  function resolve(promise, x) {","    if (promise === x) {","      promise._reject(new TypeError('Cannot resolve a promise to itself'));","      return;","    }","","    if (x instanceof AsyncHandle) {","      x.then(","        function(value) { resolve(promise, value); },","        function(reason) { promise._reject(reason); }","      );","      return;","    }","","    var then;","    try {","      then = (/function|object/).test(typeof x) && x != null && x.then;","    } catch (e) {","      promise._reject(e);","      return;","    }","","    var thenableState = PENDING;","    if (typeof then === 'function') {","      try {","        then.call(","          x,","          function resolvePromise(value) {","            if (thenableState !== PENDING) {","              return;","            }","            thenableState = RESOLVED;","            resolve(promise, value);","          },","          function rejectPromise(reason) {","            if (thenableState !== PENDING) {","              return;","            }","            thenableState = REJECTED;","            promise._reject(reason);","          }","        );","      } catch (e) {","        if (thenableState !== PENDING) {","          return;","        }","","        promise._reject(e);","      }","","      return;","    }","","    promise._resolve(x);","  }","","  function consumeListeners(listeners, value, callback) {","    callback || (callback = getOnNextCallback());","","    callback(function() {","      if (listeners.length > 0) {","        listeners.shift()(value);","        consumeListeners(listeners, value, callback);","      }","    });","  }","","  function getOnNextCallback(interval) {","    if (typeof interval === \"undefined\") {","      if (typeof setImmediate === \"function\") {","        return setImmediate;","      }","    }","","    interval = interval || 0;","    return function(fn) {","      return setTimeout(fn, interval);","    };","  }","","  function getCancelCallback(interval) {","    if (typeof interval === \"undefined\") {","      if (typeof clearImmediate === \"function\") {","        return clearImmediate;","      }","    }","","    return clearTimeout;","  }","","  /**","   * Transform a value, whether the value is retrieved asynchronously or directly.","   *","   * @private","   * @param {Function} fn The function that transforms the value.","   * @param {*} value The value to be transformed. This can be an {@link AsyncHandle} when the value","   *     is retrieved asynchronously, otherwise it can be anything.","   * @returns {*} An {@link AsyncHandle} when `value` is also an {@link AsyncHandle}, otherwise","   *     whatever `fn` resulted in.","   */","  function transform(fn, value) {","    if (value instanceof AsyncHandle) {","      return value.then(function() { fn(value); });","    }","    return fn(value);","  }","","  /**","   * An async version of {@link Sequence#reverse}.","   */","  AsyncSequence.prototype.reverse = function reverse() {","    return this.parent.reverse().async();","  };","","  /**","   * A version of {@link Sequence#find} which returns an {@link AsyncHandle}.","   *","   * @public","   * @param {Function} predicate A function to call on (potentially) every element","   *     in the sequence.","   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to","   *     the found element, once it is detected, or else `undefined`.","   */","  AsyncSequence.prototype.find = function find(predicate) {","    var found;","","    var handle = this.each(function(e, i) {","      if (predicate(e, i)) {","        found = e;","        return false;","      }","    });","","    return handle.then(function() { return found; });","  };","","  /**","   * A version of {@link Sequence#indexOf} which returns an {@link AsyncHandle}.","   *","   * @public","   * @param {*} value The element to search for in the sequence.","   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to","   *     the found index, once it is detected, or -1.","   */","  AsyncSequence.prototype.indexOf = function indexOf(value) {","    var foundIndex = -1;","","    var handle = this.each(function(e, i) {","      if (e === value) {","        foundIndex = i;","        return false;","      }","    });","","    return handle.then(function() {","      return foundIndex;","    });","  };","","  /**","   * A version of {@link Sequence#contains} which returns an {@link AsyncHandle}.","   *","   * @public","   * @param {*} value The element to search for in the sequence.","   * @returns {AsyncHandle} An {@link AsyncHandle} (promise) which resolves to","   *     either `true` or `false` to indicate whether the element was found.","   */","  AsyncSequence.prototype.contains = function contains(value) {","    var found = false;","","    var handle = this.each(function(e) {","      if (e === value) {","        found = true;","        return false;","      }","    });","","    return handle.then(function() {","      return found;","    });","  };","","  /**","   * Just return the same sequence for `AsyncSequence#async` (I see no harm in this).","   */","  AsyncSequence.prototype.async = function async() {","    return this;","  };","","  /**","   * See {@link ObjectLikeSequence#watch} for docs.","   */","  ObjectWrapper.prototype.watch = function watch(propertyNames) {","    return new WatchedPropertySequence(this.source, propertyNames);","  };","","  function WatchedPropertySequence(object, propertyNames) {","    this.listeners = [];","","    if (!propertyNames) {","      propertyNames = Lazy(object).keys().toArray();","    } else if (!isArray(propertyNames)) {","      propertyNames = [propertyNames];","    }","","    var listeners = this.listeners,","        index     = 0;","","    Lazy(propertyNames).each(function(propertyName) {","      var propertyValue = object[propertyName];","","      Object.defineProperty(object, propertyName, {","        get: function() {","          return propertyValue;","        },","","        set: function(value) {","          for (var i = listeners.length - 1; i >= 0; --i) {","            if (listeners[i]({ property: propertyName, value: value }, index) === false) {","              listeners.splice(i, 1);","            }","          }","          propertyValue = value;","          ++index;","        }","      });","    });","  }","","  WatchedPropertySequence.prototype = new AsyncSequence();","","  WatchedPropertySequence.prototype.each = function each(fn) {","    this.listeners.push(fn);","  };","","  /**","   * A StreamLikeSequence comprises a sequence of 'chunks' of data, which are","   * typically multiline strings.","   *","   * @constructor","   */","  function StreamLikeSequence() {}","","  StreamLikeSequence.prototype = new AsyncSequence();","","  StreamLikeSequence.prototype.isAsync = function isAsync() {","    return true;","  };","","  StreamLikeSequence.prototype.split = function split(delimiter) {","    return new SplitStreamSequence(this, delimiter);","  };","","  /**","   * @constructor","   */","  function SplitStreamSequence(parent, delimiter) {","    this.parent    = parent;","    this.delimiter = delimiter;","    this.each      = this.getEachForDelimiter(delimiter);","  }","","  SplitStreamSequence.prototype = new Sequence();","","  SplitStreamSequence.prototype.getEachForDelimiter = function getEachForDelimiter(delimiter) {","    if (delimiter instanceof RegExp) {","      return this.regexEach;","    }","","    return this.stringEach;","  };","","  SplitStreamSequence.prototype.regexEach = function each(fn) {","    var delimiter = cloneRegex(this.delimiter),","        buffer = '',","        start = 0, end,","        index = 0;","","    var handle = this.parent.each(function(chunk) {","      buffer += chunk;","","      var match;","      while (match = delimiter.exec(buffer)) {","        end = match.index;","        if (fn(buffer.substring(start, end), index++) === false) {","          return false;","        }","        start = end + match[0].length;","      }","","      buffer = buffer.substring(start);","      start = 0;","    });","","    handle.onComplete(function() {","      if (buffer.length > 0) {","        fn(buffer, index++);","      }","    });","","    return handle;","  };","","  SplitStreamSequence.prototype.stringEach = function each(fn) {","    var delimiter  = this.delimiter,","        pieceIndex = 0,","        buffer = '',","        bufferIndex = 0;","","    var handle = this.parent.each(function(chunk) {","      buffer += chunk;","      var delimiterIndex;","      while ((delimiterIndex = buffer.indexOf(delimiter)) >= 0) {","        var piece = buffer.substr(0,delimiterIndex);","        buffer = buffer.substr(delimiterIndex+delimiter.length);","        if (fn(piece,pieceIndex++) === false) {","          return false;","        }","      }","      return true;","    });","","    handle.onComplete(function() {","      fn(buffer, pieceIndex++);","    });","","    return handle;","  };","","  StreamLikeSequence.prototype.lines = function lines() {","    return this.split(\"\\n\");","  };","","  StreamLikeSequence.prototype.match = function match(pattern) {","    return new MatchedStreamSequence(this, pattern);","  };","","  /**","   * @constructor","   */","  function MatchedStreamSequence(parent, pattern) {","    this.parent  = parent;","    this.pattern = cloneRegex(pattern);","  }","","  MatchedStreamSequence.prototype = new AsyncSequence();","","  MatchedStreamSequence.prototype.each = function each(fn) {","    var pattern = this.pattern,","        done      = false,","        i         = 0;","","    return this.parent.each(function(chunk) {","      Lazy(chunk).match(pattern).each(function(match) {","        if (fn(match, i++) === false) {","          done = true;","          return false;","        }","      });","","      return !done;","    });","  };","","  /**","   * Defines a wrapper for custom {@link StreamLikeSequence}s. This is useful","   * if you want a way to handle a stream of events as a sequence, but you can't","   * use Lazy's existing interface (i.e., you're wrapping an object from a","   * library with its own custom events).","   *","   * This method defines a *factory*: that is, it produces a function that can","   * be used to wrap objects and return a {@link Sequence}. Hopefully the","   * example will make this clear.","   *","   * @public","   * @param {Function} initializer An initialization function called on objects","   *     created by this factory. `this` will be bound to the created object,","   *     which is an instance of {@link StreamLikeSequence}. Use `emit` to","   *     generate data for the sequence.","   * @returns {Function} A function that creates a new {@link StreamLikeSequence},","   *     initializes it using the specified function, and returns it.","   *","   * @example","   * var factory = Lazy.createWrapper(function(eventSource) {","   *   var sequence = this;","   *","   *   eventSource.handleEvent(function(data) {","   *     sequence.emit(data);","   *   });","   * });","   *","   * var eventEmitter = {","   *   triggerEvent: function(data) {","   *     eventEmitter.eventHandler(data);","   *   },","   *   handleEvent: function(handler) {","   *     eventEmitter.eventHandler = handler;","   *   },","   *   eventHandler: function() {}","   * };","   *","   * var events = [];","   *","   * factory(eventEmitter).each(function(e) {","   *   events.push(e);","   * });","   *","   * eventEmitter.triggerEvent('foo');","   * eventEmitter.triggerEvent('bar');","   *","   * events // => ['foo', 'bar']","   */","  Lazy.createWrapper = function createWrapper(initializer) {","    var ctor = function() {","      this.listeners = [];","    };","","    ctor.prototype = new StreamLikeSequence();","","    ctor.prototype.each = function(listener) {","      this.listeners.push(listener);","    };","","    ctor.prototype.emit = function(data) {","      var listeners = this.listeners;","","      for (var len = listeners.length, i = len - 1; i >= 0; --i) {","        if (listeners[i](data) === false) {","          listeners.splice(i, 1);","        }","      }","    };","","    return function() {","      var sequence = new ctor();","      initializer.apply(sequence, arguments);","      return sequence;","    };","  };","","  /**","   * Creates a {@link GeneratedSequence} using the specified generator function","   * and (optionally) length.","   *","   * @public","   * @param {function(number):*} generatorFn The function used to generate the","   *     sequence. This function accepts an index as a parameter and should return","   *     a value for that index in the resulting sequence.","   * @param {number=} length The length of the sequence, for sequences with a","   *     definite length.","   * @returns {GeneratedSequence} The generated sequence.","   *","   * @examples","   * var randomNumbers = Lazy.generate(Math.random);","   * var countingNumbers = Lazy.generate(function(i) { return i + 1; }, 5);","   *","   * randomNumbers          // instanceof Lazy.GeneratedSequence","   * randomNumbers.length() // => undefined","   * countingNumbers          // sequence: [1, 2, 3, 4, 5]","   * countingNumbers.length() // => 5","   */","  Lazy.generate = function generate(generatorFn, length) {","    return new GeneratedSequence(generatorFn, length);","  };","","  /**","   * Creates a sequence from a given starting value, up to a specified stopping","   * value, incrementing by a given step. Invalid values for any of these","   * arguments (e.g., a step of 0) result in an empty sequence.","   *","   * @public","   * @returns {GeneratedSequence} The sequence defined by the given ranges.","   *","   * @examples","   * Lazy.range(3)         // sequence: [0, 1, 2]","   * Lazy.range(1, 4)      // sequence: [1, 2, 3]","   * Lazy.range(2, 10, 2)  // sequence: [2, 4, 6, 8]","   * Lazy.range(5, 1, 2)   // sequence: []","   * Lazy.range(5, 15, -2) // sequence: []","   * Lazy.range(3, 10, 3)  // sequence: [3, 6, 9]","   * Lazy.range(5, 2)      // sequence: [5, 4, 3]","   * Lazy.range(7, 2, -2)  // sequence: [7, 5, 3]","   * Lazy.range(3, 5, 0)   // sequence: []","   */","  Lazy.range = function range() {","    var start = arguments.length > 1 ? arguments[0] : 0,","        stop  = arguments.length > 1 ? arguments[1] : arguments[0],","        step  = arguments.length > 2 && arguments[2];","","    if (step === false) {","      step = stop > start ? 1 : -1;","    }","","    if (step === 0) {","      return Lazy([]);","    }","","    return Lazy.generate(function(i) { return start + (step * i); })","      .take(Math.ceil((stop - start) / step));","  };","","  /**","   * Creates a sequence consisting of the given value repeated a specified number","   * of times.","   *","   * @public","   * @param {*} value The value to repeat.","   * @param {number=} count The number of times the value should be repeated in","   *     the sequence. If this argument is omitted, the value will repeat forever.","   * @returns {GeneratedSequence} The sequence containing the repeated value.","   *","   * @examples","   * Lazy.repeat(\"hi\", 3)          // sequence: [\"hi\", \"hi\", \"hi\"]","   * Lazy.repeat(\"young\")          // instanceof Lazy.GeneratedSequence","   * Lazy.repeat(\"young\").length() // => undefined","   * Lazy.repeat(\"young\").take(3)  // sequence: [\"young\", \"young\", \"young\"]","   */","  Lazy.repeat = function repeat(value, count) {","    return Lazy.generate(function() { return value; }, count);","  };","","  Lazy.Sequence           = Sequence;","  Lazy.ArrayLikeSequence  = ArrayLikeSequence;","  Lazy.ObjectLikeSequence = ObjectLikeSequence;","  Lazy.StringLikeSequence = StringLikeSequence;","  Lazy.StreamLikeSequence = StreamLikeSequence;","  Lazy.GeneratedSequence  = GeneratedSequence;","  Lazy.AsyncSequence      = AsyncSequence;","  Lazy.AsyncHandle        = AsyncHandle;","","  /*** Useful utility methods ***/","","  /**","   * Creates a shallow copy of an array or object.","   *","   * @examples","   * var array  = [1, 2, 3], clonedArray,","   *     object = { foo: 1, bar: 2 }, clonedObject;","   *","   * clonedArray = Lazy.clone(array); // => [1, 2, 3]","   * clonedArray.push(4); // clonedArray == [1, 2, 3, 4]","   * array; // => [1, 2, 3]","   *","   * clonedObject = Lazy.clone(object); // => { foo: 1, bar: 2 }","   * clonedObject.baz = 3; // clonedObject == { foo: 1, bar: 2, baz: 3 }","   * object; // => { foo: 1, bar: 2 }","   */","  Lazy.clone = function clone(target) {","    return Lazy(target).value();","  };","","  /**","   * Marks a method as deprecated, so calling it will issue a console warning.","   */","  Lazy.deprecate = function deprecate(message, fn) {","    return function() {","      console.warn(message);","      return fn.apply(this, arguments);","    };","  };","","  var isArray    = Array.isArray || function(x) { return x instanceof Array; },","      arrayPop   = Array.prototype.pop,","      arraySlice = Array.prototype.slice;","","  /**","   * Creates a callback... you know, Lo-Dash style.","   *","   * - for functions, just returns the function","   * - for strings, returns a pluck-style callback","   * - for objects, returns a where-style callback","   *","   * @private","   * @param {Function|string|Object} callback A function, string, or object to","   *     convert to a callback.","   * @param {*} defaultReturn If the callback is undefined, a default return","   *     value to use for the function.","   * @returns {Function} The callback function.","   *","   * @examples","   * createCallback(function() {})                  // instanceof Function","   * createCallback('foo')                          // instanceof Function","   * createCallback('foo')({ foo: 'bar'})           // => 'bar'","   * createCallback({ foo: 'bar' })({ foo: 'bar' }) // => true","   * createCallback({ foo: 'bar' })({ foo: 'baz' }) // => false","   */","  function createCallback(callback, defaultValue) {","    switch (typeof callback) {","      case \"function\":","        return callback;","","      case \"string\":","        return function(e) {","          return e[callback];","        };","","      case \"object\":","        return function(e) {","          return Lazy(callback).all(function(value, key) {","            return e[key] === value;","          });","        };","","      case \"undefined\":","        return defaultValue ?","          function() { return defaultValue; } :","          Lazy.identity;","","      default:","        throw new Error(\"Don't know how to make a callback from a \" + typeof callback + \"!\");","    }","  }","","  /**","   * Takes a function that returns a value for one argument and produces a","   * function that compares two arguments.","   *","   * @private","   * @param {Function|string|Object} callback A function, string, or object to","   *     convert to a callback using `createCallback`.","   * @returns {Function} A function that accepts two values and returns 1 if","   *     the first is greater, -1 if the second is greater, or 0 if they are","   *     equivalent.","   *","   * @examples","   * createComparator('a')({ a: 1 }, { a: 2 });       // => -1","   * createComparator('a')({ a: 6 }, { a: 2 });       // => 1","   * createComparator('a')({ a: 1 }, { a: 1 });       // => 0","   * createComparator()(3, 5);                        // => -1","   * createComparator()(7, 5);                        // => 1","   * createComparator()(3, 3);                        // => 0","   */","  function createComparator(callback, descending) {","    if (!callback) { return compare; }","","    callback = createCallback(callback);","","    return function(x, y) {","      return compare(callback(x), callback(y));","    };","  }","","  /**","   * Takes a function and returns a function with the same logic but the","   * arguments reversed. Only applies to functions w/ arity=2 as this is private","   * and I can do what I want.","   *","   * @private","   * @param {Function} fn The function to \"reverse\"","   * @returns {Function} The \"reversed\" function","   *","   * @examples","   * reverseArguments(function(x, y) { return x + y; })('a', 'b'); // => 'ba'","   */","  function reverseArguments(fn) {","    return function(x, y) { return fn(y, x); };","  }","","  /**","   * Creates a Set containing the specified values.","   *","   * @param {...Array} values One or more array(s) of values used to populate the","   *     set.","   * @returns {Set} A new set containing the values passed in.","   */","  function createSet(values) {","    var set = new Set();","    Lazy(values || []).flatten().each(function(e) {","      set.add(e);","    });","    return set;","  }","","  /**","   * Compares two elements for sorting purposes.","   *","   * @private","   * @param {*} x The left element to compare.","   * @param {*} y The right element to compare.","   * @returns {number} 1 if x > y, -1 if x < y, or 0 if x and y are equal.","   *","   * @examples","   * compare(1, 2)     // => -1","   * compare(1, 1)     // => 0","   * compare(2, 1)     // => 1","   * compare('a', 'b') // => -1","   */","  function compare(x, y) {","    if (x === y) {","      return 0;","    }","","    return x > y ? 1 : -1;","  }","","  /**","   * Iterates over every element in an array.","   *","   * @param {Array} array The array.","   * @param {Function} fn The function to call on every element, which can return","   *     false to stop the iteration early.","   * @returns {boolean} True if every element in the entire sequence was iterated,","   *     otherwise false.","   */","  function forEach(array, fn) {","    var i = -1,","        len = array.length;","","    while (++i < len) {","      if (fn(array[i], i) === false) {","        return false;","      }","    }","","    return true;","  }","","  function getFirst(sequence) {","    var result;","    sequence.each(function(e) {","      result = e;","      return false;","    });","    return result;","  }","","  /**","   * Checks if an element exists in an array.","   *","   * @private","   * @param {Array} array","   * @param {*} element","   * @returns {boolean} Whether or not the element exists in the array.","   *","   * @examples","   * arrayContains([1, 2], 2)              // => true","   * arrayContains([1, 2], 3)              // => false","   * arrayContains([undefined], undefined) // => true","   * arrayContains([NaN], NaN)             // => true","   */","  function arrayContains(array, element) {","    var i = -1,","        length = array.length;","","    // Special handling for NaN","    if (element !== element) {","      while (++i < length) {","        if (array[i] !== array[i]) {","          return true;","        }","      }","      return false;","    }","","    while (++i < length) {","      if (array[i] === element) {","        return true;","      }","    }","    return false;","  }","","  /**","   * Checks if an element exists in an array before a given index.","   *","   * @private","   * @param {Array} array","   * @param {*} element","   * @param {number} index","   * @param {Function} keyFn","   * @returns {boolean}","   *","   * @examples","   * arrayContainsBefore([1, 2, 3], 3, 2) // => false","   * arrayContainsBefore([1, 2, 3], 3, 3) // => true","   */","  function arrayContainsBefore(array, element, index, keyFn) {","    var i = -1;","","    if (keyFn) {","      keyFn = createCallback(keyFn);","      while (++i < index) {","        if (keyFn(array[i]) === keyFn(element)) {","          return true;","        }","      }","","    } else {","      while (++i < index) {","        if (array[i] === element) {","          return true;","        }","      }","    }","","    return false;","  }","","  /**","   * Swaps the elements at two specified positions of an array.","   *","   * @private","   * @param {Array} array","   * @param {number} i","   * @param {number} j","   *","   * @examples","   * var array = [1, 2, 3, 4, 5];","   *","   * swap(array, 2, 3) // array == [1, 2, 4, 3, 5]","   */","  function swap(array, i, j) {","    var temp = array[i];","    array[i] = array[j];","    array[j] = temp;","  }","","  /**","   * \"Clones\" a regular expression (but makes it always global).","   *","   * @private","   * @param {RegExp|string} pattern","   * @returns {RegExp}","   */","  function cloneRegex(pattern) {","    return eval(\"\" + pattern + (!pattern.global ? \"g\" : \"\"));","  };","","  /**","   * A collection of unique elements.","   *","   * @private","   * @constructor","   *","   * @examples","   * var set  = new Set(),","   *     obj1 = {},","   *     obj2 = {},","   *     fn1 = function fn1() {},","   *     fn2 = function fn2() {};","   *","   * set.add('foo')            // => true","   * set.add('foo')            // => false","   * set.add(1)                // => true","   * set.add(1)                // => false","   * set.add('1')              // => true","   * set.add('1')              // => false","   * set.add(obj1)             // => true","   * set.add(obj1)             // => false","   * set.add(obj2)             // => true","   * set.add(fn1)              // => true","   * set.add(fn2)              // => true","   * set.add(fn2)              // => false","   * set.contains('__proto__') // => false","   * set.add('__proto__')      // => true","   * set.add('__proto__')      // => false","   * set.contains('add')       // => false","   * set.add('add')            // => true","   * set.add('add')            // => false","   * set.contains(undefined)   // => false","   * set.add(undefined)        // => true","   * set.contains(undefined)   // => true","   * set.contains('undefined') // => false","   * set.add('undefined')      // => true","   * set.contains('undefined') // => true","   * set.contains(NaN)         // => false","   * set.add(NaN)              // => true","   * set.contains(NaN)         // => true","   * set.contains('NaN')       // => false","   * set.add('NaN')            // => true","   * set.contains('NaN')       // => true","   * set.contains('@foo')      // => false","   * set.add('@foo')           // => true","   * set.contains('@foo')      // => true","   */","  function Set() {","    this.table   = {};","    this.objects = [];","  }","","  /**","   * Attempts to add a unique value to the set.","   *","   * @param {*} value The value to add.","   * @returns {boolean} True if the value was added to the set (meaning an equal","   *     value was not already present), or else false.","   */","  Set.prototype.add = function add(value) {","    var table = this.table,","        type  = typeof value,","","        // only applies for strings","        firstChar,","","        // only applies for objects","        objects;","","    switch (type) {","      case \"number\":","      case \"boolean\":","      case \"undefined\":","        if (!table[value]) {","          table[value] = true;","          return true;","        }","        return false;","","      case \"string\":","        // Essentially, escape the first character if it could possibly collide","        // with a number, boolean, or undefined (or a string that happens to start","        // with the escape character!), OR if it could override a special property","        // such as '__proto__' or 'constructor'.","        switch (value.charAt(0)) {","          case \"_\": // e.g., __proto__","          case \"f\": // for 'false'","          case \"t\": // for 'true'","          case \"c\": // for 'constructor'","          case \"u\": // for 'undefined'","          case \"@\": // escaped","          case \"0\":","          case \"1\":","          case \"2\":","          case \"3\":","          case \"4\":","          case \"5\":","          case \"6\":","          case \"7\":","          case \"8\":","          case \"9\":","          case \"N\": // for NaN","            value = \"@\" + value;","        }","        if (!table[value]) {","          table[value] = true;","          return true;","        }","        return false;","","      default:","        // For objects and functions, we can't really do anything other than store","        // them in an array and do a linear search for reference equality.","        objects = this.objects;","        if (!arrayContains(objects, value)) {","          objects.push(value);","          return true;","        }","        return false;","    }","  };","","  /**","   * Checks whether the set contains a value.","   *","   * @param {*} value The value to check for.","   * @returns {boolean} True if the set contains the value, or else false.","   */","  Set.prototype.contains = function contains(value) {","    var type = typeof value,","","        // only applies for strings","        firstChar;","","    switch (type) {","      case \"number\":","      case \"boolean\":","      case \"undefined\":","        return !!this.table[value];","","      case \"string\":","        // Essentially, escape the first character if it could possibly collide","        // with a number, boolean, or undefined (or a string that happens to start","        // with the escape character!), OR if it could override a special property","        // such as '__proto__' or 'constructor'.","        switch (value.charAt(0)) {","          case \"_\": // e.g., __proto__","          case \"f\": // for 'false'","          case \"t\": // for 'true'","          case \"c\": // for 'constructor'","          case \"u\": // for 'undefined'","          case \"@\": // escaped","          case \"0\":","          case \"1\":","          case \"2\":","          case \"3\":","          case \"4\":","          case \"5\":","          case \"6\":","          case \"7\":","          case \"8\":","          case \"9\":","          case \"N\": // for NaN","            value = \"@\" + value;","        }","        return !!this.table[value];","","      default:","        // For objects and functions, we can't really do anything other than store","        // them in an array and do a linear search for reference equality.","        return arrayContains(this.objects, value);","    }","  };","","  /**","   * A \"rolling\" queue, with a fixed capacity. As items are added to the head,","   * excess items are dropped from the tail.","   *","   * @private","   * @constructor","   *","   * @examples","   * var queue = new Queue(3);","   *","   * queue.add(1).toArray()        // => [1]","   * queue.add(2).toArray()        // => [1, 2]","   * queue.add(3).toArray()        // => [1, 2, 3]","   * queue.add(4).toArray()        // => [2, 3, 4]","   * queue.add(5).add(6).toArray() // => [4, 5, 6]","   * queue.add(7).add(8).toArray() // => [6, 7, 8]","   *","   * // also want to check corner cases","   * new Queue(1).add('foo').add('bar').toArray() // => ['bar']","   * new Queue(0).add('foo').toArray()            // => []","   * new Queue(-1)                                // throws","   *","   * @benchmarks","   * function populateQueue(count, capacity) {","   *   var q = new Queue(capacity);","   *   for (var i = 0; i < count; ++i) {","   *     q.add(i);","   *   }","   * }","   *","   * function populateArray(count, capacity) {","   *   var arr = [];","   *   for (var i = 0; i < count; ++i) {","   *     if (arr.length === capacity) { arr.shift(); }","   *     arr.push(i);","   *   }","   * }","   *","   * populateQueue(100, 10); // populating a Queue","   * populateArray(100, 10); // populating an Array","   */","  function Queue(capacity) {","    this.contents = new Array(capacity);","    this.start    = 0;","    this.count    = 0;","  }","","  /**","   * Adds an item to the queue, and returns the queue.","   */","  Queue.prototype.add = function add(element) {","    var contents = this.contents,","        capacity = contents.length,","        start    = this.start;","","    if (this.count === capacity) {","      contents[start] = element;","      this.start = (start + 1) % capacity;","","    } else {","      contents[this.count++] = element;","    }","","    return this;","  };","","  /**","   * Returns an array containing snapshot of the queue's contents.","   */","  Queue.prototype.toArray = function toArray() {","    var contents = this.contents,","        start    = this.start,","        count    = this.count;","","    var snapshot = contents.slice(start, start + count);","    if (snapshot.length < count) {","      snapshot = snapshot.concat(contents.slice(0, count - snapshot.length));","    }","","    return snapshot;","  };","","  /**","   * Shared base method for defining new sequence types.","   */","  function defineSequenceType(base, name, overrides) {","    /** @constructor */","    var ctor = function ctor() {};","","    // Make this type inherit from the specified base.","    ctor.prototype = new base();","","    // Attach overrides to the new sequence type's prototype.","    for (var override in overrides) {","      ctor.prototype[override] = overrides[override];","    }","","    // Define a factory method that sets the new sequence's parent to the caller","    // and (optionally) applies any additional initialization logic.","    // Expose this as a chainable method so that we can do:","    // Lazy(...).map(...).filter(...).blah(...);","    var factory = function factory() {","      var sequence = new ctor();","","      // Every sequence needs a reference to its parent in order to work.","      sequence.parent = this;","","      // If a custom init function was supplied, call it now.","      if (sequence.init) {","        sequence.init.apply(sequence, arguments);","      }","","      return sequence;","    };","","    var methodNames = typeof name === 'string' ? [name] : name;","    for (var i = 0; i < methodNames.length; ++i) {","      base.prototype[methodNames[i]] = factory;","    }","","    return ctor;","  }","","  return Lazy;","});",""],"l":{"62":1,"63":1,"64":0,"65":1,"66":1,"68":0,"106":1,"107":0,"108":0,"110":0,"111":0,"113":0,"114":0,"117":0,"118":0,"119":0,"120":0,"122":0,"123":0,"127":0,"130":1,"134":1,"135":1,"160":1,"161":1,"162":0,"163":0,"166":0,"167":0,"170":0,"173":0,"174":0,"177":0,"253":1,"289":1,"290":0,"291":0,"294":0,"312":1,"313":0,"341":1,"342":0,"348":1,"349":0,"361":1,"362":0,"373":1,"374":0,"388":1,"389":0,"393":0,"394":0,"395":0,"397":0,"400":0,"416":1,"417":0,"418":0,"427":1,"428":0,"438":1,"439":0,"441":0,"442":0,"445":0,"446":0,"449":0,"450":0,"465":1,"466":0,"467":0,"468":0,"486":1,"487":0,"501":1,"502":0,"503":0,"504":0,"505":0,"506":0,"509":0,"530":1,"531":0,"537":1,"538":0,"539":0,"540":0,"541":0,"562":1,"563":0,"564":0,"565":0,"582":1,"583":0,"586":0,"587":0,"588":0,"592":0,"595":1,"596":0,"628":1,"629":0,"632":1,"633":0,"639":1,"640":0,"641":0,"644":1,"646":1,"647":0,"650":1,"651":0,"652":0,"653":0,"660":1,"661":0,"662":0,"663":0,"666":1,"667":0,"670":1,"671":0,"672":0,"673":0,"676":0,"696":1,"697":0,"723":1,"724":0,"725":0,"755":1,"756":0,"759":1,"760":0,"766":1,"767":2,"768":2,"771":1,"773":1,"774":0,"777":1,"778":0,"781":0,"782":0,"783":0,"788":1,"789":0,"795":1,"796":0,"797":0,"798":0,"801":1,"802":0,"805":1,"806":0,"810":0,"811":0,"812":0,"813":0,"814":0,"818":0,"819":0,"836":1,"837":0,"838":0,"856":1,"857":0,"883":1,"884":0,"901":1,"902":0,"908":1,"909":0,"912":1,"914":1,"915":0,"921":1,"922":0,"925":1,"926":0,"929":1,"930":0,"933":0,"934":0,"937":0,"940":1,"941":0,"942":0,"945":0,"965":1,"966":0,"972":1,"973":0,"974":0,"977":1,"979":1,"980":0,"983":0,"984":0,"985":0,"986":0,"990":0,"991":0,"992":0,"993":0,"1021":1,"1022":0,"1023":0,"1025":0,"1028":1,"1030":0,"1036":1,"1037":0,"1038":0,"1041":1,"1043":1,"1044":0,"1047":1,"1048":0,"1051":0,"1052":0,"1053":0,"1054":0,"1055":0,"1058":0,"1059":0,"1062":0,"1068":1,"1069":0,"1070":0,"1073":1,"1074":0,"1077":1,"1078":0,"1100":1,"1101":0,"1107":1,"1108":0,"1109":0,"1112":1,"1114":1,"1115":0,"1119":0,"1120":0,"1121":0,"1122":0,"1125":0,"1128":0,"1129":0,"1132":0,"1149":1,"1150":0,"1153":1,"1154":0,"1155":0,"1158":1,"1160":1,"1161":0,"1162":0,"1180":1,"1181":0,"1182":0,"1184":0,"1203":1,"1204":0,"1223":1,"1224":0,"1227":1,"1230":0,"1236":1,"1237":0,"1238":0,"1241":1,"1243":1,"1244":0,"1248":0,"1249":0,"1250":0,"1264":1,"1265":0,"1268":1,"1269":0,"1275":1,"1276":0,"1277":0,"1280":1,"1282":1,"1283":0,"1286":0,"1287":0,"1288":0,"1289":0,"1292":0,"1295":0,"1332":1,"1333":0,"1334":0,"1335":0,"1382":1,"1383":0,"1384":0,"1385":0,"1391":1,"1392":0,"1393":0,"1396":1,"1398":1,"1399":0,"1402":0,"1404":0,"1417":1,"1418":0,"1463":1,"1464":0,"1470":1,"1471":0,"1472":0,"1473":0,"1504":1,"1505":0,"1511":1,"1512":0,"1513":0,"1514":0,"1542":1,"1543":0,"1549":1,"1550":0,"1551":0,"1594":1,"1595":0,"1598":1,"1599":0,"1605":1,"1606":0,"1607":0,"1610":1,"1612":1,"1613":0,"1617":0,"1618":0,"1619":0,"1620":0,"1621":0,"1626":0,"1627":0,"1628":0,"1662":1,"1663":0,"1664":0,"1666":0,"1673":1,"1674":0,"1675":0,"1678":1,"1680":1,"1681":0,"1684":0,"1685":0,"1686":0,"1687":0,"1689":0,"1692":0,"1693":0,"1696":0,"1699":0,"1700":0,"1701":0,"1702":0,"1703":0,"1706":0,"1707":0,"1711":0,"1712":0,"1716":0,"1732":1,"1733":0,"1739":1,"1740":0,"1743":1,"1745":1,"1746":0,"1751":0,"1752":0,"1753":0,"1754":0,"1758":0,"1759":0,"1762":0,"1777":1,"1778":0,"1784":1,"1785":0,"1788":1,"1790":1,"1791":0,"1793":0,"1794":0,"1795":0,"1798":0,"1799":0,"1802":0,"1816":1,"1817":0,"1834":1,"1835":0,"1838":1,"1839":0,"1845":1,"1846":0,"1847":0,"1850":1,"1852":1,"1853":0,"1855":0,"1856":0,"1857":0,"1875":1,"1876":0,"1896":1,"1897":0,"1898":0,"1900":0,"1907":1,"1908":0,"1909":0,"1912":1,"1914":1,"1915":0,"1916":0,"1919":0,"1922":0,"1923":0,"1924":0,"1925":0,"1926":0,"1927":0,"1931":0,"1932":0,"1940":1,"1941":0,"1942":0,"1943":0,"1944":0,"1947":1,"1948":0,"1951":1,"1952":0,"1956":0,"1957":0,"1958":0,"1961":0,"1962":0,"1963":0,"1966":0,"1972":1,"1973":0,"1974":0,"1975":0,"1976":0,"1979":1,"1980":0,"1983":1,"1984":0,"1989":0,"1990":0,"1991":0,"1992":0,"1993":0,"1994":0,"1997":0,"2000":1,"2001":0,"2005":0,"2006":0,"2007":0,"2011":0,"2012":0,"2013":0,"2018":1,"2019":0,"2020":0,"2023":0,"2024":0,"2025":0,"2029":0,"2053":1,"2054":0,"2056":0,"2057":0,"2061":1,"2062":0,"2086":1,"2087":0,"2089":0,"2090":0,"2091":0,"2092":0,"2093":0,"2096":0,"2099":1,"2100":0,"2124":1,"2125":0,"2139":1,"2140":0,"2159":1,"2160":0,"2161":0,"2162":0,"2163":0,"2164":0,"2167":0,"2184":1,"2185":0,"2187":0,"2188":0,"2190":0,"2211":1,"2212":0,"2217":0,"2218":0,"2219":0,"2220":0,"2222":0,"2225":0,"2241":1,"2242":0,"2274":1,"2275":0,"2276":0,"2279":0,"2280":0,"2284":0,"2285":0,"2288":0,"2291":1,"2293":0,"2321":1,"2322":0,"2323":0,"2328":0,"2330":0,"2331":0,"2335":1,"2336":0,"2356":1,"2357":0,"2358":0,"2359":0,"2360":0,"2363":0,"2380":1,"2381":0,"2382":0,"2385":0,"2391":1,"2392":0,"2393":0,"2396":1,"2398":1,"2399":0,"2405":1,"2406":0,"2407":0,"2410":1,"2411":0,"2414":1,"2415":0,"2419":0,"2420":0,"2423":0,"2424":0,"2427":0,"2428":0,"2446":1,"2447":0,"2453":1,"2454":0,"2455":0,"2458":1,"2460":1,"2461":0,"2462":0,"2463":0,"2464":0,"2488":1,"2489":0,"2492":1,"2493":0,"2516":1,"2517":0,"2518":0,"2521":0,"2522":0,"2523":0,"2525":0,"2529":1,"2530":0,"2531":0,"2556":1,"2557":0,"2558":0,"2561":0,"2562":0,"2563":0,"2565":0,"2569":1,"2570":0,"2571":0,"2588":1,"2589":0,"2590":0,"2593":0,"2596":1,"2597":0,"2598":0,"2623":1,"2624":0,"2626":0,"2627":0,"2628":0,"2630":0,"2634":1,"2635":0,"2651":1,"2652":0,"2658":1,"2659":0,"2660":0,"2661":0,"2664":1,"2666":1,"2667":0,"2670":0,"2671":0,"2672":0,"2677":1,"2678":0,"2682":0,"2683":0,"2684":0,"2689":1,"2690":0,"2691":0,"2693":0,"2705":1,"2706":0,"2707":0,"2710":1,"2712":1,"2713":0,"2716":0,"2717":0,"2718":0,"2721":0,"2722":0,"2725":0,"2726":0,"2727":0,"2731":0,"2831":1,"2833":1,"2864":1,"2865":0,"2866":0,"2869":0,"2886":1,"2887":0,"2903":1,"2904":0,"2910":1,"2911":0,"2917":1,"2918":0,"2928":1,"2929":0,"2930":0,"2933":1,"2934":0,"2937":1,"2938":0,"2939":0,"2942":0,"2943":0,"2949":1,"2950":0,"2953":0,"2954":0,"2955":0,"2959":0,"2973":1,"2974":0,"2988":1,"2989":0,"3003":1,"3004":0,"3018":1,"3019":0,"3040":1,"3041":0,"3043":0,"3044":0,"3047":0,"3049":0,"3050":0,"3051":0,"3053":0,"3056":0,"3068":1,"3069":0,"3075":1,"3076":0,"3077":0,"3080":1,"3082":1,"3083":0,"3084":0,"3087":0,"3093":1,"3094":0,"3100":1,"3101":0,"3102":0,"3105":1,"3107":1,"3108":0,"3115":0,"3116":0,"3117":0,"3118":0,"3122":0,"3134":1,"3135":0,"3141":1,"3142":0,"3145":1,"3147":1,"3148":0,"3160":1,"3161":0,"3162":0,"3165":0,"3171":1,"3172":0,"3173":0,"3176":1,"3178":1,"3179":0,"3180":0,"3192":1,"3193":0,"3199":1,"3200":0,"3201":0,"3204":1,"3206":1,"3207":0,"3210":1,"3211":0,"3212":0,"3226":1,"3227":0,"3228":0,"3230":0,"3237":1,"3238":0,"3239":0,"3242":1,"3244":1,"3245":0,"3246":0,"3247":0,"3249":0,"3253":1,"3254":0,"3260":1,"3261":0,"3268":1,"3269":0,"3270":0,"3271":0,"3274":1,"3276":1,"3279":0,"3288":0,"3289":0,"3290":0,"3291":0,"3292":0,"3293":0,"3294":0,"3300":1,"3302":1,"3303":0,"3304":0,"3306":0,"3313":1,"3315":1,"3319":0,"3320":0,"3323":0,"3326":1,"3327":0,"3330":1,"3331":0,"3334":0,"3335":0,"3336":0,"3337":0,"3340":0,"3343":0,"3346":1,"3347":0,"3349":0,"3350":0,"3353":0,"3354":0,"3357":0,"3360":1,"3361":0,"3362":0,"3365":0,"3368":1,"3369":0,"3370":0,"3373":0,"3376":1,"3377":0,"3378":0,"3381":0,"3391":1,"3392":0,"3395":1,"3397":1,"3398":0,"3401":1,"3402":0,"3411":1,"3412":0,"3420":1,"3421":0,"3427":1,"3428":0,"3434":1,"3435":0,"3441":1,"3442":0,"3448":1,"3449":0,"3457":1,"3458":0,"3459":0,"3461":0,"3468":1,"3469":0,"3475":1,"3476":0,"3477":0,"3480":1,"3482":1,"3483":0,"3485":0,"3486":0,"3489":0,"3492":1,"3493":0,"3496":1,"3497":0,"3502":0,"3503":0,"3504":0,"3508":0,"3514":1,"3515":0,"3516":0,"3519":1,"3521":1,"3522":0,"3529":0,"3530":0,"3531":0,"3532":0,"3536":0,"3542":1,"3543":0,"3544":0,"3545":0,"3548":1,"3550":1,"3551":0,"3562":0,"3563":0,"3564":0,"3565":0,"3569":0,"3572":1,"3575":0,"3584":0,"3585":0,"3586":0,"3587":0,"3588":0,"3589":0,"3590":0,"3591":0,"3592":0,"3598":0,"3599":0,"3600":0,"3601":0,"3602":0,"3603":0,"3609":0,"3612":1,"3622":1,"3623":0,"3624":0,"3625":0,"3626":0,"3628":0,"3635":1,"3636":0,"3637":0,"3640":1,"3642":1,"3643":0,"3646":0,"3647":0,"3649":0,"3653":1,"3654":0,"3657":1,"3658":0,"3665":0,"3666":0,"3667":0,"3671":0,"3672":0,"3673":0,"3674":0,"3678":0,"3700":1,"3702":1,"3745":1,"3746":0,"3747":0,"3750":0,"3753":1,"3754":0,"3774":1,"3775":0,"3776":0,"3779":0,"3795":1,"3796":0,"3799":1,"3800":0,"3803":1,"3805":1,"3806":0,"3808":0,"3809":0,"3823":1,"3824":0,"3827":1,"3828":0,"3831":1,"3833":1,"3834":0,"3836":0,"3837":0,"3849":1,"3850":0,"3853":1,"3854":0,"3857":1,"3858":0,"3859":0,"3862":1,"3864":1,"3865":0,"3867":0,"3868":0,"3869":0,"3878":1,"3879":0,"3899":1,"3900":0,"3903":1,"3904":0,"3910":1,"3911":0,"3912":0,"3915":1,"3917":1,"3918":0,"3921":1,"3922":0,"3925":0,"3926":0,"3927":0,"3928":0,"3931":0,"3934":0,"3935":0,"3936":0,"3937":0,"3962":1,"3963":0,"3969":1,"3970":0,"3971":0,"3974":1,"3976":1,"3977":0,"3978":0,"3981":1,"3982":0,"3985":0,"3986":0,"3987":0,"3988":0,"3991":0,"3992":0,"3996":0,"3997":0,"3998":0,"3999":0,"4016":1,"4017":0,"4023":1,"4024":0,"4027":1,"4029":1,"4030":0,"4031":0,"4112":1,"4113":0,"4115":0,"4121":1,"4122":0,"4123":0,"4124":0,"4127":1,"4129":1,"4130":0,"4134":0,"4135":0,"4137":0,"4138":0,"4139":0,"4143":0,"4145":0,"4148":0,"4149":0,"4152":0,"4154":0,"4155":0,"4156":0,"4157":0,"4162":0,"4176":1,"4177":0,"4179":0,"4180":0,"4184":0,"4185":0,"4186":0,"4187":0,"4190":0,"4193":0,"4194":0,"4196":0,"4197":0,"4198":0,"4201":0,"4214":1,"4215":0,"4236":1,"4237":0,"4238":0,"4239":0,"4242":1,"4243":0,"4264":1,"4265":0,"4271":1,"4272":0,"4273":0,"4276":1,"4278":1,"4279":0,"4282":1,"4283":0,"4286":0,"4287":0,"4288":0,"4315":1,"4316":0,"4322":1,"4323":0,"4324":0,"4327":1,"4329":1,"4330":0,"4333":1,"4334":0,"4337":0,"4338":0,"4339":0,"4360":1,"4361":0,"4379":1,"4380":0,"4398":1,"4399":0,"4400":0,"4401":0,"4409":1,"4418":1,"4419":0,"4423":0,"4424":0,"4426":0,"4427":0,"4429":0,"4431":0,"4434":0,"4435":0,"4436":0,"4437":0,"4440":0,"4444":1,"4446":1,"4447":0,"4451":0,"4452":0,"4455":0,"4456":0,"4457":0,"4462":1,"4464":1,"4465":0,"4468":0,"4469":0,"4470":0,"4471":0,"4473":0,"4477":0,"4478":0,"4479":0,"4483":0,"4517":1,"4518":0,"4524":1,"4525":0,"4528":1,"4530":1,"4531":0,"4534":1,"4535":0,"4538":1,"4539":0,"4542":1,"4543":0,"4549":0,"4550":0,"4552":0,"4553":0,"4557":0,"4589":1,"4591":1,"4624":1,"4625":0,"4626":0,"4629":0,"4632":1,"4633":0,"4642":1,"4643":0,"4649":1,"4650":0,"4651":0,"4654":1,"4655":0,"4658":1,"4659":0,"4675":1,"4676":0,"4692":1,"4693":0,"4694":0,"4696":0,"4717":1,"4718":0,"4724":1,"4725":0,"4726":0,"4727":0,"4730":1,"4732":1,"4733":0,"4736":1,"4737":0,"4753":1,"4754":0,"4755":0,"4758":0,"4774":1,"4775":0,"4776":0,"4779":0,"4782":1,"4783":0,"4804":1,"4805":0,"4826":1,"4827":0,"4842":1,"4843":0,"4858":1,"4859":0,"4874":1,"4875":0,"4894":1,"4895":0,"4914":1,"4915":0,"4934":1,"4935":0,"4941":1,"4942":0,"4943":0,"4946":1,"4947":1,"4948":1,"4958":1,"4959":0,"4965":1,"4966":0,"4969":1,"4970":1,"4971":1,"4973":1,"4974":0,"4990":1,"4991":0,"4997":1,"4998":0,"4999":0,"5002":1,"5004":1,"5005":0,"5011":1,"5012":0,"5013":0,"5016":1,"5017":0,"5020":1,"5021":0,"5040":1,"5041":0,"5047":1,"5048":0,"5049":0,"5052":1,"5054":1,"5055":0,"5057":0,"5058":0,"5059":0,"5061":0,"5063":0,"5064":0,"5066":0,"5073":1,"5074":0,"5075":0,"5078":1,"5079":0,"5082":1,"5083":0,"5084":0,"5087":0,"5089":0,"5090":0,"5091":0,"5092":0,"5093":0,"5095":0,"5096":0,"5097":0,"5098":0,"5099":0,"5100":0,"5103":0,"5109":1,"5110":0,"5111":0,"5114":1,"5115":0,"5118":1,"5119":0,"5120":0,"5123":0,"5126":0,"5127":0,"5128":0,"5129":0,"5132":0,"5144":1,"5145":0,"5148":1,"5150":1,"5151":0,"5154":1,"5155":0,"5158":1,"5159":0,"5162":1,"5163":0,"5166":1,"5167":0,"5184":1,"5185":0,"5186":0,"5189":1,"5191":1,"5192":0,"5202":1,"5203":0,"5216":1,"5217":0,"5221":0,"5222":0,"5223":0,"5227":0,"5230":1,"5231":0,"5241":1,"5242":0,"5243":0,"5244":0,"5247":1,"5248":0,"5251":1,"5252":0,"5254":0,"5255":0,"5258":0,"5259":0,"5306":1,"5307":3,"5308":0,"5311":3,"5312":3,"5313":3,"5314":3,"5317":1,"5319":1,"5320":0,"5331":1,"5332":0,"5346":1,"5347":0,"5352":0,"5353":0,"5354":0,"5358":0,"5359":0,"5361":0,"5362":0,"5363":0,"5366":0,"5370":0,"5374":0,"5417":1,"5418":0,"5419":0,"5420":0,"5421":0,"5425":1,"5429":1,"5430":0,"5432":0,"5433":0,"5434":0,"5435":0,"5436":0,"5439":0,"5442":0,"5446":0,"5447":0,"5448":0,"5449":0,"5450":0,"5453":0,"5456":0,"5460":0,"5461":0,"5464":0,"5465":0,"5468":0,"5471":1,"5472":0,"5473":0,"5476":0,"5477":0,"5478":0,"5481":0,"5484":1,"5485":0,"5486":0,"5489":0,"5490":0,"5491":0,"5494":0,"5502":1,"5503":0,"5504":0,"5505":0,"5506":0,"5518":1,"5519":0,"5520":0,"5532":1,"5533":0,"5534":0,"5541":1,"5542":0,"5543":0,"5544":0,"5547":0,"5548":0,"5549":0,"5550":0,"5552":0,"5555":0,"5556":0,"5557":0,"5559":0,"5560":0,"5563":0,"5564":0,"5565":0,"5566":0,"5569":0,"5570":0,"5572":0,"5573":0,"5576":0,"5577":0,"5579":0,"5580":0,"5584":0,"5585":0,"5588":0,"5591":0,"5594":0,"5597":1,"5598":0,"5600":0,"5601":0,"5602":0,"5603":0,"5608":1,"5609":3,"5610":3,"5611":3,"5615":0,"5616":0,"5617":0,"5621":1,"5622":3,"5623":3,"5624":3,"5628":0,"5641":1,"5642":0,"5643":0,"5645":0,"5651":1,"5652":0,"5664":1,"5665":0,"5667":0,"5668":0,"5669":0,"5670":0,"5674":0,"5685":1,"5686":0,"5688":0,"5689":0,"5690":0,"5691":0,"5695":0,"5696":0,"5708":1,"5709":0,"5711":0,"5712":0,"5713":0,"5714":0,"5718":0,"5719":0,"5726":1,"5727":0,"5733":1,"5734":0,"5737":1,"5738":0,"5740":0,"5741":0,"5742":0,"5743":0,"5746":0,"5749":0,"5750":0,"5752":0,"5754":0,"5758":0,"5759":0,"5760":0,"5763":0,"5764":0,"5770":1,"5772":1,"5773":0,"5782":1,"5784":1,"5786":1,"5787":0,"5790":1,"5791":0,"5797":1,"5798":0,"5799":0,"5800":0,"5803":1,"5805":1,"5806":0,"5807":0,"5810":0,"5813":1,"5814":0,"5819":0,"5820":0,"5822":0,"5823":0,"5824":0,"5825":0,"5826":0,"5828":0,"5831":0,"5832":0,"5835":0,"5836":0,"5837":0,"5841":0,"5844":1,"5845":0,"5850":0,"5851":0,"5852":0,"5853":0,"5854":0,"5855":0,"5856":0,"5857":0,"5860":0,"5863":0,"5864":0,"5867":0,"5870":1,"5871":0,"5874":1,"5875":0,"5881":1,"5882":0,"5883":0,"5886":1,"5888":1,"5889":0,"5893":0,"5894":0,"5895":0,"5896":0,"5897":0,"5901":0,"5953":1,"5954":0,"5955":0,"5958":0,"5960":0,"5961":0,"5964":0,"5965":0,"5967":0,"5968":0,"5969":0,"5974":0,"5975":0,"5976":0,"5977":0,"6002":1,"6003":0,"6025":1,"6026":0,"6030":0,"6031":0,"6034":0,"6035":0,"6038":0,"6058":1,"6059":0,"6062":1,"6063":1,"6064":1,"6065":1,"6066":1,"6067":1,"6068":1,"6069":1,"6088":1,"6089":0,"6095":1,"6096":0,"6097":0,"6098":0,"6102":1,"6127":1,"6128":0,"6130":0,"6133":0,"6134":0,"6138":0,"6139":0,"6140":0,"6145":0,"6146":0,"6150":0,"6173":1,"6174":0,"6176":0,"6178":0,"6179":0,"6195":1,"6196":0,"6206":1,"6207":0,"6208":0,"6209":0,"6211":0,"6228":1,"6229":0,"6230":0,"6233":0,"6245":1,"6246":0,"6249":0,"6250":0,"6251":0,"6255":0,"6258":1,"6259":0,"6260":0,"6261":0,"6262":0,"6264":0,"6281":1,"6282":0,"6286":0,"6287":0,"6288":0,"6289":0,"6292":0,"6295":0,"6296":0,"6297":0,"6300":0,"6317":1,"6318":0,"6320":0,"6321":0,"6322":0,"6323":0,"6324":0,"6329":0,"6330":0,"6331":0,"6336":0,"6352":1,"6353":0,"6354":0,"6355":0,"6365":1,"6366":0,"6416":1,"6417":0,"6418":0,"6428":1,"6429":0,"6438":0,"6442":0,"6443":0,"6444":0,"6446":0,"6453":0,"6471":0,"6473":0,"6474":0,"6475":0,"6477":0,"6482":0,"6483":0,"6484":0,"6485":0,"6487":0,"6497":1,"6498":0,"6503":0,"6507":0,"6514":0,"6532":0,"6534":0,"6539":0,"6584":1,"6585":0,"6586":0,"6587":0,"6593":1,"6594":0,"6598":0,"6599":0,"6600":0,"6603":0,"6606":0,"6612":1,"6613":0,"6617":0,"6618":0,"6619":0,"6622":0,"6628":1,"6630":0,"6633":0,"6636":0,"6637":0,"6644":0,"6645":0,"6648":0,"6651":0,"6652":0,"6655":0,"6658":0,"6659":0,"6660":0,"6663":0,"6666":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/util.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/util.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":1,"8":0,"9":1},"b":{"1":[0,1],"2":[1,0]},"f":{"1":1},"fnMap":{"1":{"name":"isHarmonySupported","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":15,"column":1}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":43}},"3":{"start":{"line":5,"column":2},"end":{"line":7,"column":3}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":17}},"5":{"start":{"line":9,"column":2},"end":{"line":14,"column":3}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":29}},"7":{"start":{"line":11,"column":4},"end":{"line":11,"column":16}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":17}},"9":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}}},"branchMap":{"1":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":2},"end":{"line":5,"column":2}},{"start":{"line":5,"column":2},"end":{"line":5,"column":2}}]},"2":{"line":5,"type":"binary-expr","locations":[{"start":{"line":5,"column":6},"end":{"line":5,"column":24}},{"start":{"line":5,"column":28},"end":{"line":5,"column":51}}]}},"code":["function isHarmonySupported() {","  var version = process.version.split('.');","","  // We'll only bother checking Node versions 0.10 and greater","  if (version[0] == 'v0' && Number(version[1]) < 10) {","    return false;","  }","","  try {","    eval('(function*() {})');","    return true;","  } catch (e) {","    return false;","  }","}","","module.exports = {","  isHarmonySupported: isHarmonySupported","};",""],"l":{"1":1,"2":1,"5":1,"6":0,"9":1,"10":1,"11":1,"13":0,"17":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/experimental/lazy.es6.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/experimental/lazy.es6.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":1,"15":1,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":1,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1},"b":{"1":[1,0],"2":[1,1],"3":[1,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[1,1],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[1,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":1},"end":{"line":1,"column":19}}},"2":{"name":"(anonymous_2)","line":10,"loc":{"start":{"line":10,"column":47},"end":{"line":10,"column":58}}},"3":{"name":"IteratorAdapter","line":14,"loc":{"start":{"line":14,"column":4},"end":{"line":14,"column":39}}},"4":{"name":"next","line":18,"loc":{"start":{"line":18,"column":37},"end":{"line":18,"column":53}}},"5":{"name":"(anonymous_5)","line":27,"loc":{"start":{"line":27,"column":30},"end":{"line":27,"column":41}}},"6":{"name":"(anonymous_6)","line":36,"loc":{"start":{"line":36,"column":13},"end":{"line":36,"column":24}}},"7":{"name":"isES6Generator","line":47,"loc":{"start":{"line":47,"column":2},"end":{"line":47,"column":30}}},"8":{"name":"GeneratorWrapper","line":54,"loc":{"start":{"line":54,"column":2},"end":{"line":54,"column":39}}},"9":{"name":"each","line":60,"loc":{"start":{"line":60,"column":36},"end":{"line":60,"column":54}}},"10":{"name":"isES6Map","line":79,"loc":{"start":{"line":79,"column":2},"end":{"line":79,"column":28}}},"11":{"name":"MapWrapper","line":86,"loc":{"start":{"line":86,"column":2},"end":{"line":86,"column":27}}},"12":{"name":"each","line":92,"loc":{"start":{"line":92,"column":30},"end":{"line":92,"column":48}}},"13":{"name":"isES6Set","line":111,"loc":{"start":{"line":111,"column":2},"end":{"line":111,"column":28}}},"14":{"name":"isES6Iterator","line":122,"loc":{"start":{"line":122,"column":2},"end":{"line":122,"column":33}}},"15":{"name":"IterableWrapper","line":129,"loc":{"start":{"line":129,"column":2},"end":{"line":129,"column":37}}},"16":{"name":"each","line":135,"loc":{"start":{"line":135,"column":35},"end":{"line":135,"column":53}}},"17":{"name":"(anonymous_17)","line":153,"loc":{"start":{"line":153,"column":23},"end":{"line":153,"column":40}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":170,"column":50}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":26}},"3":{"start":{"line":5,"column":2},"end":{"line":7,"column":3}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"5":{"start":{"line":9,"column":2},"end":{"line":25,"column":3}},"6":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"7":{"start":{"line":11,"column":6},"end":{"line":11,"column":53}},"8":{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},"9":{"start":{"line":15,"column":6},"end":{"line":15,"column":31}},"10":{"start":{"line":18,"column":4},"end":{"line":24,"column":6}},"11":{"start":{"line":19,"column":6},"end":{"line":21,"column":7}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":50}},"13":{"start":{"line":23,"column":6},"end":{"line":23,"column":28}},"14":{"start":{"line":27,"column":2},"end":{"line":38,"column":7}},"15":{"start":{"line":28,"column":4},"end":{"line":37,"column":5}},"16":{"start":{"line":29,"column":6},"end":{"line":29,"column":50}},"17":{"start":{"line":36,"column":6},"end":{"line":36,"column":27}},"18":{"start":{"line":47,"column":2},"end":{"line":49,"column":3}},"19":{"start":{"line":48,"column":4},"end":{"line":48,"column":46}},"20":{"start":{"line":54,"column":2},"end":{"line":56,"column":3}},"21":{"start":{"line":55,"column":4},"end":{"line":55,"column":31}},"22":{"start":{"line":58,"column":2},"end":{"line":58,"column":51}},"23":{"start":{"line":60,"column":2},"end":{"line":70,"column":4}},"24":{"start":{"line":61,"column":4},"end":{"line":63,"column":14}},"25":{"start":{"line":65,"column":4},"end":{"line":69,"column":5}},"26":{"start":{"line":66,"column":6},"end":{"line":68,"column":7}},"27":{"start":{"line":67,"column":8},"end":{"line":67,"column":21}},"28":{"start":{"line":79,"column":2},"end":{"line":81,"column":3}},"29":{"start":{"line":80,"column":4},"end":{"line":80,"column":56}},"30":{"start":{"line":86,"column":2},"end":{"line":88,"column":3}},"31":{"start":{"line":87,"column":4},"end":{"line":87,"column":19}},"32":{"start":{"line":90,"column":2},"end":{"line":90,"column":55}},"33":{"start":{"line":92,"column":2},"end":{"line":102,"column":4}},"34":{"start":{"line":93,"column":4},"end":{"line":93,"column":23}},"35":{"start":{"line":95,"column":4},"end":{"line":99,"column":5}},"36":{"start":{"line":96,"column":6},"end":{"line":98,"column":7}},"37":{"start":{"line":97,"column":8},"end":{"line":97,"column":21}},"38":{"start":{"line":101,"column":4},"end":{"line":101,"column":16}},"39":{"start":{"line":111,"column":2},"end":{"line":113,"column":3}},"40":{"start":{"line":112,"column":4},"end":{"line":112,"column":56}},"41":{"start":{"line":122,"column":2},"end":{"line":124,"column":3}},"42":{"start":{"line":123,"column":4},"end":{"line":123,"column":66}},"43":{"start":{"line":129,"column":2},"end":{"line":131,"column":3}},"44":{"start":{"line":130,"column":4},"end":{"line":130,"column":29}},"45":{"start":{"line":133,"column":2},"end":{"line":133,"column":50}},"46":{"start":{"line":135,"column":2},"end":{"line":146,"column":4}},"47":{"start":{"line":136,"column":4},"end":{"line":137,"column":15}},"48":{"start":{"line":139,"column":4},"end":{"line":143,"column":5}},"49":{"start":{"line":140,"column":6},"end":{"line":142,"column":7}},"50":{"start":{"line":141,"column":8},"end":{"line":141,"column":21}},"51":{"start":{"line":145,"column":4},"end":{"line":145,"column":16}},"52":{"start":{"line":151,"column":2},"end":{"line":151,"column":44}},"53":{"start":{"line":153,"column":2},"end":{"line":163,"column":5}},"54":{"start":{"line":154,"column":4},"end":{"line":162,"column":5}},"55":{"start":{"line":155,"column":6},"end":{"line":155,"column":42}},"56":{"start":{"line":157,"column":11},"end":{"line":162,"column":5}},"57":{"start":{"line":158,"column":6},"end":{"line":158,"column":36}},"58":{"start":{"line":160,"column":11},"end":{"line":162,"column":5}},"59":{"start":{"line":161,"column":6},"end":{"line":161,"column":41}},"60":{"start":{"line":168,"column":2},"end":{"line":168,"column":39}}},"branchMap":{"1":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":2},"end":{"line":5,"column":2}},{"start":{"line":5,"column":2},"end":{"line":5,"column":2}}]},"2":{"line":5,"type":"binary-expr","locations":[{"start":{"line":5,"column":6},"end":{"line":5,"column":33}},{"start":{"line":5,"column":37},"end":{"line":5,"column":66}}]},"3":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":9,"column":2}},{"start":{"line":9,"column":2},"end":{"line":9,"column":2}}]},"4":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":6}},{"start":{"line":19,"column":6},"end":{"line":19,"column":6}}]},"5":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":6}},{"start":{"line":66,"column":6},"end":{"line":66,"column":6}}]},"6":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":11},"end":{"line":80,"column":22}},{"start":{"line":80,"column":26},"end":{"line":80,"column":55}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":6},"end":{"line":96,"column":6}},{"start":{"line":96,"column":6},"end":{"line":96,"column":6}}]},"8":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":11},"end":{"line":112,"column":22}},{"start":{"line":112,"column":26},"end":{"line":112,"column":55}}]},"9":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":11},"end":{"line":123,"column":27}},{"start":{"line":123,"column":31},"end":{"line":123,"column":65}}]},"10":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":6},"end":{"line":140,"column":6}},{"start":{"line":140,"column":6},"end":{"line":140,"column":6}}]},"11":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":2},"end":{"line":151,"column":17}},{"start":{"line":151,"column":22},"end":{"line":151,"column":42}}]},"12":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"13":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":11},"end":{"line":157,"column":11}},{"start":{"line":157,"column":11},"end":{"line":157,"column":11}}]},"14":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":11},"end":{"line":160,"column":11}},{"start":{"line":160,"column":11},"end":{"line":160,"column":11}}]},"15":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":15},"end":{"line":160,"column":31}},{"start":{"line":160,"column":35},"end":{"line":160,"column":56}}]},"16":{"line":170,"type":"cond-expr","locations":[{"start":{"line":170,"column":34},"end":{"line":170,"column":40}},{"start":{"line":170,"column":43},"end":{"line":170,"column":47}}]}},"code":["(function(context) {","","  var Lazy = context.Lazy;","","  if (typeof Lazy === 'undefined' && typeof require === 'function') {","    Lazy = require('../lazy.js');","  }","","  if (typeof Symbol !== 'undefined') {","    Lazy.Sequence.prototype[Symbol.iterator] = function() {","      return new IteratorAdapter(this.getIterator());","    }","","    function IteratorAdapter(iterator) {","      this.iterator = iterator;","    }","","    IteratorAdapter.prototype.next = function next() {","      if (this.iterator.moveNext()) {","        return { value: this.iterator.current() };","      }","","      return { done: true };","    };","  }","","  var GeneratorConstructor = (function() {","    try {","      return eval('(function*() {})').constructor;","","    } catch (e) {","      // If the above throws a SyntaxError, that means generators aren't","      // supported on the current platform, which means isES6Generator should","      // always return false. So we'll return an anonymous function here, so","      // that instanceof checks will always return false.","      return function() {};","    }","  }());","","  /**","   * Checks whether a function is an ES6 Harmony generator.","   *","   * @private","   * @param {Function} fn","   * @returns {boolean}","   */","  function isES6Generator(fn) {","    return fn instanceof GeneratorConstructor;","  }","","  /**","   * @constructor","   */","  function GeneratorWrapper(generator) {","    this.generator = generator;","  }","","  GeneratorWrapper.prototype = new Lazy.Sequence();","","  GeneratorWrapper.prototype.each = function each(fn) {","    var iterator = this.generator(),","        result,","        i = 0;","","    while (!(result = iterator.next()).done) {","      if (fn(result.value, i++) === false) {","        return false;","      }","    };","  };","","  /**","   * Checks whether an object is an ES6 Map.","   *","   * @private","   * @param {*} object","   * @returns {boolean}","   */","  function isES6Map(object) {","    return context.Map && object instanceof context.Map;","  }","","  /**","   * @constructor","   */","  function MapWrapper(map) {","    this.map = map;","  }","","  MapWrapper.prototype = new Lazy.ObjectLikeSequence();","","  MapWrapper.prototype.each = function each(fn) {","    var map = this.map;","","    for (var pair of map) {","      if (fn(pair[1], pair[0]) === false) {","        return false;","      }","    }","","    return true;","  };","","  /**","   * Checks whether an object is an ES6 Set.","   *","   * @private","   * @param {*} object","   * @returns {boolean}","   */","  function isES6Set(object) {","    return context.Set && object instanceof context.Set;","  }","","  /**","   * Checks whether an object is an ES6 Iterator.","   *","   * @private","   * @param {*} object","   * @returns {boolean}","   */","  function isES6Iterator(object) {","    return context.Iterator && object instanceof context.Iterator;","  }","","  /**","   * @constructor","   */","  function IterableWrapper(iterable) {","    this.iterable = iterable;","  }","","  IterableWrapper.prototype = new Lazy.Sequence();","","  IterableWrapper.prototype.each = function each(fn) {","    var iterable = this.iterable,","        i = -1;","","    for (var item of iterable) {","      if (fn(item, ++i) === false) {","        return false;","      }","    }","","    return true;","  };","","  /*","   * Add support for `Lazy(Map)`, `Lazy(Set)`, and `Lazy(GeneratorFunction)`.","   */","  Lazy.extensions || (Lazy.extensions = []);","","  Lazy.extensions.push(function(source) {","    if (isES6Generator(source)) {","      return new GeneratorWrapper(source);","","    } else if (isES6Map(source)) {","      return new MapWrapper(source);","","    } else if (isES6Set(source) || isES6Iterator(source)) {","      return new IterableWrapper(source);","    }","  });","","  /*","   * Also add `Lazy.isES6Generator` for convenience.","   */","  Lazy.isES6Generator = isES6Generator;","","}(typeof global !== 'undefined' ? global : this));",""],"l":{"1":1,"3":1,"5":1,"6":1,"9":1,"10":1,"11":0,"14":1,"15":0,"18":1,"19":0,"20":0,"23":0,"27":1,"28":1,"29":1,"36":0,"47":1,"48":0,"54":1,"55":0,"58":1,"60":1,"61":0,"65":0,"66":0,"67":0,"79":1,"80":0,"86":1,"87":0,"90":1,"92":1,"93":0,"95":0,"96":0,"97":0,"101":0,"111":1,"112":0,"122":1,"123":0,"129":1,"130":0,"133":1,"135":1,"136":0,"139":0,"140":0,"141":0,"145":0,"151":1,"153":1,"154":0,"155":0,"157":0,"158":0,"160":0,"161":0,"168":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/autodoc/handlers.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/autodoc/handlers.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":10},"end":{"line":5,"column":26}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":11,"column":2}},"2":{"start":{"line":6,"column":6},"end":{"line":8,"column":8}}},"branchMap":{},"code":["this.exampleHandlers = [","  {","    pattern: /sequence: ([\\[\\{'\"][\\s\\S]*[\\]\\}'\"])$/,","    template: 'sequenceEquality',","    data: function(match) {","      return {","        value: match[1]","      };","    }","  }","];",""],"l":{"1":1,"6":0}},"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/experimental/lazy.json.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/experimental/lazy.json.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":1,"9":0,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":1,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":1,"119":0,"120":1,"121":0,"122":1,"123":1},"b":{"1":[1,0],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[1,0],"33":[1,1,1],"34":[1,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":1},"end":{"line":1,"column":19}}},"2":{"name":"JsonSequence","line":12,"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":30}}},"3":{"name":"(anonymous_3)","line":18,"loc":{"start":{"line":18,"column":39},"end":{"line":18,"column":50}}},"4":{"name":"JsonIterator","line":30,"loc":{"start":{"line":30,"column":2},"end":{"line":30,"column":30}}},"5":{"name":"(anonymous_5)","line":37,"loc":{"start":{"line":37,"column":35},"end":{"line":37,"column":46}}},"6":{"name":"(anonymous_6)","line":41,"loc":{"start":{"line":41,"column":41},"end":{"line":41,"column":52}}},"7":{"name":"(anonymous_7)","line":46,"loc":{"start":{"line":46,"column":37},"end":{"line":46,"column":48}}},"8":{"name":"(anonymous_8)","line":86,"loc":{"start":{"line":86,"column":38},"end":{"line":86,"column":61}}},"9":{"name":"(anonymous_9)","line":103,"loc":{"start":{"line":103,"column":37},"end":{"line":103,"column":60}}},"10":{"name":"(anonymous_10)","line":136,"loc":{"start":{"line":136,"column":38},"end":{"line":136,"column":49}}},"11":{"name":"(anonymous_11)","line":193,"loc":{"start":{"line":193,"column":44},"end":{"line":193,"column":55}}},"12":{"name":"(anonymous_12)","line":203,"loc":{"start":{"line":203,"column":39},"end":{"line":203,"column":61}}},"13":{"name":"(anonymous_13)","line":218,"loc":{"start":{"line":218,"column":43},"end":{"line":218,"column":72}}},"14":{"name":"(anonymous_14)","line":232,"loc":{"start":{"line":232,"column":43},"end":{"line":232,"column":72}}},"15":{"name":"(anonymous_15)","line":247,"loc":{"start":{"line":247,"column":41},"end":{"line":247,"column":52}}},"16":{"name":"(anonymous_16)","line":282,"loc":{"start":{"line":282,"column":19},"end":{"line":282,"column":34}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":290,"column":50}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":26}},"3":{"start":{"line":5,"column":2},"end":{"line":7,"column":3}},"4":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"5":{"start":{"line":12,"column":2},"end":{"line":14,"column":3}},"6":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"7":{"start":{"line":16,"column":2},"end":{"line":16,"column":47}},"8":{"start":{"line":18,"column":2},"end":{"line":20,"column":4}},"9":{"start":{"line":19,"column":4},"end":{"line":19,"column":39}},"10":{"start":{"line":23,"column":2},"end":{"line":25,"column":32}},"11":{"start":{"line":30,"column":2},"end":{"line":35,"column":3}},"12":{"start":{"line":31,"column":4},"end":{"line":31,"column":29}},"13":{"start":{"line":32,"column":4},"end":{"line":32,"column":26}},"14":{"start":{"line":33,"column":4},"end":{"line":33,"column":75}},"15":{"start":{"line":34,"column":4},"end":{"line":34,"column":43}},"16":{"start":{"line":37,"column":2},"end":{"line":39,"column":4}},"17":{"start":{"line":38,"column":4},"end":{"line":38,"column":29}},"18":{"start":{"line":41,"column":2},"end":{"line":44,"column":4}},"19":{"start":{"line":42,"column":4},"end":{"line":42,"column":26}},"20":{"start":{"line":43,"column":4},"end":{"line":43,"column":28}},"21":{"start":{"line":46,"column":2},"end":{"line":84,"column":4}},"22":{"start":{"line":47,"column":4},"end":{"line":47,"column":50}},"23":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"24":{"start":{"line":50,"column":6},"end":{"line":50,"column":27}},"25":{"start":{"line":53,"column":4},"end":{"line":53,"column":25}},"26":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"27":{"start":{"line":55,"column":6},"end":{"line":55,"column":19}},"28":{"start":{"line":58,"column":4},"end":{"line":58,"column":47}},"29":{"start":{"line":60,"column":4},"end":{"line":80,"column":5}},"30":{"start":{"line":61,"column":6},"end":{"line":61,"column":44}},"31":{"start":{"line":63,"column":11},"end":{"line":80,"column":5}},"32":{"start":{"line":64,"column":6},"end":{"line":64,"column":43}},"33":{"start":{"line":66,"column":11},"end":{"line":80,"column":5}},"34":{"start":{"line":67,"column":6},"end":{"line":67,"column":44}},"35":{"start":{"line":69,"column":11},"end":{"line":80,"column":5}},"36":{"start":{"line":70,"column":6},"end":{"line":70,"column":40}},"37":{"start":{"line":72,"column":11},"end":{"line":80,"column":5}},"38":{"start":{"line":73,"column":6},"end":{"line":73,"column":31}},"39":{"start":{"line":75,"column":11},"end":{"line":80,"column":5}},"40":{"start":{"line":76,"column":6},"end":{"line":76,"column":43}},"41":{"start":{"line":79,"column":6},"end":{"line":79,"column":34}},"42":{"start":{"line":82,"column":4},"end":{"line":82,"column":42}},"43":{"start":{"line":83,"column":4},"end":{"line":83,"column":16}},"44":{"start":{"line":86,"column":2},"end":{"line":101,"column":4}},"45":{"start":{"line":87,"column":4},"end":{"line":91,"column":15}},"46":{"start":{"line":93,"column":4},"end":{"line":98,"column":5}},"47":{"start":{"line":94,"column":6},"end":{"line":97,"column":7}},"48":{"start":{"line":95,"column":8},"end":{"line":96,"column":35}},"49":{"start":{"line":100,"column":4},"end":{"line":100,"column":25}},"50":{"start":{"line":103,"column":2},"end":{"line":134,"column":4}},"51":{"start":{"line":104,"column":4},"end":{"line":109,"column":15}},"52":{"start":{"line":111,"column":4},"end":{"line":125,"column":5}},"53":{"start":{"line":112,"column":6},"end":{"line":124,"column":7}},"54":{"start":{"line":114,"column":10},"end":{"line":114,"column":43}},"55":{"start":{"line":115,"column":10},"end":{"line":115,"column":16}},"56":{"start":{"line":118,"column":10},"end":{"line":118,"column":25}},"57":{"start":{"line":119,"column":10},"end":{"line":119,"column":16}},"58":{"start":{"line":122,"column":10},"end":{"line":122,"column":25}},"59":{"start":{"line":123,"column":10},"end":{"line":123,"column":16}},"60":{"start":{"line":127,"column":4},"end":{"line":131,"column":5}},"61":{"start":{"line":130,"column":6},"end":{"line":130,"column":71}},"62":{"start":{"line":133,"column":4},"end":{"line":133,"column":25}},"63":{"start":{"line":136,"column":2},"end":{"line":191,"column":4}},"64":{"start":{"line":137,"column":4},"end":{"line":143,"column":15}},"65":{"start":{"line":145,"column":4},"end":{"line":182,"column":5}},"66":{"start":{"line":146,"column":6},"end":{"line":148,"column":7}},"67":{"start":{"line":147,"column":8},"end":{"line":147,"column":47}},"68":{"start":{"line":150,"column":6},"end":{"line":181,"column":7}},"69":{"start":{"line":152,"column":10},"end":{"line":152,"column":43}},"70":{"start":{"line":153,"column":10},"end":{"line":153,"column":57}},"71":{"start":{"line":154,"column":10},"end":{"line":154,"column":16}},"72":{"start":{"line":157,"column":10},"end":{"line":157,"column":42}},"73":{"start":{"line":158,"column":10},"end":{"line":158,"column":33}},"74":{"start":{"line":159,"column":10},"end":{"line":159,"column":16}},"75":{"start":{"line":162,"column":10},"end":{"line":162,"column":26}},"76":{"start":{"line":163,"column":10},"end":{"line":163,"column":27}},"77":{"start":{"line":164,"column":10},"end":{"line":164,"column":16}},"78":{"start":{"line":167,"column":10},"end":{"line":167,"column":24}},"79":{"start":{"line":168,"column":10},"end":{"line":168,"column":26}},"80":{"start":{"line":169,"column":10},"end":{"line":169,"column":16}},"81":{"start":{"line":172,"column":10},"end":{"line":172,"column":24}},"82":{"start":{"line":173,"column":10},"end":{"line":173,"column":26}},"83":{"start":{"line":174,"column":10},"end":{"line":174,"column":23}},"84":{"start":{"line":175,"column":10},"end":{"line":175,"column":16}},"85":{"start":{"line":178,"column":10},"end":{"line":178,"column":33}},"86":{"start":{"line":179,"column":10},"end":{"line":179,"column":23}},"87":{"start":{"line":180,"column":10},"end":{"line":180,"column":16}},"88":{"start":{"line":184,"column":4},"end":{"line":188,"column":5}},"89":{"start":{"line":187,"column":6},"end":{"line":187,"column":76}},"90":{"start":{"line":190,"column":4},"end":{"line":190,"column":25}},"91":{"start":{"line":193,"column":2},"end":{"line":201,"column":4}},"92":{"start":{"line":194,"column":4},"end":{"line":194,"column":49}},"93":{"start":{"line":196,"column":4},"end":{"line":198,"column":5}},"94":{"start":{"line":197,"column":6},"end":{"line":197,"column":19}},"95":{"start":{"line":200,"column":4},"end":{"line":200,"column":28}},"96":{"start":{"line":203,"column":2},"end":{"line":216,"column":4}},"97":{"start":{"line":204,"column":4},"end":{"line":204,"column":50}},"98":{"start":{"line":206,"column":4},"end":{"line":208,"column":5}},"99":{"start":{"line":207,"column":6},"end":{"line":207,"column":27}},"100":{"start":{"line":210,"column":4},"end":{"line":210,"column":25}},"101":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"102":{"start":{"line":212,"column":6},"end":{"line":212,"column":47}},"103":{"start":{"line":215,"column":4},"end":{"line":215,"column":17}},"104":{"start":{"line":218,"column":2},"end":{"line":230,"column":4}},"105":{"start":{"line":219,"column":4},"end":{"line":221,"column":5}},"106":{"start":{"line":220,"column":6},"end":{"line":220,"column":35}},"107":{"start":{"line":223,"column":4},"end":{"line":227,"column":5}},"108":{"start":{"line":224,"column":6},"end":{"line":226,"column":7}},"109":{"start":{"line":225,"column":8},"end":{"line":225,"column":20}},"110":{"start":{"line":229,"column":4},"end":{"line":229,"column":17}},"111":{"start":{"line":232,"column":2},"end":{"line":245,"column":4}},"112":{"start":{"line":233,"column":4},"end":{"line":235,"column":34}},"113":{"start":{"line":237,"column":4},"end":{"line":242,"column":5}},"114":{"start":{"line":238,"column":6},"end":{"line":240,"column":7}},"115":{"start":{"line":239,"column":8},"end":{"line":239,"column":36}},"116":{"start":{"line":241,"column":6},"end":{"line":241,"column":74}},"117":{"start":{"line":244,"column":4},"end":{"line":244,"column":40}},"118":{"start":{"line":247,"column":2},"end":{"line":252,"column":4}},"119":{"start":{"line":248,"column":4},"end":{"line":251,"column":6}},"120":{"start":{"line":282,"column":2},"end":{"line":284,"column":4}},"121":{"start":{"line":283,"column":4},"end":{"line":283,"column":34}},"122":{"start":{"line":286,"column":2},"end":{"line":288,"column":3}},"123":{"start":{"line":287,"column":4},"end":{"line":287,"column":26}}},"branchMap":{"1":{"line":5,"type":"if","locations":[{"start":{"line":5,"column":2},"end":{"line":5,"column":2}},{"start":{"line":5,"column":2},"end":{"line":5,"column":2}}]},"2":{"line":5,"type":"binary-expr","locations":[{"start":{"line":5,"column":6},"end":{"line":5,"column":33}},{"start":{"line":5,"column":37},"end":{"line":5,"column":66}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"6":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":11},"end":{"line":63,"column":11}},{"start":{"line":63,"column":11},"end":{"line":63,"column":11}}]},"7":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":11},"end":{"line":66,"column":11}},{"start":{"line":66,"column":11},"end":{"line":66,"column":11}}]},"8":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":11},"end":{"line":69,"column":11}},{"start":{"line":69,"column":11},"end":{"line":69,"column":11}}]},"9":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":11},"end":{"line":72,"column":11}},{"start":{"line":72,"column":11},"end":{"line":72,"column":11}}]},"10":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":11},"end":{"line":75,"column":11}},{"start":{"line":75,"column":11},"end":{"line":75,"column":11}}]},"11":{"line":89,"type":"cond-expr","locations":[{"start":{"line":89,"column":58},"end":{"line":89,"column":70}},{"start":{"line":89,"column":73},"end":{"line":89,"column":86}}]},"12":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":6}},{"start":{"line":94,"column":6},"end":{"line":94,"column":6}}]},"13":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":10},"end":{"line":94,"column":26}},{"start":{"line":94,"column":30},"end":{"line":94,"column":67}}]},"14":{"line":106,"type":"cond-expr","locations":[{"start":{"line":106,"column":58},"end":{"line":106,"column":70}},{"start":{"line":106,"column":73},"end":{"line":106,"column":86}}]},"15":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":12},"end":{"line":111,"column":28}},{"start":{"line":111,"column":34},"end":{"line":111,"column":65}}]},"16":{"line":112,"type":"switch","locations":[{"start":{"line":113,"column":8},"end":{"line":115,"column":16}},{"start":{"line":117,"column":8},"end":{"line":119,"column":16}},{"start":{"line":121,"column":8},"end":{"line":123,"column":16}}]},"17":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]},"18":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":12},"end":{"line":145,"column":26}},{"start":{"line":145,"column":32},"end":{"line":145,"column":63}}]},"19":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":6},"end":{"line":146,"column":6}},{"start":{"line":146,"column":6},"end":{"line":146,"column":6}}]},"20":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":10},"end":{"line":146,"column":19}},{"start":{"line":146,"column":23},"end":{"line":146,"column":65}}]},"21":{"line":150,"type":"switch","locations":[{"start":{"line":151,"column":8},"end":{"line":154,"column":16}},{"start":{"line":156,"column":8},"end":{"line":159,"column":16}},{"start":{"line":161,"column":8},"end":{"line":164,"column":16}},{"start":{"line":166,"column":8},"end":{"line":169,"column":16}},{"start":{"line":171,"column":8},"end":{"line":175,"column":16}},{"start":{"line":177,"column":8},"end":{"line":180,"column":16}}]},"22":{"line":153,"type":"cond-expr","locations":[{"start":{"line":153,"column":40},"end":{"line":153,"column":43}},{"start":{"line":153,"column":46},"end":{"line":153,"column":56}}]},"23":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":184,"column":4}},{"start":{"line":184,"column":4},"end":{"line":184,"column":4}}]},"24":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":196,"column":4}},{"start":{"line":196,"column":4},"end":{"line":196,"column":4}}]},"25":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":4},"end":{"line":206,"column":4}},{"start":{"line":206,"column":4},"end":{"line":206,"column":4}}]},"26":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":211,"column":4}},{"start":{"line":211,"column":4},"end":{"line":211,"column":4}}]},"27":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":4},"end":{"line":219,"column":4}},{"start":{"line":219,"column":4},"end":{"line":219,"column":4}}]},"28":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":6}},{"start":{"line":224,"column":6},"end":{"line":224,"column":6}}]},"29":{"line":233,"type":"cond-expr","locations":[{"start":{"line":234,"column":6},"end":{"line":234,"column":59}},{"start":{"line":235,"column":6},"end":{"line":235,"column":33}}]},"30":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":4},"end":{"line":237,"column":4}},{"start":{"line":237,"column":4},"end":{"line":237,"column":4}}]},"31":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":6},"end":{"line":238,"column":6}},{"start":{"line":238,"column":6},"end":{"line":238,"column":6}}]},"32":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":2},"end":{"line":286,"column":2}},{"start":{"line":286,"column":2},"end":{"line":286,"column":2}}]},"33":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":6},"end":{"line":286,"column":32}},{"start":{"line":286,"column":36},"end":{"line":286,"column":42}},{"start":{"line":286,"column":46},"end":{"line":286,"column":60}}]},"34":{"line":290,"type":"cond-expr","locations":[{"start":{"line":290,"column":34},"end":{"line":290,"column":40}},{"start":{"line":290,"column":43},"end":{"line":290,"column":47}}]}},"code":["(function(context) {","","  var Lazy = context.Lazy;","","  if (typeof Lazy === 'undefined' && typeof require === 'function') {","    Lazy = require('../lazy.js');","  }","","  /**","   * @constructor","   */","  function JsonSequence(json) {","    this.json = json;","  };","","  JsonSequence.prototype = new Lazy.Sequence();","","  JsonSequence.prototype.getIterator = function() {","    return new JsonIterator(this.json);","  };","","  // Patterns","  var NumberPattern  = /^\\d+(?:\\.\\d+)?$/,","      BooleanPattern = /^(?:true|false)$/,","      NullPattern    = /^null$/;","","  /**","   * @constructor","   */","  function JsonIterator(json) {","    this.json         = json;","    this.position     = 0;","    this.tokenMatcher = /[\":,\\[\\]\\{\\}]|\\d+(?:\\.\\d+)?|true|false|null|\\b./g;","    this.moveNext     = this.firstMoveNext;","  };","","  JsonIterator.prototype.current = function() {","    return this.currentValue;","  };","","  JsonIterator.prototype.firstMoveNext = function() {","    this.expectToken('[');","    return this.readValue();","  };","","  JsonIterator.prototype.readValue = function() {","    var match = this.tokenMatcher.exec(this.json);","","    if (!match) {","      this.unexpectedEOS();","    }","","    var token = match[0];","    if (token === ']') {","      return false;","    }","","    this.position = match.index + token.length;","","    if (token === '\"') {","      this.currentValue = this.readString();","","    } else if (token === '[') {","      this.currentValue = this.readArray();","","    } else if (token === '{') {","      this.currentValue = this.readObject();","","    } else if (NumberPattern.test(token)) {","      this.currentValue = Number(token);","","    } else if (NullPattern.test(token)) {","      this.currentValue = null;","","    } else if (BooleanPattern.test(token)) {","      this.currentValue = token === 'true';","","    } else {","      this.unexpectedToken(match);","    }","","    this.moveNext = this.readAnotherValue;","    return true;","  };","","  JsonIterator.prototype.readString = function(fromPosition) {","    var json         = this.json,","        tokenMatcher = this.tokenMatcher,","        position     = typeof fromPosition === 'number' ? fromPosition : this.position,","        match,","        string;","","    while (match = tokenMatcher.exec(json)) {","      if (match[0] === '\"' && json.charAt(match.index - 1) !== '\\\\') {","        return json.substring(position, match.index)","          .replace(/\\\\(.)/g, '$1');","      }","    }","","    this.unexpectedEOS();","  };","","  JsonIterator.prototype.readArray = function(fromPosition) {","    var json         = this.json,","        tokenMatcher = this.tokenMatcher,","        position     = typeof fromPosition === 'number' ? fromPosition : this.position,","        openBrackets = 1,","        match,","        string;","","    while ((openBrackets > 0) && (match = tokenMatcher.exec(json))) {","      switch (match[0]) {","        case '\"':","          this.readString(match.index + 1);","          break;","","        case '[':","          ++openBrackets;","          break;","","        case ']':","          --openBrackets;","          break;","      }","    }","","    if (openBrackets === 0) {","      // For now we'll just be lazy (ba-dum, ching!) and use JSON.parse for arrays","      // *within* the JSON.","      return JSON.parse(json.substring(position - 1, match.index + 1));","    }","","    this.unexpectedEOS();","  };","","  JsonIterator.prototype.readObject = function() {","    var json         = this.json,","        tokenMatcher = this.tokenMatcher,","        openBraces   = 1,","        expecting    = ['\"', '}'],","        state        = 'key',","        match,","        string;","","    while ((openBraces > 0) && (match = tokenMatcher.exec(json))) {","      if (expecting && !this.tokenIsExpected(match[0], expecting)) {","        this.unexpectedToken(match, expecting);","      }","","      switch (match[0]) {","        case '\"':","          this.readString(match.index + 1);","          expecting = state === 'key' ? ':' : [',', '}'];","          break;","","        case '[':","          this.readArray(match.index + 1);","          expecting = [',', '}'];","          break;","","        case ':':","          state = 'value';","          expecting = null;","          break;","","        case ',':","          state = 'key';","          expecting = '\"';","          break;","","        case '{':","          state = 'key';","          expecting = '\"';","          ++openBraces;","          break;","","        case '}':","          expecting = [',', '}'];","          --openBraces;","          break;","      }","    }","","    if (openBraces === 0) {","      // For now we'll just be lazy (ba-dum, ching!) and use JSON.parse for","      // objects *within* the JSON.","      return JSON.parse(json.substring(this.position - 1, match.index + 1));","    }","","    this.unexpectedEOS();","  };","","  JsonIterator.prototype.readAnotherValue = function() {","    var separator = this.expectToken([',', ']']);","","    if (separator === ']') {","      return false;","    }","","    return this.readValue();","  };","","  JsonIterator.prototype.expectToken = function(expectation) {","    var match = this.tokenMatcher.exec(this.json);","","    if (!match) {","      this.unexpectedEOS();","    }","","    var token = match[0];","    if (!this.tokenIsExpected(token, expectation)) {","      this.unexpectedToken(match, expectation);","    }","","    return token;","  };","","  JsonIterator.prototype.tokenIsExpected = function(token, expectation) {","    if (typeof expectation === 'string') {","      return token === expectation;","    }","","    for (var i = 0; i < expectation.length; ++i) {","      if (token === expectation[i]) {","        return true;","      }","    }","","    return false;","  };","","  JsonIterator.prototype.unexpectedToken = function(match, expectation) {","    var errorMessage = typeof match === 'object' ?","      'Unexpected token ' + match[0] + ' at ' + match.index :","      'Unexpected token ' + match;","","    if (expectation) {","      if (typeof expectation === 'string') {","        expectation = [expectation];","      }","      errorMessage += ' (expected one of: ' + expectation.join(' ') + ')';","    }","","    throw new SyntaxError(errorMessage);","  };","","  JsonIterator.prototype.unexpectedEOS = function() {","    throw new SyntaxError(","      'Unexpected end of input: ' +","      JSON.stringify(this.json.substring(this.position))","    );","  };","","  /**","   * Parses a JSON array into a sequence.","   *","   * @param {string} json A string representing a JSON array.","   * @return {Sequence} A sequence comprising the elements in the JSON array,","   *     which are parsed out lazily.","   *","   * @examples","   * Lazy.parseJSON('foo').toArray()               // throws","   * Lazy.parseJSON('[1, 2, 3]')                   // sequence: [1, 2, 3]","   * Lazy.parseJSON('[\"foo\", \"bar\"]')              // sequence: ['foo', 'bar']","   * Lazy.parseJSON('[\"foo\", 1, \"bar\", 123]')      // sequence: ['foo', 1, 'bar', 123]","   * Lazy.parseJSON('[3.14, \"foo\"]')               // sequence: [3.14, 'foo']","   * Lazy.parseJSON('[1, \"foo, \\\\\"bar\\\\\", baz\"]')  // sequence: [1, 'foo, \"bar\", baz']","   * Lazy.parseJSON('[1, null, true, false]')      // sequence: [1, null, true, false]","   * Lazy.parseJSON('[1, [2, 3]]')                 // sequence: [1, [2, 3]]","   * Lazy.parseJSON('[1, [\"foo [1, 2] bar\"]]')     // sequence: [1, [\"foo [1, 2] bar\"]]","   * Lazy.parseJSON('[1, [2, [3, 4]]]')            // sequence: [1, [2, [3, 4]]]","   * Lazy.parseJSON('[1, [2, 3], 4').toArray()     // throws","   * Lazy.parseJSON('[1, [2, 3], blah]').toArray() // throws","   * Lazy.parseJSON('[1, [2, 3], blah').take(2)    // sequence: [1, [2, 3]]","   * Lazy.parseJSON('[1, { \"foo\": \"bar\" }]')       // sequence: [1, { foo: 'bar' }]","   * Lazy.parseJSON('[1, {}]')                     // sequence: [1, {}]","   * Lazy.parseJSON('[1, {}}]').toArray()          // throws","   *","   * // crazy example","   * Lazy.parseJSON('[1, { \"foo\": { \"bar\": [1, null, [\"baz\"]] } }, [3, false]]') // sequence: [1, { foo: { 'bar': [1, null, ['baz']] } }, [3, false]]","   */","  Lazy.parseJSON = function(json) {","    return new JsonSequence(json);","  };","","  if (typeof module === 'object' && module && module.exports) {","    module.exports = Lazy;","  }","","}(typeof global !== 'undefined' ? global : this));",""],"l":{"1":1,"3":1,"5":1,"6":1,"12":1,"13":0,"16":1,"18":1,"19":0,"23":1,"30":1,"31":0,"32":0,"33":0,"34":0,"37":1,"38":0,"41":1,"42":0,"43":0,"46":1,"47":0,"49":0,"50":0,"53":0,"54":0,"55":0,"58":0,"60":0,"61":0,"63":0,"64":0,"66":0,"67":0,"69":0,"70":0,"72":0,"73":0,"75":0,"76":0,"79":0,"82":0,"83":0,"86":1,"87":0,"93":0,"94":0,"95":0,"100":0,"103":1,"104":0,"111":0,"112":0,"114":0,"115":0,"118":0,"119":0,"122":0,"123":0,"127":0,"130":0,"133":0,"136":1,"137":0,"145":0,"146":0,"147":0,"150":0,"152":0,"153":0,"154":0,"157":0,"158":0,"159":0,"162":0,"163":0,"164":0,"167":0,"168":0,"169":0,"172":0,"173":0,"174":0,"175":0,"178":0,"179":0,"180":0,"184":0,"187":0,"190":0,"193":1,"194":0,"196":0,"197":0,"200":0,"203":1,"204":0,"206":0,"207":0,"210":0,"211":0,"212":0,"215":0,"218":1,"219":0,"220":0,"223":0,"224":0,"225":0,"229":0,"232":1,"233":0,"237":0,"238":0,"239":0,"241":0,"244":0,"247":1,"248":0,"282":1,"283":0,"286":1,"287":1}},"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/perf/perf_race.js":{"path":"/home/travis/build/npmtest/node-npmtest-lazy.js/node_modules/lazy.js/perf/perf_race.js","s":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":1,"108":0,"109":1,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0},"fnMap":{"1":{"name":"identity","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":21}}},"2":{"name":"increment","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":22}}},"3":{"name":"isEven","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":19}}},"4":{"name":"lastLetter","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":25}}},"5":{"name":"randomNumber","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":32}}},"6":{"name":"randomNumbers","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":40}}},"7":{"name":"(anonymous_7)","line":45,"loc":{"start":{"line":45,"column":24},"end":{"line":45,"column":35}}},"8":{"name":"numbersInput","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":24}}},"9":{"name":"randomNumbersInput","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":30}}},"10":{"name":"doubleNumbersInput","line":60,"loc":{"start":{"line":60,"column":0},"end":{"line":60,"column":30}}},"11":{"name":"nestedNumbersInput","line":80,"loc":{"start":{"line":80,"column":0},"end":{"line":80,"column":30}}},"12":{"name":"wordsInput","line":99,"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":22}}},"13":{"name":"evaluateSequence","line":103,"loc":{"start":{"line":103,"column":0},"end":{"line":103,"column":40}}},"14":{"name":"orderAwareComparer","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":34}}},"15":{"name":"orderAgnosticComparer","line":122,"loc":{"start":{"line":122,"column":0},"end":{"line":122,"column":37}}},"16":{"name":"ensureLazyIteration","line":131,"loc":{"start":{"line":131,"column":0},"end":{"line":131,"column":35}}},"17":{"name":"(anonymous_17)","line":132,"loc":{"start":{"line":132,"column":9},"end":{"line":132,"column":20}}},"18":{"name":"(anonymous_18)","line":134,"loc":{"start":{"line":134,"column":18},"end":{"line":134,"column":33}}},"19":{"name":"ensureLodashIteration","line":139,"loc":{"start":{"line":139,"column":0},"end":{"line":139,"column":37}}},"20":{"name":"(anonymous_20)","line":140,"loc":{"start":{"line":140,"column":9},"end":{"line":140,"column":20}}},"21":{"name":"(anonymous_21)","line":142,"loc":{"start":{"line":142,"column":24},"end":{"line":142,"column":39}}},"22":{"name":"addRace","line":147,"loc":{"start":{"line":147,"column":0},"end":{"line":147,"column":40}}},"23":{"name":"(anonymous_23)","line":162,"loc":{"start":{"line":162,"column":8},"end":{"line":162,"column":24}}},"24":{"name":"(anonymous_24)","line":163,"loc":{"start":{"line":163,"column":10},"end":{"line":163,"column":26}}},"25":{"name":"(anonymous_25)","line":167,"loc":{"start":{"line":167,"column":8},"end":{"line":167,"column":24}}},"26":{"name":"(anonymous_26)","line":168,"loc":{"start":{"line":168,"column":10},"end":{"line":168,"column":26}}},"27":{"name":"(anonymous_27)","line":172,"loc":{"start":{"line":172,"column":8},"end":{"line":172,"column":24}}},"28":{"name":"(anonymous_28)","line":173,"loc":{"start":{"line":173,"column":10},"end":{"line":173,"column":26}}},"29":{"name":"(anonymous_29)","line":177,"loc":{"start":{"line":177,"column":8},"end":{"line":177,"column":24}}},"30":{"name":"(anonymous_30)","line":178,"loc":{"start":{"line":178,"column":10},"end":{"line":178,"column":26}}},"31":{"name":"(anonymous_31)","line":182,"loc":{"start":{"line":182,"column":8},"end":{"line":182,"column":24}}},"32":{"name":"(anonymous_32)","line":183,"loc":{"start":{"line":183,"column":10},"end":{"line":183,"column":26}}},"33":{"name":"(anonymous_33)","line":187,"loc":{"start":{"line":187,"column":8},"end":{"line":187,"column":24}}},"34":{"name":"(anonymous_34)","line":188,"loc":{"start":{"line":188,"column":10},"end":{"line":188,"column":26}}},"35":{"name":"(anonymous_35)","line":192,"loc":{"start":{"line":192,"column":8},"end":{"line":192,"column":31}}},"36":{"name":"(anonymous_36)","line":193,"loc":{"start":{"line":193,"column":10},"end":{"line":193,"column":33}}},"37":{"name":"(anonymous_37)","line":197,"loc":{"start":{"line":197,"column":8},"end":{"line":197,"column":24}}},"38":{"name":"(anonymous_38)","line":198,"loc":{"start":{"line":198,"column":10},"end":{"line":198,"column":26}}},"39":{"name":"(anonymous_39)","line":203,"loc":{"start":{"line":203,"column":8},"end":{"line":203,"column":24}}},"40":{"name":"(anonymous_40)","line":204,"loc":{"start":{"line":204,"column":10},"end":{"line":204,"column":26}}},"41":{"name":"(anonymous_41)","line":208,"loc":{"start":{"line":208,"column":8},"end":{"line":208,"column":31}}},"42":{"name":"(anonymous_42)","line":209,"loc":{"start":{"line":209,"column":10},"end":{"line":209,"column":33}}},"43":{"name":"(anonymous_43)","line":213,"loc":{"start":{"line":213,"column":8},"end":{"line":213,"column":31}}},"44":{"name":"(anonymous_44)","line":214,"loc":{"start":{"line":214,"column":10},"end":{"line":214,"column":33}}},"45":{"name":"(anonymous_45)","line":218,"loc":{"start":{"line":218,"column":8},"end":{"line":218,"column":31}}},"46":{"name":"(anonymous_46)","line":219,"loc":{"start":{"line":219,"column":10},"end":{"line":219,"column":33}}},"47":{"name":"(anonymous_47)","line":223,"loc":{"start":{"line":223,"column":8},"end":{"line":223,"column":24}}},"48":{"name":"(anonymous_48)","line":224,"loc":{"start":{"line":224,"column":10},"end":{"line":224,"column":26}}},"49":{"name":"(anonymous_49)","line":229,"loc":{"start":{"line":229,"column":8},"end":{"line":229,"column":24}}},"50":{"name":"(anonymous_50)","line":230,"loc":{"start":{"line":230,"column":10},"end":{"line":230,"column":26}}},"51":{"name":"(anonymous_51)","line":235,"loc":{"start":{"line":235,"column":8},"end":{"line":235,"column":24}}},"52":{"name":"(anonymous_52)","line":236,"loc":{"start":{"line":236,"column":10},"end":{"line":236,"column":26}}},"53":{"name":"formatWinner","line":240,"loc":{"start":{"line":240,"column":0},"end":{"line":240,"column":30}}},"54":{"name":"formatOverallWinner","line":244,"loc":{"start":{"line":244,"column":0},"end":{"line":244,"column":43}}},"55":{"name":"(anonymous_55)","line":246,"loc":{"start":{"line":246,"column":13},"end":{"line":246,"column":35}}},"56":{"name":"(anonymous_56)","line":256,"loc":{"start":{"line":256,"column":9},"end":{"line":256,"column":33}}},"57":{"name":"(anonymous_57)","line":265,"loc":{"start":{"line":265,"column":9},"end":{"line":265,"column":24}}},"58":{"name":"(anonymous_58)","line":269,"loc":{"start":{"line":269,"column":10},"end":{"line":269,"column":27}}},"59":{"name":"(anonymous_59)","line":277,"loc":{"start":{"line":277,"column":12},"end":{"line":277,"column":30}}},"60":{"name":"(anonymous_60)","line":281,"loc":{"start":{"line":281,"column":12},"end":{"line":281,"column":35}}},"61":{"name":"(anonymous_61)","line":286,"loc":{"start":{"line":286,"column":20},"end":{"line":286,"column":43}}},"62":{"name":"(anonymous_62)","line":288,"loc":{"start":{"line":288,"column":11},"end":{"line":288,"column":33}}},"63":{"name":"(anonymous_63)","line":294,"loc":{"start":{"line":294,"column":39},"end":{"line":294,"column":60}}},"64":{"name":"(anonymous_64)","line":306,"loc":{"start":{"line":306,"column":18},"end":{"line":306,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":42}},"3":{"start":{"line":10,"column":0},"end":{"line":10,"column":84}},"4":{"start":{"line":12,"column":0},"end":{"line":12,"column":32}},"5":{"start":{"line":14,"column":0},"end":{"line":14,"column":24}},"6":{"start":{"line":16,"column":0},"end":{"line":22,"column":1}},"7":{"start":{"line":17,"column":2},"end":{"line":17,"column":33}},"8":{"start":{"line":18,"column":2},"end":{"line":18,"column":63}},"9":{"start":{"line":21,"column":2},"end":{"line":21,"column":38}},"10":{"start":{"line":24,"column":0},"end":{"line":26,"column":1}},"11":{"start":{"line":25,"column":2},"end":{"line":25,"column":11}},"12":{"start":{"line":28,"column":0},"end":{"line":30,"column":1}},"13":{"start":{"line":29,"column":2},"end":{"line":29,"column":15}},"14":{"start":{"line":32,"column":0},"end":{"line":34,"column":1}},"15":{"start":{"line":33,"column":2},"end":{"line":33,"column":21}},"16":{"start":{"line":36,"column":0},"end":{"line":38,"column":1}},"17":{"start":{"line":37,"column":2},"end":{"line":37,"column":36}},"18":{"start":{"line":40,"column":0},"end":{"line":42,"column":1}},"19":{"start":{"line":41,"column":2},"end":{"line":41,"column":55}},"20":{"start":{"line":44,"column":0},"end":{"line":50,"column":1}},"21":{"start":{"line":45,"column":2},"end":{"line":47,"column":4}},"22":{"start":{"line":46,"column":4},"end":{"line":46,"column":34}},"23":{"start":{"line":49,"column":2},"end":{"line":49,"column":57}},"24":{"start":{"line":52,"column":0},"end":{"line":54,"column":1}},"25":{"start":{"line":53,"column":2},"end":{"line":53,"column":52}},"26":{"start":{"line":56,"column":0},"end":{"line":58,"column":1}},"27":{"start":{"line":57,"column":2},"end":{"line":57,"column":58}},"28":{"start":{"line":60,"column":0},"end":{"line":78,"column":1}},"29":{"start":{"line":61,"column":2},"end":{"line":77,"column":4}},"30":{"start":{"line":80,"column":0},"end":{"line":97,"column":1}},"31":{"start":{"line":81,"column":2},"end":{"line":96,"column":4}},"32":{"start":{"line":99,"column":0},"end":{"line":101,"column":1}},"33":{"start":{"line":100,"column":2},"end":{"line":100,"column":51}},"34":{"start":{"line":103,"column":0},"end":{"line":113,"column":1}},"35":{"start":{"line":104,"column":2},"end":{"line":110,"column":3}},"36":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"37":{"start":{"line":106,"column":6},"end":{"line":106,"column":29}},"38":{"start":{"line":109,"column":4},"end":{"line":109,"column":28}},"39":{"start":{"line":112,"column":2},"end":{"line":112,"column":15}},"40":{"start":{"line":115,"column":0},"end":{"line":120,"column":1}},"41":{"start":{"line":116,"column":2},"end":{"line":116,"column":29}},"42":{"start":{"line":117,"column":2},"end":{"line":117,"column":29}},"43":{"start":{"line":119,"column":2},"end":{"line":119,"column":28}},"44":{"start":{"line":122,"column":0},"end":{"line":127,"column":1}},"45":{"start":{"line":123,"column":2},"end":{"line":123,"column":41}},"46":{"start":{"line":124,"column":2},"end":{"line":124,"column":41}},"47":{"start":{"line":126,"column":2},"end":{"line":126,"column":28}},"48":{"start":{"line":129,"column":0},"end":{"line":129,"column":35}},"49":{"start":{"line":131,"column":0},"end":{"line":137,"column":1}},"50":{"start":{"line":132,"column":2},"end":{"line":136,"column":4}},"51":{"start":{"line":133,"column":4},"end":{"line":133,"column":51}},"52":{"start":{"line":134,"column":4},"end":{"line":134,"column":37}},"53":{"start":{"line":135,"column":4},"end":{"line":135,"column":20}},"54":{"start":{"line":139,"column":0},"end":{"line":145,"column":1}},"55":{"start":{"line":140,"column":2},"end":{"line":144,"column":4}},"56":{"start":{"line":141,"column":4},"end":{"line":141,"column":49}},"57":{"start":{"line":142,"column":4},"end":{"line":142,"column":43}},"58":{"start":{"line":143,"column":4},"end":{"line":143,"column":18}},"59":{"start":{"line":147,"column":0},"end":{"line":159,"column":1}},"60":{"start":{"line":148,"column":2},"end":{"line":158,"column":3}},"61":{"start":{"line":149,"column":4},"end":{"line":157,"column":8}},"62":{"start":{"line":161,"column":0},"end":{"line":164,"column":3}},"63":{"start":{"line":162,"column":26},"end":{"line":162,"column":60}},"64":{"start":{"line":163,"column":28},"end":{"line":163,"column":64}},"65":{"start":{"line":166,"column":0},"end":{"line":169,"column":3}},"66":{"start":{"line":167,"column":26},"end":{"line":167,"column":60}},"67":{"start":{"line":168,"column":28},"end":{"line":168,"column":64}},"68":{"start":{"line":171,"column":0},"end":{"line":174,"column":3}},"69":{"start":{"line":172,"column":26},"end":{"line":172,"column":64}},"70":{"start":{"line":173,"column":28},"end":{"line":173,"column":68}},"71":{"start":{"line":176,"column":0},"end":{"line":179,"column":3}},"72":{"start":{"line":177,"column":26},"end":{"line":177,"column":66}},"73":{"start":{"line":178,"column":28},"end":{"line":178,"column":69}},"74":{"start":{"line":181,"column":0},"end":{"line":184,"column":3}},"75":{"start":{"line":182,"column":26},"end":{"line":182,"column":65}},"76":{"start":{"line":183,"column":28},"end":{"line":183,"column":69}},"77":{"start":{"line":186,"column":0},"end":{"line":189,"column":3}},"78":{"start":{"line":187,"column":26},"end":{"line":187,"column":52}},"79":{"start":{"line":188,"column":28},"end":{"line":188,"column":54}},"80":{"start":{"line":191,"column":0},"end":{"line":194,"column":3}},"81":{"start":{"line":192,"column":33},"end":{"line":192,"column":63}},"82":{"start":{"line":193,"column":35},"end":{"line":193,"column":67}},"83":{"start":{"line":196,"column":0},"end":{"line":200,"column":3}},"84":{"start":{"line":197,"column":26},"end":{"line":197,"column":55}},"85":{"start":{"line":198,"column":28},"end":{"line":198,"column":57}},"86":{"start":{"line":202,"column":0},"end":{"line":205,"column":3}},"87":{"start":{"line":203,"column":26},"end":{"line":203,"column":55}},"88":{"start":{"line":204,"column":28},"end":{"line":204,"column":57}},"89":{"start":{"line":207,"column":0},"end":{"line":210,"column":3}},"90":{"start":{"line":208,"column":33},"end":{"line":208,"column":70}},"91":{"start":{"line":209,"column":35},"end":{"line":209,"column":74}},"92":{"start":{"line":212,"column":0},"end":{"line":215,"column":3}},"93":{"start":{"line":213,"column":33},"end":{"line":213,"column":65}},"94":{"start":{"line":214,"column":35},"end":{"line":214,"column":69}},"95":{"start":{"line":217,"column":0},"end":{"line":220,"column":3}},"96":{"start":{"line":218,"column":33},"end":{"line":218,"column":72}},"97":{"start":{"line":219,"column":35},"end":{"line":219,"column":76}},"98":{"start":{"line":222,"column":0},"end":{"line":226,"column":3}},"99":{"start":{"line":223,"column":26},"end":{"line":223,"column":51}},"100":{"start":{"line":224,"column":28},"end":{"line":224,"column":53}},"101":{"start":{"line":228,"column":0},"end":{"line":232,"column":3}},"102":{"start":{"line":229,"column":26},"end":{"line":229,"column":66}},"103":{"start":{"line":230,"column":28},"end":{"line":230,"column":76}},"104":{"start":{"line":234,"column":0},"end":{"line":238,"column":3}},"105":{"start":{"line":235,"column":26},"end":{"line":235,"column":81}},"106":{"start":{"line":236,"column":28},"end":{"line":236,"column":99}},"107":{"start":{"line":240,"column":0},"end":{"line":242,"column":1}},"108":{"start":{"line":241,"column":2},"end":{"line":241,"column":73}},"109":{"start":{"line":244,"column":0},"end":{"line":262,"column":1}},"110":{"start":{"line":245,"column":2},"end":{"line":249,"column":16}},"111":{"start":{"line":247,"column":6},"end":{"line":247,"column":37}},"112":{"start":{"line":251,"column":2},"end":{"line":253,"column":3}},"113":{"start":{"line":252,"column":4},"end":{"line":252,"column":40}},"114":{"start":{"line":255,"column":2},"end":{"line":259,"column":16}},"115":{"start":{"line":257,"column":6},"end":{"line":257,"column":35}},"116":{"start":{"line":261,"column":2},"end":{"line":261,"column":37}},"117":{"start":{"line":264,"column":0},"end":{"line":314,"column":3}},"118":{"start":{"line":266,"column":4},"end":{"line":266,"column":63}},"119":{"start":{"line":270,"column":4},"end":{"line":274,"column":18}},"120":{"start":{"line":278,"column":4},"end":{"line":278,"column":74}},"121":{"start":{"line":282,"column":4},"end":{"line":282,"column":67}},"122":{"start":{"line":283,"column":4},"end":{"line":283,"column":20}},"123":{"start":{"line":287,"column":4},"end":{"line":302,"column":17}},"124":{"start":{"line":289,"column":8},"end":{"line":292,"column":10}},"125":{"start":{"line":294,"column":8},"end":{"line":296,"column":11}},"126":{"start":{"line":295,"column":10},"end":{"line":295,"column":34}},"127":{"start":{"line":298,"column":8},"end":{"line":298,"column":61}},"128":{"start":{"line":300,"column":8},"end":{"line":300,"column":26}},"129":{"start":{"line":304,"column":4},"end":{"line":311,"column":8}},"130":{"start":{"line":307,"column":10},"end":{"line":307,"column":42}},"131":{"start":{"line":312,"column":4},"end":{"line":312,"column":20}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":0},"end":{"line":16,"column":0}},{"start":{"line":16,"column":0},"end":{"line":16,"column":0}}]},"2":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":2},"end":{"line":104,"column":2}},{"start":{"line":104,"column":2},"end":{"line":104,"column":2}}]},"3":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"4":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":2},"end":{"line":148,"column":2}},{"start":{"line":148,"column":2},"end":{"line":148,"column":2}}]},"5":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":6},"end":{"line":148,"column":19}},{"start":{"line":148,"column":23},"end":{"line":148,"column":44}}]},"6":{"line":153,"type":"cond-expr","locations":[{"start":{"line":153,"column":34},"end":{"line":153,"column":46}},{"start":{"line":153,"column":49},"end":{"line":153,"column":82}}]},"7":{"line":154,"type":"cond-expr","locations":[{"start":{"line":154,"column":36},"end":{"line":154,"column":50}},{"start":{"line":154,"column":53},"end":{"line":154,"column":90}}]},"8":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":16},"end":{"line":156,"column":32}},{"start":{"line":156,"column":36},"end":{"line":156,"column":54}}]},"9":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":2},"end":{"line":251,"column":2}},{"start":{"line":251,"column":2},"end":{"line":251,"column":2}}]}},"code":["// Exposing Benchmark to the global object so that we can make adjustments","// (i.e., maxTime, below) that will affect race.js.","global.Benchmark = require('benchmark');","","var Lazy        = require('../lazy.js'),","    lodash      = require('lodash'),","    Race        = require('race.js'),","    stringTable = require('string-table');","","console.log('Racing Lazy.js ' + Lazy.VERSION + ' against Lodash ' + lodash.VERSION);","","Benchmark.options.maxTime = 0.5;","","var selectedRace = null;","","if (process.argv.length > 2) {","  selectedRace = process.argv[2];","  console.log('Just going to run \"' + selectedRace + '\" race');","","} else {","  console.log('Running all races...');","}","","function identity(x) {","  return x;","}","","function increment(x) {","  return x + 1;","}","","function isEven(x) {","  return x % 2 === 0;","}","","function lastLetter(str) {","  return str.charAt(str.length - 1);","}","","function randomNumber(min, max) {","  return min + Math.floor(Math.random() * (max - min));","}","","function randomNumbers(count, min, max) {","  var getRandomNumber = function() {","    return randomNumber(min, max);","  };","","  return Lazy.generate(getRandomNumber, count).toArray();","}","","function numbersInput() {","  return Race.inputs.arraysOfIntegers([5, 10, 100]);","}","","function randomNumbersInput() {","  return Race.inputs.arraysOfRandomIntegers([5, 10, 100]);","}","","function doubleNumbersInput() {","  return [","    {","      name: '2 5-element arrays',","      values: [Race.utils.integers(5), Race.utils.integers(5, 3)],","      size: 5","    },","    {","      name: '2 10-element arrays',","      values: [Race.utils.integers(10), Race.utils.integers(10, 5)],","      size: 10","    },","    {","      name: '2 100-element arrays',","      values: [Race.utils.integers(100), Race.utils.integers(100, 50)],","      size: 100","    }","  ];","}","","function nestedNumbersInput() {","  return [","    {","      name: 'small nested array',","      values: [","        [1, 2, [3, 4, [5, 6], 7, 8], 9, 10]","      ],","      size: 10","    },","    {","      name: 'medium nested array',","      values: [","        [1, 2, 3, [4, 5], [6, 7, [8, 9, 10, 11], 12], 13, 14, [15, 16], 17, [18, [19, [20]]]]","      ],","      size: 20","    }","  ];","}","","function wordsInput() {","  return Race.inputs.arraysOfStrings([5, 10, 100]);","}","","function evaluateSequence(value, other) {","  if (value instanceof Lazy.Sequence) {","    if (other instanceof Array) {","      return value.toArray();","    }","","    return value.toObject();","  }","","  return value;","}","","function orderAwareComparer(x, y) {","  x = evaluateSequence(x, y);","  y = evaluateSequence(y, x);","","  return Race.compare(x, y);","}","","function orderAgnosticComparer(x, y) {","  x = Lazy(x).sortBy(identity).toArray();","  y = Lazy(y).sortBy(identity).toArray();","","  return Race.compare(x, y);","}","","var marathon = new Race.Marathon();","","function ensureLazyIteration(impl) {","  return function() {","    var sequence = Race.fastApply(impl, arguments);","    sequence.each(function(x, i) {});","    return sequence;","  };","}","","function ensureLodashIteration(impl) {","  return function() {","    var result = Race.fastApply(impl, arguments);","    lodash.each(result, function(x, i) {});","    return result;","  };","}","","function addRace(name, inputs, options) {","  if (!selectedRace || name === selectedRace) {","    marathon.add(new Race({","      description: name,","      inputs: inputs,","      impls: {","        lazy: options.valueOnly ? options.lazy : ensureLazyIteration(options.lazy),","        lodash: options.valueOnly ? options.lodash : ensureLodashIteration(options.lodash)","      },","      comparer: options.comparer || orderAwareComparer","    }));","  }","}","","addRace('map', numbersInput(), {","  lazy: function(array) { return Lazy(array).map(increment); },","  lodash: function(array) { return lodash.map(array, increment); }","});","","addRace('filter', numbersInput(), {","  lazy: function(array) { return Lazy(array).filter(isEven); },","  lodash: function(array) { return lodash.filter(array, isEven); }","});","","addRace('sortBy', wordsInput(), {","  lazy: function(array) { return Lazy(array).sortBy(lastLetter); },","  lodash: function(array) { return lodash.sortBy(array, lastLetter); }","});","","addRace('groupBy', wordsInput(), {","  lazy: function(array) { return  Lazy(array).groupBy(lastLetter); },","  lodash: function(array) { return lodash.groupBy(array, lastLetter); }","});","","addRace('countBy', wordsInput(), {","  lazy: function(array) { return Lazy(array).countBy(lastLetter); },","  lodash: function(array) { return lodash.countBy(array, lastLetter); }","});","","addRace('uniq', randomNumbersInput(), {","  lazy: function(array) { return Lazy(array).uniq(); },","  lodash: function(array) { return lodash.uniq(array); }","});","","addRace('zip', doubleNumbersInput(), {","  lazy: function(array, other) { return Lazy(array).zip(other); },","  lodash: function(array, other) { return lodash.zip(array, other); }","});","","addRace('shuffle', randomNumbersInput(), {","  lazy: function(array) { return Lazy(array).shuffle(); },","  lodash: function(array) { return lodash.shuffle(array); },","  comparer: orderAgnosticComparer","});","","addRace('flatten', nestedNumbersInput(), {","  lazy: function(array) { return Lazy(array).flatten(); },","  lodash: function(array) { return lodash.flatten(array); }","});","","addRace('difference', doubleNumbersInput(), {","  lazy: function(array, other) { return Lazy(array).difference(other); },","  lodash: function(array, other) { return lodash.difference(array, other); }","});","","addRace('union', doubleNumbersInput(), {","  lazy: function(array, other) { return Lazy(array).union(other); },","  lodash: function(array, other) { return lodash.union(array, other); }","});","","addRace('intersection', doubleNumbersInput(), {","  lazy: function(array, other) { return Lazy(array).intersection(other); },","  lodash: function(array, other) { return lodash.intersection(array, other); }","});","","addRace('max', numbersInput(), {","  lazy: function(array) { return Lazy(array).max(); },","  lodash: function(array) { return lodash.max(array); },","  valueOnly: true","});","","addRace('map-max', numbersInput(), {","  lazy: function(array) { return Lazy(array).map(increment).max(); },","  lodash: function(array) { return lodash.max(lodash.map(array, increment)); },","  valueOnly: true","});","","addRace('map-filter-max', numbersInput(), {","  lazy: function(array) { return Lazy(array).map(increment).filter(isEven).max(); },","  lodash: function(array) { return lodash.max(lodash.filter(lodash.map(array, increment), isEven)); },","  valueOnly: true","});","","function formatWinner(winner) {","  return winner.impl + ' (by ' + (winner.margin * 100).toFixed(2) + '%)';","}","","function formatOverallWinner(resultGroups) {","  var winners = Lazy(resultGroups)","    .countBy(function(resultGroup) {","      return resultGroup.winner.impl;","    })","    .toObject();","","  if (Object.keys(winners).length === 1) {","    return Lazy(winners).keys().first();","  }","","  var breakdown = Lazy(winners)","    .map(function(count, winner) {","      return winner + ' - ' + count","    })","    .join(', ');","","  return 'mixed (' + breakdown + ')';","}","","marathon.start({","  start: function(race) {","    console.log('Starting \"' + race.description + '\" race...');","  },","","  result: function(result) {","    console.log(' * ' + [","      result.input.name,","      result.impl,","      result.perf.toFixed(3) + ' ops/sec'","    ].join('\\t'));","  },","","  mismatch: function(outputs) {","    console.log(' * mismatch for the \"' + outputs.input.name + '\" case!');","  },","","  complete: function(resultGroups) {","    console.log(' * WINNER: ' + formatOverallWinner(resultGroups));","    console.log('');","  },","","  marathonComplete: function(resultGroups) {","    var dataObjects = Lazy(resultGroups)","      .map(function(resultGroup) {","        var dataObject = {","          'race': resultGroup.race,","          'input size': resultGroup.input.size","        };","","        Lazy(resultGroup.results).each(function(perf, impl) {","          dataObject[impl] = perf;","        });","","        dataObject.winner = formatWinner(resultGroup.winner);","","        return dataObject;","      })","      .toArray();","","    console.log(stringTable.create(dataObjects, {","      typeFormatters: {","        'number': function(value) {","          return Number(value.toFixed(3));","        }","      },","      capitalizeHeaders: true","    }));","    console.log('');","  }","});",""],"l":{"3":2,"5":0,"10":0,"12":0,"14":0,"16":0,"17":0,"18":0,"21":0,"24":1,"25":0,"28":1,"29":0,"32":1,"33":0,"36":1,"37":0,"40":1,"41":0,"44":1,"45":0,"46":0,"49":0,"52":1,"53":0,"56":1,"57":0,"60":1,"61":0,"80":1,"81":0,"99":1,"100":0,"103":1,"104":0,"105":0,"106":0,"109":0,"112":0,"115":1,"116":0,"117":0,"119":0,"122":1,"123":0,"124":0,"126":0,"129":0,"131":1,"132":0,"133":0,"134":0,"135":0,"139":1,"140":0,"141":0,"142":0,"143":0,"147":1,"148":0,"149":0,"161":0,"162":0,"163":0,"166":0,"167":0,"168":0,"171":0,"172":0,"173":0,"176":0,"177":0,"178":0,"181":0,"182":0,"183":0,"186":0,"187":0,"188":0,"191":0,"192":0,"193":0,"196":0,"197":0,"198":0,"202":0,"203":0,"204":0,"207":0,"208":0,"209":0,"212":0,"213":0,"214":0,"217":0,"218":0,"219":0,"222":0,"223":0,"224":0,"228":0,"229":0,"230":0,"234":0,"235":0,"236":0,"240":1,"241":0,"244":1,"245":0,"247":0,"251":0,"252":0,"255":0,"257":0,"261":0,"264":0,"266":0,"270":0,"278":0,"282":0,"283":0,"287":0,"289":0,"294":0,"295":0,"298":0,"300":0,"304":0,"307":0,"312":0}}}